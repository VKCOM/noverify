package linter

import (
	"regexp"
	"runtime"
	"time"

	"github.com/VKCOM/php-parser/pkg/version"
	"github.com/client9/misspell"

	"github.com/VKCOM/noverify/src/baseline"
	"github.com/VKCOM/noverify/src/inputs"
	"github.com/VKCOM/noverify/src/rules"
)

type Config struct {
	// BaselineProfile is a suppression database for warnings.
	// Nil profile is an empty suppression profile.
	BaselineProfile       *baseline.Profile
	ComputeBaselineHashes bool // Whether we need to compute report hashes
	ConservativeBaseline  bool

	ApplyQuickFixes bool

	// KPHP tells whether we're working in KPHP-compatible mode.
	KPHP bool

	CacheDir string

	// TypoFixer is a rule set for English typos correction.
	// If nil, no misspell checking is performed.
	// See github.com/client9/misspell for details.
	TypoFixer *misspell.Replacer

	// SrcInput implements source code reading from files and buffers.
	SrcInput inputs.SourceInput

	// Rules is a set of dynamically loaded linter diagnostics.
	Rules *rules.Set

	// settings

	StubsDir string
	Debug    bool

	// MaxConcurrency limits the linter concurrency.
	MaxConcurrency int

	// DebugParseDuration specifies the minimum parse duration for it to be printed to debug output.
	DebugParseDuration time.Duration

	CheckAutoGenerated bool

	IsDiscardVar func(varname string) bool

	ExcludeRegex *regexp.Regexp

	AllowDisable *regexp.Regexp

	PhpExtensions []string

	Checkers *CheckersRegistry

	IgnoreTriggerError bool

	PhpVersion *version.Version

	StrictMixed bool
}

func NewConfig(ver string) *Config {
	reg := &CheckersRegistry{
		info: map[string]CheckerInfo{},
	}

	phpVersion, _ := version.New(ver)

	addBuiltinCheckers(reg)
	return &Config{
		SrcInput:       inputs.NewDefaultSourceInput(),
		Rules:          rules.NewSet(),
		MaxConcurrency: runtime.NumCPU(),
		IsDiscardVar:   isUnderscore,
		Checkers:       reg,
		PhpVersion:     phpVersion,
	}
}
