WARNING unused: Variable $a is unused (use $_ to ignore this inspection or specify --unused-var-regex flag) at testdata/math/src/BigDecimal.php:292
        [$a, $b] = $this->scaleValues($this, $that);
         ^^
WARNING notSafetyCall: potential not safety call in function str_repeat signature of param times at testdata/math/src/BigDecimal.php:464
            $value .= \str_repeat('0', $addDigits);
                                       ^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function substr signature of param length at testdata/math/src/BigDecimal.php:472
            $value = \substr($value, 0, $addDigits);
                                        ^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function sqrt signature of param n at testdata/math/src/BigDecimal.php:475
        $value = Calculator::get()->sqrt($value);
                                         ^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function of signature of param value at testdata/math/src/BigDecimal.php:588
        $that = BigNumber::of($that);
                              ^^^^^
WARNING notSafetyCall: potential not safety call in function str_pad signature of param string at testdata/math/src/BigDecimal.php:847
        $value = \str_pad($value, $targetLength, '0', STR_PAD_LEFT);
                          ^^^^^^
WARNING notSafetyCall: potential not safety call in function str_pad signature of param length at testdata/math/src/BigDecimal.php:847
        $value = \str_pad($value, $targetLength, '0', STR_PAD_LEFT);
                                  ^^^^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function ltrim signature of param string at testdata/math/src/BigInteger.php:105
        $number = \ltrim($number, '0');
                         ^^^^^^^
MAYBE   trailingComma: Last element in a multi-line array should have a trailing comma at testdata/math/src/BigInteger.php:435
            new BigInteger($remainder)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function of signature of param value at testdata/math/src/BigInteger.php:742
        $that = BigNumber::of($that);
                              ^^^^^
WARNING notSafetyCall: potential not safety call in function preg_match signature of param subject at testdata/math/src/BigNumber.php:74
        if (\preg_match(self::PARSE_REGEXP, $value, $matches) !== 1) {
                                            ^^^^^^
MAYBE   ternarySimplify: Could rewrite as `$matches['fractional'] ?? ''` at testdata/math/src/BigNumber.php:90
            $fractional = isset($matches['fractional']) ? $matches['fractional'] : '';
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function setlocale signature of param rest at testdata/math/src/BigNumber.php:131
        \setlocale(LC_NUMERIC, $currentLocale);
                               ^^^^^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function of signature of param value at testdata/math/src/BigNumber.php:171
            $value = static::of($value);
                                ^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function isLessThan signature of param that at testdata/math/src/BigNumber.php:173
            if ($min === null || $value->isLessThan($min)) {
                                                    ^^^^
WARNING notSafetyCall: potential not safety call in function of signature of param value at testdata/math/src/BigNumber.php:203
            $value = static::of($value);
                                ^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function isGreaterThan signature of param that at testdata/math/src/BigNumber.php:205
            if ($max === null || $value->isGreaterThan($max)) {
                                                       ^^^^
WARNING notSafetyCall: potential not safety call in function of signature of param value at testdata/math/src/BigNumber.php:236
            $value = static::of($value);
                                ^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function add signature of param a at testdata/math/src/BigNumber.php:241
                $sum = self::add($sum, $value);
                                 ^^^^
WARNING notSafetyCall: potential not safety call in function ltrim signature of param string at testdata/math/src/BigNumber.php:307
        $number = \ltrim($number, '0');
                         ^^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function minus signature of param that at testdata/math/src/BigRational.php:365
        return $this->minus($that)->getSign();
                            ^^^^^
MAYBE   implicitModifiers: Specify the access modifier for \Brick\Math\Internal\Calculator::powmod method explicitly at testdata/math/src/Internal/Calculator.php:260
    abstract function powmod(string $base, string $exp, string $mod) : string;
                      ^^^^^^
WARNING notSafetyCall: potential not safety call in function toArbitraryBase signature of param number at testdata/math/src/Internal/Calculator.php:333
        $number = $this->toArbitraryBase($number, self::ALPHABET, $base);
                                         ^^^^^^^
WARNING notSafetyCall: potential not safety call in function twosComplement signature of param number at testdata/math/src/Internal/Calculator.php:605
            $value = $this->twosComplement($value);
                                           ^^^^^^
WARNING notSafetyCall: potential not safety call in function toDecimal signature of param bytes at testdata/math/src/Internal/Calculator.php:608
        $result = $this->toDecimal($value);
                                   ^^^^^^
MAYBE   assignOp: Could rewrite as `$number ^= $xor` at testdata/math/src/Internal/Calculator.php:622
        $number = $number ^ $xor;
        ^^^^^^^^^^^^^^^^^^^^^^^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function gmp_strval signature of param num at testdata/math/src/Internal/Calculator/GmpCalculator.php:66
            \gmp_strval($q),
                        ^^
WARNING notNullSafetyFunctionArgumentVariable: not null safety call in function gmp_strval signature of param num at testdata/math/src/Internal/Calculator/GmpCalculator.php:67
            \gmp_strval($r)
                        ^^
MAYBE   trailingComma: Last element in a multi-line array should have a trailing comma at testdata/math/src/Internal/Calculator/GmpCalculator.php:67
            \gmp_strval($r)
            ^^^^^^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function neg signature of param n at testdata/math/src/Internal/Calculator/NativeCalculator.php:79
            $result = $this->neg($result);
                                 ^^^^^^^
MAYBE   trailingComma: Last element in a multi-line array should have a trailing comma at testdata/math/src/Internal/Calculator/NativeCalculator.php:187
                    (string) $r
                    ^^^^^^^^^^^
WARNING notSafetyCall: potential not safety call in function substr signature of param offset at testdata/math/src/Internal/Calculator/NativeCalculator.php:322
            $blockA = \substr($a, $i, $blockLength);
                                  ^^
WARNING notSafetyCall: potential not safety call in function substr signature of param offset at testdata/math/src/Internal/Calculator/NativeCalculator.php:323
            $blockB = \substr($b, $i, $blockLength);
                                  ^^
WARNING notSafetyCall: potential not safety call in function substr signature of param offset at testdata/math/src/Internal/Calculator/NativeCalculator.php:392
            $blockA = \substr($a, $i, $blockLength);
                                  ^^
WARNING notSafetyCall: potential not safety call in function substr signature of param offset at testdata/math/src/Internal/Calculator/NativeCalculator.php:393
            $blockB = \substr($b, $i, $blockLength);
                                  ^^
WARNING notSafetyCall: potential not safety call in function doCmp signature of param a at testdata/math/src/Internal/Calculator/NativeCalculator.php:532
            $cmp = $this->doCmp($focus, $b);
                                ^^^^^^
ERROR   classMembersOrder: Constant UNNECESSARY must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:33
    public const UNNECESSARY = 0;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant UP must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:41
    public const UP = 1;
    ^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant DOWN must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:49
    public const DOWN = 2;
    ^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant CEILING must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:57
    public const CEILING = 3;
    ^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant FLOOR must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:65
    public const FLOOR = 4;
    ^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant HALF_UP must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:73
    public const HALF_UP = 5;
    ^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant HALF_DOWN must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:80
    public const HALF_DOWN = 6;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant HALF_CEILING must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:87
    public const HALF_CEILING = 7;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant HALF_FLOOR must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:94
    public const HALF_FLOOR = 8;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
ERROR   classMembersOrder: Constant HALF_EVEN must go before methods in the class RoundingMode at testdata/math/src/RoundingMode.php:106
    public const HALF_EVEN = 9;
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
