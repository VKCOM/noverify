// Code generated by the `ir/codegen` package. DO NOT EDIT.
package ir

import (
	"fmt"
	"github.com/z7zmey/php-parser/pkg/position"
)

func GetPosition(n Node) *position.Position {
	switch n := n.(type) {
	case *AnonClassExpr:
		return n.Position
	case *Argument:
		return n.Position
	case *ArrayDimFetchExpr:
		return n.Position
	case *ArrayExpr:
		return n.Position
	case *ArrayItemExpr:
		return n.Position
	case *ArrowFunctionExpr:
		return n.Position
	case *Assign:
		return n.Position
	case *AssignBitwiseAnd:
		return n.Position
	case *AssignBitwiseOr:
		return n.Position
	case *AssignBitwiseXor:
		return n.Position
	case *AssignCoalesce:
		return n.Position
	case *AssignConcat:
		return n.Position
	case *AssignDiv:
		return n.Position
	case *AssignMinus:
		return n.Position
	case *AssignMod:
		return n.Position
	case *AssignMul:
		return n.Position
	case *AssignPlus:
		return n.Position
	case *AssignPow:
		return n.Position
	case *AssignReference:
		return n.Position
	case *AssignShiftLeft:
		return n.Position
	case *AssignShiftRight:
		return n.Position
	case *BadString:
		return n.Position
	case *BitwiseAndExpr:
		return n.Position
	case *BitwiseNotExpr:
		return n.Position
	case *BitwiseOrExpr:
		return n.Position
	case *BitwiseXorExpr:
		return n.Position
	case *BooleanAndExpr:
		return n.Position
	case *BooleanNotExpr:
		return n.Position
	case *BooleanOrExpr:
		return n.Position
	case *BreakStmt:
		return n.Position
	case *CaseStmt:
		return n.Position
	case *CatchStmt:
		return n.Position
	case *ClassConstFetchExpr:
		return n.Position
	case *ClassConstListStmt:
		return n.Position
	case *ClassExtendsStmt:
		return n.Position
	case *ClassImplementsStmt:
		return n.Position
	case *ClassMethodStmt:
		return n.Position
	case *ClassStmt:
		return n.Position
	case *CloneExpr:
		return n.Position
	case *ClosureExpr:
		return n.Position
	case *ClosureUseExpr:
		return n.Position
	case *CoalesceExpr:
		return n.Position
	case *ConcatExpr:
		return n.Position
	case *ConstFetchExpr:
		return n.Position
	case *ConstListStmt:
		return n.Position
	case *ConstantStmt:
		return n.Position
	case *ContinueStmt:
		return n.Position
	case *DeclareStmt:
		return n.Position
	case *DefaultStmt:
		return n.Position
	case *DivExpr:
		return n.Position
	case *Dnumber:
		return n.Position
	case *DoStmt:
		return n.Position
	case *EchoStmt:
		return n.Position
	case *ElseIfStmt:
		return n.Position
	case *ElseStmt:
		return n.Position
	case *EmptyExpr:
		return n.Position
	case *Encapsed:
		return n.Position
	case *EncapsedStringPart:
		return n.Position
	case *EqualExpr:
		return n.Position
	case *ErrorSuppressExpr:
		return n.Position
	case *EvalExpr:
		return n.Position
	case *ExitExpr:
		return n.Position
	case *ExpressionStmt:
		return n.Position
	case *FinallyStmt:
		return n.Position
	case *ForStmt:
		return n.Position
	case *ForeachStmt:
		return n.Position
	case *FunctionCallExpr:
		return n.Position
	case *FunctionStmt:
		return n.Position
	case *GlobalStmt:
		return n.Position
	case *GotoStmt:
		return n.Position
	case *GreaterExpr:
		return n.Position
	case *GreaterOrEqualExpr:
		return n.Position
	case *GroupUseStmt:
		return n.Position
	case *HaltCompilerStmt:
		return n.Position
	case *Heredoc:
		return n.Position
	case *IdenticalExpr:
		return n.Position
	case *Identifier:
		return n.Position
	case *IfStmt:
		return n.Position
	case *ImportExpr:
		return n.Position
	case *InlineHTMLStmt:
		return n.Position
	case *InstanceOfExpr:
		return n.Position
	case *InterfaceExtendsStmt:
		return n.Position
	case *InterfaceStmt:
		return n.Position
	case *IssetExpr:
		return n.Position
	case *LabelStmt:
		return n.Position
	case *ListExpr:
		return n.Position
	case *Lnumber:
		return n.Position
	case *LogicalAndExpr:
		return n.Position
	case *LogicalOrExpr:
		return n.Position
	case *LogicalXorExpr:
		return n.Position
	case *MagicConstant:
		return n.Position
	case *MethodCallExpr:
		return n.Position
	case *MinusExpr:
		return n.Position
	case *ModExpr:
		return n.Position
	case *MulExpr:
		return n.Position
	case *Name:
		return n.Position
	case *NamespaceStmt:
		return n.Position
	case *NewExpr:
		return n.Position
	case *NopStmt:
		return n.Position
	case *NotEqualExpr:
		return n.Position
	case *NotIdenticalExpr:
		return n.Position
	case *Nullable:
		return n.Position
	case *Parameter:
		return n.Position
	case *ParenExpr:
		return n.Position
	case *PlusExpr:
		return n.Position
	case *PostDecExpr:
		return n.Position
	case *PostIncExpr:
		return n.Position
	case *PowExpr:
		return n.Position
	case *PreDecExpr:
		return n.Position
	case *PreIncExpr:
		return n.Position
	case *PrintExpr:
		return n.Position
	case *PropertyFetchExpr:
		return n.Position
	case *PropertyListStmt:
		return n.Position
	case *PropertyStmt:
		return n.Position
	case *ReferenceExpr:
		return n.Position
	case *ReturnStmt:
		return n.Position
	case *Root:
		return n.Position
	case *ShellExecExpr:
		return n.Position
	case *ShiftLeftExpr:
		return n.Position
	case *ShiftRightExpr:
		return n.Position
	case *SimpleVar:
		return n.Position
	case *SmallerExpr:
		return n.Position
	case *SmallerOrEqualExpr:
		return n.Position
	case *SpaceshipExpr:
		return n.Position
	case *StaticCallExpr:
		return n.Position
	case *StaticPropertyFetchExpr:
		return n.Position
	case *StaticStmt:
		return n.Position
	case *StaticVarStmt:
		return n.Position
	case *StmtList:
		return n.Position
	case *String:
		return n.Position
	case *SwitchStmt:
		return n.Position
	case *TernaryExpr:
		return n.Position
	case *ThrowStmt:
		return n.Position
	case *TraitAdaptationListStmt:
		return n.Position
	case *TraitMethodRefStmt:
		return n.Position
	case *TraitStmt:
		return n.Position
	case *TraitUseAliasStmt:
		return n.Position
	case *TraitUsePrecedenceStmt:
		return n.Position
	case *TraitUseStmt:
		return n.Position
	case *TryStmt:
		return n.Position
	case *TypeCastExpr:
		return n.Position
	case *UnaryMinusExpr:
		return n.Position
	case *UnaryPlusExpr:
		return n.Position
	case *UnsetCastExpr:
		return n.Position
	case *UnsetStmt:
		return n.Position
	case *UseListStmt:
		return n.Position
	case *UseStmt:
		return n.Position
	case *Var:
		return n.Position
	case *WhileStmt:
		return n.Position
	case *YieldExpr:
		return n.Position
	case *YieldFromExpr:
		return n.Position
	default:
		panic(fmt.Sprintf(`unhandled type %T`, n))
	}
}
