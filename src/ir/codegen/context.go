package main

import (
	"bytes"
	"fmt"
	"go/format"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"path/filepath"
	"strings"
	"time"
)

type context struct {
	args arguments

	gitCommit string
	date      time.Time

	rootDir string

	fset *token.FileSet

	irPkg *packageData

	nodeIface *types.Interface
}

type packageData struct {
	scope *types.Scope
	types []*typeData
}

type typeData struct {
	name string
	info *types.Struct
}

type codegenFile struct {
	filename string
	pkgPath  string
	contents []byte
	deps     []string
}

func (ctx *context) Debugf(format string, args ...interface{}) {
	if ctx.args.debug {
		log.Println("DEBUG: " + fmt.Sprintf(format, args...))
	}
}

func (ctx *context) WriteGoFile(f codegenFile) error {
	if !strings.HasPrefix(f.pkgPath, "ir") {
		return fmt.Errorf("no ir package prefix in %s", f.pkgPath)
	}

	pkgName := filepath.Base(f.pkgPath)

	var fullFilename string
	if f.pkgPath == "ir" {
		fullFilename = filepath.Join(ctx.rootDir, f.filename)
	} else {
		// Since rootDir already contains "ir/", we trim that
		// from the package name.
		pkgWithoutIR := strings.TrimPrefix(f.pkgPath, "ir/")
		// If pkg contains "/" we want to pass these as separate
		// parts to avoid issues on Windows.
		parts := []string{ctx.rootDir}
		parts = append(parts, strings.Split(pkgWithoutIR, "/")...)
		parts = append(parts, f.filename)
		fullFilename = filepath.Join(parts...)
	}

	var buf bytes.Buffer
	buf.Grow(len(f.contents) + 1024)

	buf.WriteString("// Code generated by the `ir/codegen` package. DO NOT EDIT.\n")
	fmt.Fprintf(&buf, "package %s\n", pkgName)
	if len(f.deps) != 0 {
		buf.WriteString("import (\n")
		for _, dep := range f.deps {
			fmt.Fprintf(&buf, `  "%s"`+"\n", dep)
		}
		buf.WriteString(")\n")
	}
	buf.Write(f.contents)

	prettySrc, err := format.Source(buf.Bytes())
	if err != nil {
		ctx.Debugf("bad source: %s", buf.Bytes())
		return fmt.Errorf("gofmt: %v", err)
	}

	if err := ioutil.WriteFile(fullFilename, prettySrc, 0666); err != nil {
		return fmt.Errorf("write file: %v", err)
	}

	return nil
}
