// Code generated by the `ir/codegen` package. DO NOT EDIT.
package ir

func (n *AnonClassExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ClassTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ExtendsTkn) {
		return
	}
	if !cb(n.ImplementsTkn) {
		return
	}
	for _, tk := range n.ImplementsSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *Argument) IterateTokens(cb func(*Token) bool) {
	if !cb(n.VariadicTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
}

func (n *ArrayDimFetchExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenBracketTkn) {
		return
	}
	if !cb(n.CloseBracketTkn) {
		return
	}
}

func (n *ArrayExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ArrayTkn) {
		return
	}
	if !cb(n.OpenBracketTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseBracketTkn) {
		return
	}
}

func (n *ArrayItemExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EllipsisTkn) {
		return
	}
	if !cb(n.DoubleArrowTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
}

func (n *ArrowFunctionExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.StaticTkn) {
		return
	}
	if !cb(n.FnTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.DoubleArrowTkn) {
		return
	}
}

func (n *Assign) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignBitwiseAnd) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignBitwiseOr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignBitwiseXor) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignCoalesce) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignConcat) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignDiv) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignMinus) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignMod) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignMul) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignPlus) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignPow) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignReference) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignShiftLeft) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *AssignShiftRight) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *BadString) IterateTokens(cb func(*Token) bool) {
	if !cb(n.MinusTkn) {
		return
	}
	if !cb(n.StringTkn) {
		return
	}
}

func (n *BitwiseAndExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *BitwiseNotExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.TildaTkn) {
		return
	}
}

func (n *BitwiseOrExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *BitwiseXorExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *BooleanAndExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *BooleanNotExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ExclamationTkn) {
		return
	}
}

func (n *BooleanOrExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *BreakStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.BreakTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *CaseListStmt) IterateTokens(cb func(*Token) bool) {
}

func (n *CaseStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.CaseTkn) {
		return
	}
	if !cb(n.CaseSeparatorTkn) {
		return
	}
}

func (n *CatchStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.CatchTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *ClassConstFetchExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DoubleColonTkn) {
		return
	}
}

func (n *ClassConstListStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ConstTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *ClassExtendsStmt) IterateTokens(cb func(*Token) bool) {
}

func (n *ClassImplementsStmt) IterateTokens(cb func(*Token) bool) {
}

func (n *ClassMethodStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.FunctionTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
}

func (n *ClassStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ClassTkn) {
		return
	}
	if !cb(n.ExtendsTkn) {
		return
	}
	if !cb(n.ImplementsTkn) {
		return
	}
	for _, tk := range n.ImplementsSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *CloneExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.CloneTkn) {
		return
	}
}

func (n *ClosureExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.StaticTkn) {
		return
	}
	if !cb(n.FunctionTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.UseTkn) {
		return
	}
	if !cb(n.UseOpenParenthesisTkn) {
		return
	}
	for _, tk := range n.UseSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.UseCloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *ClosureUseExpr) IterateTokens(cb func(*Token) bool) {
}

func (n *CoalesceExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *ConcatExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *ConstFetchExpr) IterateTokens(cb func(*Token) bool) {
}

func (n *ConstListStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ConstTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *ConstantStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *ContinueStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ContinueTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *DeclareStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DeclareTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.EndDeclareTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *DefaultStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DefaultTkn) {
		return
	}
	if !cb(n.CaseSeparatorTkn) {
		return
	}
}

func (n *DivExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *Dnumber) IterateTokens(cb func(*Token) bool) {
	if !cb(n.NumberTkn) {
		return
	}
}

func (n *DoStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DoTkn) {
		return
	}
	if !cb(n.WhileTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *EchoStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EchoTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *ElseIfStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ElseIfTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
}

func (n *ElseStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ElseTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
}

func (n *EmptyExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EmptyTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *Encapsed) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenQuoteTkn) {
		return
	}
	if !cb(n.CloseQuoteTkn) {
		return
	}
}

func (n *EncapsedStringPart) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EncapsedStrTkn) {
		return
	}
}

func (n *EqualExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *ErrorSuppressExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.AtTkn) {
		return
	}
}

func (n *EvalExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EvalTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *ExitExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ExitTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *ExpressionStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *FinallyStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.FinallyTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *ForStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ForTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.InitSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.InitSemiColonTkn) {
		return
	}
	for _, tk := range n.CondSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CondSemiColonTkn) {
		return
	}
	for _, tk := range n.LoopSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.EndForTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *ForeachStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ForeachTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.AsTkn) {
		return
	}
	if !cb(n.DoubleArrowTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.EndForeachTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *FunctionCallExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *FunctionStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.FunctionTkn) {
		return
	}
	if !cb(n.AmpersandTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *GlobalStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.GlobalTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *GotoStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.GotoTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *GreaterExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *GreaterOrEqualExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *GroupUseStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.UseTkn) {
		return
	}
	if !cb(n.LeadingNsSeparatorTkn) {
		return
	}
	if !cb(n.NsSeparatorTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *HaltCompilerStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.HaltCompilerTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *Heredoc) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenHeredocTkn) {
		return
	}
	if !cb(n.CloseHeredocTkn) {
		return
	}
}

func (n *IdenticalExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *Identifier) IterateTokens(cb func(*Token) bool) {
	if !cb(n.IdentifierTkn) {
		return
	}
}

func (n *IfStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.IfTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.EndIfTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *ImportExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ImportTkn) {
		return
	}
}

func (n *InlineHTMLStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.InlineHTMLTkn) {
		return
	}
}

func (n *InstanceOfExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.InstanceOfTkn) {
		return
	}
}

func (n *InterfaceExtendsStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.Token) {
		return
	}
}

func (n *InterfaceStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.InterfaceTkn) {
		return
	}
	if !cb(n.ExtendsTkn) {
		return
	}
	for _, tk := range n.ExtendsSeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *IssetExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.IssetTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *LabelStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ColonTkn) {
		return
	}
}

func (n *ListExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ListTkn) {
		return
	}
	if !cb(n.OpenBracketTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseBracketTkn) {
		return
	}
}

func (n *Lnumber) IterateTokens(cb func(*Token) bool) {
	if !cb(n.NumberTkn) {
		return
	}
}

func (n *LogicalAndExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *LogicalOrExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *LogicalXorExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *MagicConstant) IterateTokens(cb func(*Token) bool) {
	if !cb(n.MagicConstTkn) {
		return
	}
}

func (n *MethodCallExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ObjectOperatorTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *MinusExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *ModExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *MulExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *Name) IterateTokens(cb func(*Token) bool) {
}

func (n *NamespaceStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.NsTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *NewExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.NewTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *NopStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *NotEqualExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *NotIdenticalExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *Nullable) IterateTokens(cb func(*Token) bool) {
	if !cb(n.QuestionTkn) {
		return
	}
}

func (n *Parameter) IterateTokens(cb func(*Token) bool) {
	if !cb(n.AmpersandTkn) {
		return
	}
	if !cb(n.VariadicTkn) {
		return
	}
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *ParenExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *PlusExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *PostDecExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DecTkn) {
		return
	}
}

func (n *PostIncExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.IncTkn) {
		return
	}
}

func (n *PowExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *PreDecExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DecTkn) {
		return
	}
}

func (n *PreIncExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.IncTkn) {
		return
	}
}

func (n *PrintExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.PrintTkn) {
		return
	}
}

func (n *PropertyFetchExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ObjectOperatorTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *PropertyListStmt) IterateTokens(cb func(*Token) bool) {
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *PropertyStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *ReferenceExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.AmpersandTkn) {
		return
	}
}

func (n *ReturnStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ReturnTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *Root) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EndTkn) {
		return
	}
}

func (n *ShellExecExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenBacktickTkn) {
		return
	}
	if !cb(n.CloseBacktickTkn) {
		return
	}
}

func (n *ShiftLeftExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *ShiftRightExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *SimpleVar) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DollarTkn) {
		return
	}
}

func (n *SmallerExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *SmallerOrEqualExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *SpaceshipExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpTkn) {
		return
	}
}

func (n *StaticCallExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DoubleColonTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
}

func (n *StaticPropertyFetchExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DoubleColonTkn) {
		return
	}
}

func (n *StaticStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.StaticTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *StaticVarStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.EqualTkn) {
		return
	}
}

func (n *StmtList) IterateTokens(cb func(*Token) bool) {
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *String) IterateTokens(cb func(*Token) bool) {
	if !cb(n.MinusTkn) {
		return
	}
	if !cb(n.StringTkn) {
		return
	}
}

func (n *SwitchStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.SwitchTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CaseSeparatorTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
	if !cb(n.EndSwitchTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *TernaryExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.QuestionTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
}

func (n *ThrowStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.ThrowTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *TraitAdaptationListStmt) IterateTokens(cb func(*Token) bool) {
}

func (n *TraitMethodRefStmt) IterateTokens(cb func(*Token) bool) {
}

func (n *TraitStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.TraitTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *TraitUseAliasStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DoubleColonTkn) {
		return
	}
	if !cb(n.AsTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *TraitUsePrecedenceStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DoubleColonTkn) {
		return
	}
	if !cb(n.InsteadofTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *TraitUseStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.UseTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *TryStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.TryTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *TypeCastExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.CastTkn) {
		return
	}
}

func (n *UnaryMinusExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.MinusTkn) {
		return
	}
}

func (n *UnaryPlusExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.PlusTkn) {
		return
	}
}

func (n *UnsetCastExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.CastTkn) {
		return
	}
}

func (n *UnsetStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.UnsetTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *UseListStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.UseTkn) {
		return
	}
	for _, tk := range n.SeparatorTkns {
		if !cb(tk) {
			return
		}
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *UseStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.NsSeparatorTkn) {
		return
	}
	if !cb(n.AsTkn) {
		return
	}
}

func (n *Var) IterateTokens(cb func(*Token) bool) {
	if !cb(n.DollarTkn) {
		return
	}
	if !cb(n.OpenCurlyBracketTkn) {
		return
	}
	if !cb(n.CloseCurlyBracketTkn) {
		return
	}
}

func (n *WhileStmt) IterateTokens(cb func(*Token) bool) {
	if !cb(n.WhileTkn) {
		return
	}
	if !cb(n.OpenParenthesisTkn) {
		return
	}
	if !cb(n.CloseParenthesisTkn) {
		return
	}
	if !cb(n.ColonTkn) {
		return
	}
	if !cb(n.EndWhileTkn) {
		return
	}
	if !cb(n.SemiColonTkn) {
		return
	}
}

func (n *YieldExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.YieldTkn) {
		return
	}
	if !cb(n.DoubleArrowTkn) {
		return
	}
}

func (n *YieldFromExpr) IterateTokens(cb func(*Token) bool) {
	if !cb(n.YieldFromTkn) {
		return
	}
}
