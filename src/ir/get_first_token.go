// Code generated by the `ir/codegen` package. DO NOT EDIT.
package ir

import (
	"fmt"
	"github.com/VKCOM/php-parser/pkg/token"
)

func GetFirstToken(n Node) *token.Token {
	switch n := n.(type) {
	case *AnonClassExpr:
		if n.ClassTkn != nil {
			return n.ClassTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *Argument:
		if n.Name != nil {
			return GetFirstToken(n.Name)
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.VariadicTkn != nil {
			return n.VariadicTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *ArrayDimFetchExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.OpenBracketTkn != nil {
			return n.OpenBracketTkn
		}
		if n.Dim != nil {
			return GetFirstToken(n.Dim)
		}
		if n.CloseBracketTkn != nil {
			return n.CloseBracketTkn
		}
	case *ArrayExpr:
		if n.ArrayTkn != nil {
			return n.ArrayTkn
		}
		if n.OpenBracketTkn != nil {
			return n.OpenBracketTkn
		}
		if n.Items != nil {
			if n.Items[0] != nil {
				return GetFirstToken(n.Items[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseBracketTkn != nil {
			return n.CloseBracketTkn
		}
	case *ArrayItemExpr:
		if n.EllipsisTkn != nil {
			return n.EllipsisTkn
		}
		if n.Key != nil {
			return GetFirstToken(n.Key)
		}
		if n.DoubleArrowTkn != nil {
			return n.DoubleArrowTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.Val != nil {
			return GetFirstToken(n.Val)
		}
	case *ArrowFunctionExpr:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.StaticTkn != nil {
			return n.StaticTkn
		}
		if n.FnTkn != nil {
			return n.FnTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Params) != 0 {
			if n.Params[0] != nil {
				return GetFirstToken(n.Params[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.ReturnType != nil {
			return GetFirstToken(n.ReturnType)
		}
		if n.DoubleArrowTkn != nil {
			return n.DoubleArrowTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *Assign:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignBitwiseAnd:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignBitwiseOr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignBitwiseXor:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignCoalesce:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignConcat:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignDiv:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignMinus:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignMod:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignMul:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignPlus:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignPow:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignReference:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignShiftLeft:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *AssignShiftRight:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *Attribute:
		if n.Name != nil {
			return GetFirstToken(n.Name)
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *AttributeGroup:
		if n.OpenAttributeTkn != nil {
			return n.OpenAttributeTkn
		}
		if n.Attrs != nil {
			if n.Attrs[0] != nil {
				return GetFirstToken(n.Attrs[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseAttributeTkn != nil {
			return n.CloseAttributeTkn
		}
	case *BadString:
	case *BitwiseAndExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *BitwiseNotExpr:
		if n.TildaTkn != nil {
			return n.TildaTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *BitwiseOrExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *BitwiseXorExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *BooleanAndExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *BooleanNotExpr:
		if n.ExclamationTkn != nil {
			return n.ExclamationTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *BooleanOrExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *BreakStmt:
		if n.BreakTkn != nil {
			return n.BreakTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *CaseStmt:
		if n.CaseTkn != nil {
			return n.CaseTkn
		}
		if n.Cond != nil {
			return GetFirstToken(n.Cond)
		}
		if n.CaseSeparatorTkn != nil {
			return n.CaseSeparatorTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
	case *CatchStmt:
		if n.CatchTkn != nil {
			return n.CatchTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Types) != 0 {
			if n.Types[0] != nil {
				return GetFirstToken(n.Types[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *ClassConstFetchExpr:
		if n.Class != nil {
			return GetFirstToken(n.Class)
		}
		if n.DoubleColonTkn != nil {
			return n.DoubleColonTkn
		}
		if n.ConstantName != nil {
			return GetFirstToken(n.ConstantName)
		}
	case *ClassConstListStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.Modifiers != nil {
			if n.Modifiers[0] != nil {
				return GetFirstToken(n.Modifiers[0])
			}
		}
		if n.ConstTkn != nil {
			return n.ConstTkn
		}
		if len(n.Consts) != 0 {
			if n.Consts[0] != nil {
				return GetFirstToken(n.Consts[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *ClassExtendsStmt:
		if n.ExtendsTkn != nil {
			return n.ExtendsTkn
		}
		if n.ClassName != nil {
			return GetFirstToken(n.ClassName)
		}
	case *ClassImplementsStmt:
		if n.ImplementsTkn != nil {
			return n.ImplementsTkn
		}
		if len(n.ImplementsSeparatorTkns) != 0 {
			return n.ImplementsSeparatorTkns[0]
		}
		if len(n.InterfaceNames) != 0 {
			if n.InterfaceNames[0] != nil {
				return GetFirstToken(n.InterfaceNames[0])
			}
		}
	case *ClassMethodStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.Modifiers != nil {
			if n.Modifiers[0] != nil {
				return GetFirstToken(n.Modifiers[0])
			}
		}
		if n.FunctionTkn != nil {
			return n.FunctionTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.MethodName != nil {
			return GetFirstToken(n.MethodName)
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Params) != 0 {
			if n.Params[0] != nil {
				return GetFirstToken(n.Params[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.ReturnType != nil {
			return GetFirstToken(n.ReturnType)
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
	case *ClassStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.Modifiers != nil {
			if n.Modifiers[0] != nil {
				return GetFirstToken(n.Modifiers[0])
			}
		}
		if n.ClassTkn != nil {
			return n.ClassTkn
		}
		if n.ClassName != nil {
			return GetFirstToken(n.ClassName)
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *CloneExpr:
		if n.CloneTkn != nil {
			return n.CloneTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *CloseTagStmt:
		if n.TagTkn != nil {
			return n.TagTkn
		}
	case *ClosureExpr:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.StaticTkn != nil {
			return n.StaticTkn
		}
		if n.FunctionTkn != nil {
			return n.FunctionTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Params) != 0 {
			if n.Params[0] != nil {
				return GetFirstToken(n.Params[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ClosureUse != nil {
			return GetFirstToken(n.ClosureUse)
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.ReturnType != nil {
			return GetFirstToken(n.ReturnType)
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *ClosureUsesExpr:
		if n.UseTkn != nil {
			return n.UseTkn
		}
		if n.UseOpenParenthesisTkn != nil {
			return n.UseOpenParenthesisTkn
		}
		if len(n.Uses) != 0 {
			if n.Uses[0] != nil {
				return GetFirstToken(n.Uses[0])
			}
		}
		if len(n.UseSeparatorTkns) != 0 {
			return n.UseSeparatorTkns[0]
		}
		if n.UseCloseParenthesisTkn != nil {
			return n.UseCloseParenthesisTkn
		}
	case *CoalesceExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *ConcatExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *ConstFetchExpr:
		if n.Constant != nil {
			return GetFirstToken(n.Constant)
		}
	case *ConstListStmt:
		if n.ConstTkn != nil {
			return n.ConstTkn
		}
		if len(n.Consts) != 0 {
			if n.Consts[0] != nil {
				return GetFirstToken(n.Consts[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *ConstantStmt:
		if n.ConstantName != nil {
			return GetFirstToken(n.ConstantName)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *ContinueStmt:
		if n.ContinueTkn != nil {
			return n.ContinueTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *DeclareStmt:
		if n.DeclareTkn != nil {
			return n.DeclareTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Consts) != 0 {
			if n.Consts[0] != nil {
				return GetFirstToken(n.Consts[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
		if n.EndDeclareTkn != nil {
			return n.EndDeclareTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *DefaultStmt:
		if n.DefaultTkn != nil {
			return n.DefaultTkn
		}
		if n.CaseSeparatorTkn != nil {
			return n.CaseSeparatorTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
	case *DivExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *Dnumber:
		if n.NumberTkn != nil {
			return n.NumberTkn
		}
	case *DoStmt:
		if n.DoTkn != nil {
			return n.DoTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
		if n.WhileTkn != nil {
			return n.WhileTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Cond != nil {
			return GetFirstToken(n.Cond)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *EchoStmt:
		if n.EchoTkn != nil {
			return n.EchoTkn
		}
		if len(n.Exprs) != 0 {
			if n.Exprs[0] != nil {
				return GetFirstToken(n.Exprs[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *ElseIfStmt:
		if n.ElseIfTkn != nil {
			return n.ElseIfTkn
		}
		if n.ElseTkn != nil {
			return n.ElseTkn
		}
		if n.IfTkn != nil {
			return n.IfTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Cond != nil {
			return GetFirstToken(n.Cond)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
	case *ElseStmt:
		if n.ElseTkn != nil {
			return n.ElseTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
	case *EmptyExpr:
		if n.EmptyTkn != nil {
			return n.EmptyTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *Encapsed:
		if n.OpenQuoteTkn != nil {
			return n.OpenQuoteTkn
		}
		if len(n.Parts) != 0 {
			if n.Parts[0] != nil {
				return GetFirstToken(n.Parts[0])
			}
		}
		if n.CloseQuoteTkn != nil {
			return n.CloseQuoteTkn
		}
	case *EncapsedStringPart:
		if n.EncapsedStrTkn != nil {
			return n.EncapsedStrTkn
		}
	case *EqualExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *ErrorSuppressExpr:
		if n.AtTkn != nil {
			return n.AtTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *EvalExpr:
		if n.EvalTkn != nil {
			return n.EvalTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *ExitExpr:
		if n.ExitTkn != nil {
			return n.ExitTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *ExpressionStmt:
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *FinallyStmt:
		if n.FinallyTkn != nil {
			return n.FinallyTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *ForStmt:
		if n.ForTkn != nil {
			return n.ForTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Init) != 0 {
			if n.Init[0] != nil {
				return GetFirstToken(n.Init[0])
			}
		}
		if len(n.InitSeparatorTkns) != 0 {
			return n.InitSeparatorTkns[0]
		}
		if n.InitSemiColonTkn != nil {
			return n.InitSemiColonTkn
		}
		if len(n.Cond) != 0 {
			if n.Cond[0] != nil {
				return GetFirstToken(n.Cond[0])
			}
		}
		if len(n.CondSeparatorTkns) != 0 {
			return n.CondSeparatorTkns[0]
		}
		if n.CondSemiColonTkn != nil {
			return n.CondSemiColonTkn
		}
		if len(n.Loop) != 0 {
			if n.Loop[0] != nil {
				return GetFirstToken(n.Loop[0])
			}
		}
		if len(n.LoopSeparatorTkns) != 0 {
			return n.LoopSeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
		if n.EndForTkn != nil {
			return n.EndForTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *ForeachStmt:
		if n.ForeachTkn != nil {
			return n.ForeachTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.AsTkn != nil {
			return n.AsTkn
		}
		if n.Key != nil {
			return GetFirstToken(n.Key)
		}
		if n.DoubleArrowTkn != nil {
			return n.DoubleArrowTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
		if n.EndForeachTkn != nil {
			return n.EndForeachTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *FunctionCallExpr:
		if n.Function != nil {
			return GetFirstToken(n.Function)
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *FunctionStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.FunctionTkn != nil {
			return n.FunctionTkn
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.FunctionName != nil {
			return GetFirstToken(n.FunctionName)
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Params) != 0 {
			if n.Params[0] != nil {
				return GetFirstToken(n.Params[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.ReturnType != nil {
			return GetFirstToken(n.ReturnType)
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *GlobalStmt:
		if n.GlobalTkn != nil {
			return n.GlobalTkn
		}
		if len(n.Vars) != 0 {
			if n.Vars[0] != nil {
				return GetFirstToken(n.Vars[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *GotoStmt:
		if n.GotoTkn != nil {
			return n.GotoTkn
		}
		if n.Label != nil {
			return GetFirstToken(n.Label)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *GreaterExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *GreaterOrEqualExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *GroupUseStmt:
		if n.UseTkn != nil {
			return n.UseTkn
		}
		if n.UseType != nil {
			return GetFirstToken(n.UseType)
		}
		if n.LeadingNsSeparatorTkn != nil {
			return n.LeadingNsSeparatorTkn
		}
		if n.Prefix != nil {
			return GetFirstToken(n.Prefix)
		}
		if n.NsSeparatorTkn != nil {
			return n.NsSeparatorTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.UseList) != 0 {
			if n.UseList[0] != nil {
				return GetFirstToken(n.UseList[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *HaltCompilerStmt:
		if n.HaltCompilerTkn != nil {
			return n.HaltCompilerTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *Heredoc:
		if n.OpenHeredocTkn != nil {
			return n.OpenHeredocTkn
		}
		if len(n.Parts) != 0 {
			if n.Parts[0] != nil {
				return GetFirstToken(n.Parts[0])
			}
		}
		if n.CloseHeredocTkn != nil {
			return n.CloseHeredocTkn
		}
	case *IdenticalExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *Identifier:
		if n.IdentifierTkn != nil {
			return n.IdentifierTkn
		}
	case *IfStmt:
		if n.IfTkn != nil {
			return n.IfTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Cond != nil {
			return GetFirstToken(n.Cond)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
		if len(n.ElseIf) != 0 {
			if n.ElseIf[0] != nil {
				return GetFirstToken(n.ElseIf[0])
			}
		}
		if n.Else != nil {
			return GetFirstToken(n.Else)
		}
		if n.EndIfTkn != nil {
			return n.EndIfTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
		if n.ElseTkn != nil {
			return n.ElseTkn
		}
	case *ImportExpr:
		if n.ImportTkn != nil {
			return n.ImportTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *InlineHTMLStmt:
		if n.InlineHTMLTkn != nil {
			return n.InlineHTMLTkn
		}
	case *InstanceOfExpr:
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.InstanceOfTkn != nil {
			return n.InstanceOfTkn
		}
		if n.Class != nil {
			return GetFirstToken(n.Class)
		}
	case *InterfaceExtendsStmt:
		if n.ExtendsTkn != nil {
			return n.ExtendsTkn
		}
		if len(n.InterfaceNames) != 0 {
			if n.InterfaceNames[0] != nil {
				return GetFirstToken(n.InterfaceNames[0])
			}
		}
		if len(n.ExtendsSeparatorTkns) != 0 {
			return n.ExtendsSeparatorTkns[0]
		}
	case *InterfaceStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.InterfaceTkn != nil {
			return n.InterfaceTkn
		}
		if n.InterfaceName != nil {
			return GetFirstToken(n.InterfaceName)
		}
		if n.Extends != nil {
			return GetFirstToken(n.Extends)
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *IssetExpr:
		if n.IssetTkn != nil {
			return n.IssetTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Variables) != 0 {
			if n.Variables[0] != nil {
				return GetFirstToken(n.Variables[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *LabelStmt:
		if n.LabelName != nil {
			return GetFirstToken(n.LabelName)
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
	case *ListExpr:
		if n.ListTkn != nil {
			return n.ListTkn
		}
		if n.OpenBracketTkn != nil {
			return n.OpenBracketTkn
		}
		if n.Items != nil {
			if n.Items[0] != nil {
				return GetFirstToken(n.Items[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseBracketTkn != nil {
			return n.CloseBracketTkn
		}
	case *Lnumber:
		if n.NumberTkn != nil {
			return n.NumberTkn
		}
	case *LogicalAndExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *LogicalOrExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *LogicalXorExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *MagicConstant:
		if n.MagicConstTkn != nil {
			return n.MagicConstTkn
		}
	case *MatchArm:
		if n.DefaultTkn != nil {
			return n.DefaultTkn
		}
		if n.DefaultCommaTkn != nil {
			return n.DefaultCommaTkn
		}
		if len(n.Exprs) != 0 {
			if n.Exprs[0] != nil {
				return GetFirstToken(n.Exprs[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.DoubleArrowTkn != nil {
			return n.DoubleArrowTkn
		}
		if n.ReturnExpr != nil {
			return GetFirstToken(n.ReturnExpr)
		}
	case *MatchExpr:
		if n.MatchTkn != nil {
			return n.MatchTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Arms != nil {
			if n.Arms[0] != nil {
				return GetFirstToken(n.Arms[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *MethodCallExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.ObjectOperatorTkn != nil {
			return n.ObjectOperatorTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Method != nil {
			return GetFirstToken(n.Method)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *MinusExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *ModExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *MulExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *Name:
		if n.NameTkn != nil {
			return n.NameTkn
		}
	case *NamespaceStmt:
		if n.NsTkn != nil {
			return n.NsTkn
		}
		if n.NamespaceName != nil {
			return GetFirstToken(n.NamespaceName)
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *NewExpr:
		if n.NewTkn != nil {
			return n.NewTkn
		}
		if n.Class != nil {
			return GetFirstToken(n.Class)
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *NopStmt:
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *NotEqualExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *NotIdenticalExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *Nullable:
		if n.QuestionTkn != nil {
			return n.QuestionTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *NullsafeMethodCallExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.ObjectOperatorTkn != nil {
			return n.ObjectOperatorTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Method != nil {
			return GetFirstToken(n.Method)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *NullsafePropertyFetchExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.ObjectOperatorTkn != nil {
			return n.ObjectOperatorTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Property != nil {
			return GetFirstToken(n.Property)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *Parameter:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.Modifiers != nil {
			if n.Modifiers[0] != nil {
				return GetFirstToken(n.Modifiers[0])
			}
		}
		if n.VariableType != nil {
			return GetFirstToken(n.VariableType)
		}
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.VariadicTkn != nil {
			return n.VariadicTkn
		}
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.DefaultValue != nil {
			return GetFirstToken(n.DefaultValue)
		}
	case *ParenExpr:
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *PlusExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *PostDecExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.DecTkn != nil {
			return n.DecTkn
		}
	case *PostIncExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.IncTkn != nil {
			return n.IncTkn
		}
	case *PowExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *PreDecExpr:
		if n.DecTkn != nil {
			return n.DecTkn
		}
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
	case *PreIncExpr:
		if n.IncTkn != nil {
			return n.IncTkn
		}
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
	case *PrintExpr:
		if n.PrintTkn != nil {
			return n.PrintTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *PropertyFetchExpr:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.ObjectOperatorTkn != nil {
			return n.ObjectOperatorTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Property != nil {
			return GetFirstToken(n.Property)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *PropertyListStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.Modifiers != nil {
			if n.Modifiers[0] != nil {
				return GetFirstToken(n.Modifiers[0])
			}
		}
		if n.Type != nil {
			return GetFirstToken(n.Type)
		}
		if len(n.Properties) != 0 {
			if n.Properties[0] != nil {
				return GetFirstToken(n.Properties[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *PropertyStmt:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *ReferenceExpr:
		if n.AmpersandTkn != nil {
			return n.AmpersandTkn
		}
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
	case *ReturnStmt:
		if n.ReturnTkn != nil {
			return n.ReturnTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *Root:
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.EndTkn != nil {
			return n.EndTkn
		}
	case *ShellExecExpr:
		if n.OpenBacktickTkn != nil {
			return n.OpenBacktickTkn
		}
		if len(n.Parts) != 0 {
			if n.Parts[0] != nil {
				return GetFirstToken(n.Parts[0])
			}
		}
		if n.CloseBacktickTkn != nil {
			return n.CloseBacktickTkn
		}
	case *ShiftLeftExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *ShiftRightExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *SimpleVar:
		if n.DollarTkn != nil {
			return n.DollarTkn
		}
		if n.IdentifierTkn != nil {
			return n.IdentifierTkn
		}
	case *SmallerExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *SmallerOrEqualExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *SpaceshipExpr:
		if n.Left != nil {
			return GetFirstToken(n.Left)
		}
		if n.OpTkn != nil {
			return n.OpTkn
		}
		if n.Right != nil {
			return GetFirstToken(n.Right)
		}
	case *StaticCallExpr:
		if n.Class != nil {
			return GetFirstToken(n.Class)
		}
		if n.DoubleColonTkn != nil {
			return n.DoubleColonTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Call != nil {
			return GetFirstToken(n.Call)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Args) != 0 {
			if n.Args[0] != nil {
				return GetFirstToken(n.Args[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
	case *StaticPropertyFetchExpr:
		if n.Class != nil {
			return GetFirstToken(n.Class)
		}
		if n.DoubleColonTkn != nil {
			return n.DoubleColonTkn
		}
		if n.Property != nil {
			return GetFirstToken(n.Property)
		}
	case *StaticStmt:
		if n.StaticTkn != nil {
			return n.StaticTkn
		}
		if len(n.Vars) != 0 {
			if n.Vars[0] != nil {
				return GetFirstToken(n.Vars[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *StaticVarStmt:
		if n.Variable != nil {
			return GetFirstToken(n.Variable)
		}
		if n.EqualTkn != nil {
			return n.EqualTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *StmtList:
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *String:
		if n.MinusTkn != nil {
			return n.MinusTkn
		}
		if n.StringTkn != nil {
			return n.StringTkn
		}
	case *SwitchStmt:
		if n.SwitchTkn != nil {
			return n.SwitchTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Cond != nil {
			return GetFirstToken(n.Cond)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.CaseSeparatorTkn != nil {
			return n.CaseSeparatorTkn
		}
		if len(n.Cases) != 0 {
			if n.Cases[0] != nil {
				return GetFirstToken(n.Cases[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.EndSwitchTkn != nil {
			return n.EndSwitchTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *TernaryExpr:
		if n.Condition != nil {
			return GetFirstToken(n.Condition)
		}
		if n.QuestionTkn != nil {
			return n.QuestionTkn
		}
		if n.IfTrue != nil {
			return GetFirstToken(n.IfTrue)
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.IfFalse != nil {
			return GetFirstToken(n.IfFalse)
		}
	case *ThrowExpr:
		if n.ThrowTkn != nil {
			return n.ThrowTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *ThrowStmt:
		if n.ThrowTkn != nil {
			return n.ThrowTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *TraitAdaptationListStmt:
		if len(n.Adaptations) != 0 {
			if n.Adaptations[0] != nil {
				return GetFirstToken(n.Adaptations[0])
			}
		}
	case *TraitMethodRefStmt:
		if n.Trait != nil {
			return GetFirstToken(n.Trait)
		}
		if n.Method != nil {
			return GetFirstToken(n.Method)
		}
	case *TraitStmt:
		if n.AttrGroups != nil {
			if n.AttrGroups[0] != nil {
				return GetFirstToken(n.AttrGroups[0])
			}
		}
		if n.TraitTkn != nil {
			return n.TraitTkn
		}
		if n.TraitName != nil {
			return GetFirstToken(n.TraitName)
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *TraitUseAliasStmt:
		if n.DoubleColonTkn != nil {
			return n.DoubleColonTkn
		}
		if n.Ref != nil {
			return GetFirstToken(n.Ref)
		}
		if n.AsTkn != nil {
			return n.AsTkn
		}
		if n.Modifier != nil {
			return GetFirstToken(n.Modifier)
		}
		if n.Alias != nil {
			return GetFirstToken(n.Alias)
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *TraitUsePrecedenceStmt:
		if n.DoubleColonTkn != nil {
			return n.DoubleColonTkn
		}
		if n.Ref != nil {
			return GetFirstToken(n.Ref)
		}
		if n.InsteadofTkn != nil {
			return n.InsteadofTkn
		}
		if len(n.Insteadof) != 0 {
			if n.Insteadof[0] != nil {
				return GetFirstToken(n.Insteadof[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *TraitUseStmt:
		if n.UseTkn != nil {
			return n.UseTkn
		}
		if len(n.Traits) != 0 {
			if n.Traits[0] != nil {
				return GetFirstToken(n.Traits[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.TraitAdaptationList != nil {
			return GetFirstToken(n.TraitAdaptationList)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *TryStmt:
		if n.TryTkn != nil {
			return n.TryTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if len(n.Stmts) != 0 {
			if n.Stmts[0] != nil {
				return GetFirstToken(n.Stmts[0])
			}
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
		if len(n.Catches) != 0 {
			if n.Catches[0] != nil {
				return GetFirstToken(n.Catches[0])
			}
		}
		if n.Finally != nil {
			return GetFirstToken(n.Finally)
		}
	case *TypeCastExpr:
		if n.CastTkn != nil {
			return n.CastTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *UnaryMinusExpr:
		if n.MinusTkn != nil {
			return n.MinusTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *UnaryPlusExpr:
		if n.PlusTkn != nil {
			return n.PlusTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *Union:
		if len(n.Types) != 0 {
			if n.Types[0] != nil {
				return GetFirstToken(n.Types[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
	case *UnsetCastExpr:
		if n.CastTkn != nil {
			return n.CastTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	case *UnsetStmt:
		if n.UnsetTkn != nil {
			return n.UnsetTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if len(n.Vars) != 0 {
			if n.Vars[0] != nil {
				return GetFirstToken(n.Vars[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *UseListStmt:
		if n.UseTkn != nil {
			return n.UseTkn
		}
		if n.UseType != nil {
			return GetFirstToken(n.UseType)
		}
		if len(n.Uses) != 0 {
			if n.Uses[0] != nil {
				return GetFirstToken(n.Uses[0])
			}
		}
		if len(n.SeparatorTkns) != 0 {
			return n.SeparatorTkns[0]
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *UseStmt:
		if n.UseType != nil {
			return GetFirstToken(n.UseType)
		}
		if n.NsSeparatorTkn != nil {
			return n.NsSeparatorTkn
		}
		if n.Use != nil {
			return GetFirstToken(n.Use)
		}
		if n.AsTkn != nil {
			return n.AsTkn
		}
		if n.Alias != nil {
			return GetFirstToken(n.Alias)
		}
	case *Var:
		if n.DollarTkn != nil {
			return n.DollarTkn
		}
		if n.OpenCurlyBracketTkn != nil {
			return n.OpenCurlyBracketTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
		if n.CloseCurlyBracketTkn != nil {
			return n.CloseCurlyBracketTkn
		}
	case *WhileStmt:
		if n.WhileTkn != nil {
			return n.WhileTkn
		}
		if n.OpenParenthesisTkn != nil {
			return n.OpenParenthesisTkn
		}
		if n.Cond != nil {
			return GetFirstToken(n.Cond)
		}
		if n.CloseParenthesisTkn != nil {
			return n.CloseParenthesisTkn
		}
		if n.ColonTkn != nil {
			return n.ColonTkn
		}
		if n.Stmt != nil {
			return GetFirstToken(n.Stmt)
		}
		if n.EndWhileTkn != nil {
			return n.EndWhileTkn
		}
		if n.SemiColonTkn != nil {
			return n.SemiColonTkn
		}
	case *YieldExpr:
		if n.YieldTkn != nil {
			return n.YieldTkn
		}
		if n.Key != nil {
			return GetFirstToken(n.Key)
		}
		if n.DoubleArrowTkn != nil {
			return n.DoubleArrowTkn
		}
		if n.Value != nil {
			return GetFirstToken(n.Value)
		}
	case *YieldFromExpr:
		if n.YieldFromTkn != nil {
			return n.YieldFromTkn
		}
		if n.Expr != nil {
			return GetFirstToken(n.Expr)
		}
	default:
		panic(fmt.Sprintf(`unhandled type %T`, n))
	}
	return nil
}
