// Code generated by `gen_equal.go`. DO NOT EDIT.
package astutil

import (
	"fmt"
	"github.com/VKCOM/noverify/src/php/parser/node"
	"github.com/VKCOM/noverify/src/php/parser/node/expr"
	"github.com/VKCOM/noverify/src/php/parser/node/expr/assign"
	"github.com/VKCOM/noverify/src/php/parser/node/expr/binary"
	"github.com/VKCOM/noverify/src/php/parser/node/expr/cast"
	"github.com/VKCOM/noverify/src/php/parser/node/name"
	"github.com/VKCOM/noverify/src/php/parser/node/scalar"
	"github.com/VKCOM/noverify/src/php/parser/node/stmt"
)

func NodeEqual(x, y node.Node) bool {
	if x == nil || y == nil {
		return x == y
	}
	switch x := x.(type) {
	case *assign.Assign:
		y, ok := y.(*assign.Assign)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.BitwiseAnd:
		y, ok := y.(*assign.BitwiseAnd)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.BitwiseOr:
		y, ok := y.(*assign.BitwiseOr)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.BitwiseXor:
		y, ok := y.(*assign.BitwiseXor)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Concat:
		y, ok := y.(*assign.Concat)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Div:
		y, ok := y.(*assign.Div)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Minus:
		y, ok := y.(*assign.Minus)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Mod:
		y, ok := y.(*assign.Mod)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Mul:
		y, ok := y.(*assign.Mul)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Plus:
		y, ok := y.(*assign.Plus)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Pow:
		y, ok := y.(*assign.Pow)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.Reference:
		y, ok := y.(*assign.Reference)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.ShiftLeft:
		y, ok := y.(*assign.ShiftLeft)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *assign.ShiftRight:
		y, ok := y.(*assign.ShiftRight)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expression, y.Expression) {
			return false
		}
		return true
	case *binary.BitwiseAnd:
		y, ok := y.(*binary.BitwiseAnd)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.BitwiseOr:
		y, ok := y.(*binary.BitwiseOr)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.BitwiseXor:
		y, ok := y.(*binary.BitwiseXor)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.BooleanAnd:
		y, ok := y.(*binary.BooleanAnd)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.BooleanOr:
		y, ok := y.(*binary.BooleanOr)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Coalesce:
		y, ok := y.(*binary.Coalesce)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Concat:
		y, ok := y.(*binary.Concat)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Div:
		y, ok := y.(*binary.Div)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Equal:
		y, ok := y.(*binary.Equal)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Greater:
		y, ok := y.(*binary.Greater)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.GreaterOrEqual:
		y, ok := y.(*binary.GreaterOrEqual)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Identical:
		y, ok := y.(*binary.Identical)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.LogicalAnd:
		y, ok := y.(*binary.LogicalAnd)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.LogicalOr:
		y, ok := y.(*binary.LogicalOr)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.LogicalXor:
		y, ok := y.(*binary.LogicalXor)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Minus:
		y, ok := y.(*binary.Minus)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Mod:
		y, ok := y.(*binary.Mod)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Mul:
		y, ok := y.(*binary.Mul)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.NotEqual:
		y, ok := y.(*binary.NotEqual)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.NotIdentical:
		y, ok := y.(*binary.NotIdentical)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Plus:
		y, ok := y.(*binary.Plus)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Pow:
		y, ok := y.(*binary.Pow)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.ShiftLeft:
		y, ok := y.(*binary.ShiftLeft)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.ShiftRight:
		y, ok := y.(*binary.ShiftRight)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Smaller:
		y, ok := y.(*binary.Smaller)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.SmallerOrEqual:
		y, ok := y.(*binary.SmallerOrEqual)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *binary.Spaceship:
		y, ok := y.(*binary.Spaceship)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Left, y.Left) {
			return false
		}
		if !NodeEqual(x.Right, y.Right) {
			return false
		}
		return true
	case *cast.Array:
		y, ok := y.(*cast.Array)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *cast.Bool:
		y, ok := y.(*cast.Bool)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *cast.Double:
		y, ok := y.(*cast.Double)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *cast.Int:
		y, ok := y.(*cast.Int)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *cast.Object:
		y, ok := y.(*cast.Object)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *cast.String:
		y, ok := y.(*cast.String)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *cast.Unset:
		y, ok := y.(*cast.Unset)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.Array:
		y, ok := y.(*expr.Array)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if len(x.Items) != len(y.Items) {
			return false
		}
		for i := range x.Items {
			if !NodeEqual(x.Items[i], y.Items[i]) {
				return false
			}
		}
		if x.ShortSyntax != y.ShortSyntax {
			return false
		}
		return true
	case *expr.ArrayDimFetch:
		y, ok := y.(*expr.ArrayDimFetch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Dim, y.Dim) {
			return false
		}
		return true
	case *expr.ArrayItem:
		y, ok := y.(*expr.ArrayItem)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Key, y.Key) {
			return false
		}
		if !NodeEqual(x.Val, y.Val) {
			return false
		}
		return true
	case *expr.BitwiseNot:
		y, ok := y.(*expr.BitwiseNot)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.BooleanNot:
		y, ok := y.(*expr.BooleanNot)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.ClassConstFetch:
		y, ok := y.(*expr.ClassConstFetch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Class, y.Class) {
			return false
		}
		if !NodeEqual(x.ConstantName, y.ConstantName) {
			return false
		}
		return true
	case *expr.Clone:
		y, ok := y.(*expr.Clone)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.Closure:
		y, ok := y.(*expr.Closure)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.ReturnsRef != y.ReturnsRef {
			return false
		}
		if x.Static != y.Static {
			return false
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeSliceEqual(x.Params, y.Params) {
			return false
		}
		if !NodeEqual(x.ClosureUse, y.ClosureUse) {
			return false
		}
		if !NodeEqual(x.ReturnType, y.ReturnType) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *expr.ClosureUse:
		y, ok := y.(*expr.ClosureUse)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Uses, y.Uses) {
			return false
		}
		return true
	case *expr.ConstFetch:
		y, ok := y.(*expr.ConstFetch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Constant, y.Constant) {
			return false
		}
		return true
	case *expr.Empty:
		y, ok := y.(*expr.Empty)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.ErrorSuppress:
		y, ok := y.(*expr.ErrorSuppress)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.Eval:
		y, ok := y.(*expr.Eval)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.Exit:
		y, ok := y.(*expr.Exit)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Die != y.Die {
			return false
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.FunctionCall:
		y, ok := y.(*expr.FunctionCall)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Function, y.Function) {
			return false
		}
		if !NodeEqual(x.ArgumentList, y.ArgumentList) {
			return false
		}
		return true
	case *expr.Include:
		y, ok := y.(*expr.Include)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.IncludeOnce:
		y, ok := y.(*expr.IncludeOnce)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.InstanceOf:
		y, ok := y.(*expr.InstanceOf)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		if !NodeEqual(x.Class, y.Class) {
			return false
		}
		return true
	case *expr.Isset:
		y, ok := y.(*expr.Isset)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Variables, y.Variables) {
			return false
		}
		return true
	case *expr.List:
		y, ok := y.(*expr.List)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if len(x.Items) != len(y.Items) {
			return false
		}
		for i := range x.Items {
			if !NodeEqual(x.Items[i], y.Items[i]) {
				return false
			}
		}
		if x.ShortSyntax != y.ShortSyntax {
			return false
		}
		return true
	case *expr.MethodCall:
		y, ok := y.(*expr.MethodCall)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Method, y.Method) {
			return false
		}
		if !NodeEqual(x.ArgumentList, y.ArgumentList) {
			return false
		}
		return true
	case *expr.New:
		y, ok := y.(*expr.New)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Class, y.Class) {
			return false
		}
		if !NodeEqual(x.ArgumentList, y.ArgumentList) {
			return false
		}
		return true
	case *expr.PostDec:
		y, ok := y.(*expr.PostDec)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		return true
	case *expr.PostInc:
		y, ok := y.(*expr.PostInc)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		return true
	case *expr.PreDec:
		y, ok := y.(*expr.PreDec)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		return true
	case *expr.PreInc:
		y, ok := y.(*expr.PreInc)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		return true
	case *expr.Print:
		y, ok := y.(*expr.Print)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.PropertyFetch:
		y, ok := y.(*expr.PropertyFetch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Property, y.Property) {
			return false
		}
		return true
	case *expr.Reference:
		y, ok := y.(*expr.Reference)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		return true
	case *expr.Require:
		y, ok := y.(*expr.Require)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.RequireOnce:
		y, ok := y.(*expr.RequireOnce)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.ShellExec:
		y, ok := y.(*expr.ShellExec)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Parts, y.Parts) {
			return false
		}
		return true
	case *expr.StaticCall:
		y, ok := y.(*expr.StaticCall)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Class, y.Class) {
			return false
		}
		if !NodeEqual(x.Call, y.Call) {
			return false
		}
		if !NodeEqual(x.ArgumentList, y.ArgumentList) {
			return false
		}
		return true
	case *expr.StaticPropertyFetch:
		y, ok := y.(*expr.StaticPropertyFetch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Class, y.Class) {
			return false
		}
		if !NodeEqual(x.Property, y.Property) {
			return false
		}
		return true
	case *expr.Ternary:
		y, ok := y.(*expr.Ternary)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Condition, y.Condition) {
			return false
		}
		if !NodeEqual(x.IfTrue, y.IfTrue) {
			return false
		}
		if !NodeEqual(x.IfFalse, y.IfFalse) {
			return false
		}
		return true
	case *expr.UnaryMinus:
		y, ok := y.(*expr.UnaryMinus)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.UnaryPlus:
		y, ok := y.(*expr.UnaryPlus)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *expr.Yield:
		y, ok := y.(*expr.Yield)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Key, y.Key) {
			return false
		}
		if !NodeEqual(x.Value, y.Value) {
			return false
		}
		return true
	case *expr.YieldFrom:
		y, ok := y.(*expr.YieldFrom)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *name.FullyQualified:
		y, ok := y.(*name.FullyQualified)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Parts, y.Parts) {
			return false
		}
		return true
	case *name.Name:
		y, ok := y.(*name.Name)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Parts, y.Parts) {
			return false
		}
		return true
	case *name.NamePart:
		y, ok := y.(*name.NamePart)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *name.Relative:
		y, ok := y.(*name.Relative)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Parts, y.Parts) {
			return false
		}
		return true
	case *node.Argument:
		y, ok := y.(*node.Argument)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Variadic != y.Variadic {
			return false
		}
		if x.IsReference != y.IsReference {
			return false
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *node.ArgumentList:
		y, ok := y.(*node.ArgumentList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if len(x.Arguments) != len(y.Arguments) {
			return false
		}
		for i := range x.Arguments {
			if !NodeEqual(x.Arguments[i], y.Arguments[i]) {
				return false
			}
		}
		return true
	case *node.Identifier:
		y, ok := y.(*node.Identifier)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *node.Nullable:
		y, ok := y.(*node.Nullable)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *node.Parameter:
		y, ok := y.(*node.Parameter)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.ByRef != y.ByRef {
			return false
		}
		if x.Variadic != y.Variadic {
			return false
		}
		if !NodeEqual(x.VariableType, y.VariableType) {
			return false
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.DefaultValue, y.DefaultValue) {
			return false
		}
		return true
	case *node.Root:
		y, ok := y.(*node.Root)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if len(x.Stmts) != len(y.Stmts) {
			return false
		}
		for i := range x.Stmts {
			if !NodeEqual(x.Stmts[i], y.Stmts[i]) {
				return false
			}
		}
		return true
	case *node.SimpleVar:
		y, ok := y.(*node.SimpleVar)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Name != y.Name {
			return false
		}
		return true
	case *node.Var:
		y, ok := y.(*node.Var)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *scalar.Dnumber:
		y, ok := y.(*scalar.Dnumber)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *scalar.Encapsed:
		y, ok := y.(*scalar.Encapsed)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Parts, y.Parts) {
			return false
		}
		return true
	case *scalar.EncapsedStringPart:
		y, ok := y.(*scalar.EncapsedStringPart)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *scalar.Heredoc:
		y, ok := y.(*scalar.Heredoc)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Label != y.Label {
			return false
		}
		if !NodeSliceEqual(x.Parts, y.Parts) {
			return false
		}
		return true
	case *scalar.Lnumber:
		y, ok := y.(*scalar.Lnumber)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *scalar.MagicConstant:
		y, ok := y.(*scalar.MagicConstant)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *scalar.String:
		y, ok := y.(*scalar.String)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *stmt.Break:
		y, ok := y.(*stmt.Break)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.Case:
		y, ok := y.(*stmt.Case)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Cond, y.Cond) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.CaseList:
		y, ok := y.(*stmt.CaseList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Cases, y.Cases) {
			return false
		}
		return true
	case *stmt.Catch:
		y, ok := y.(*stmt.Catch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Types, y.Types) {
			return false
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.Class:
		y, ok := y.(*stmt.Class)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.ClassName, y.ClassName) {
			return false
		}
		if len(x.Modifiers) != len(y.Modifiers) {
			return false
		}
		for i := range x.Modifiers {
			if !NodeEqual(x.Modifiers[i], y.Modifiers[i]) {
				return false
			}
		}
		if !NodeEqual(x.ArgumentList, y.ArgumentList) {
			return false
		}
		if !NodeEqual(x.Extends, y.Extends) {
			return false
		}
		if !NodeEqual(x.Implements, y.Implements) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.ClassConstList:
		y, ok := y.(*stmt.ClassConstList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if len(x.Modifiers) != len(y.Modifiers) {
			return false
		}
		for i := range x.Modifiers {
			if !NodeEqual(x.Modifiers[i], y.Modifiers[i]) {
				return false
			}
		}
		if !NodeSliceEqual(x.Consts, y.Consts) {
			return false
		}
		return true
	case *stmt.ClassExtends:
		y, ok := y.(*stmt.ClassExtends)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.ClassName, y.ClassName) {
			return false
		}
		return true
	case *stmt.ClassImplements:
		y, ok := y.(*stmt.ClassImplements)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.InterfaceNames, y.InterfaceNames) {
			return false
		}
		return true
	case *stmt.ClassMethod:
		y, ok := y.(*stmt.ClassMethod)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.ReturnsRef != y.ReturnsRef {
			return false
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.MethodName, y.MethodName) {
			return false
		}
		if len(x.Modifiers) != len(y.Modifiers) {
			return false
		}
		for i := range x.Modifiers {
			if !NodeEqual(x.Modifiers[i], y.Modifiers[i]) {
				return false
			}
		}
		if !NodeSliceEqual(x.Params, y.Params) {
			return false
		}
		if !NodeEqual(x.ReturnType, y.ReturnType) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		return true
	case *stmt.ConstList:
		y, ok := y.(*stmt.ConstList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Consts, y.Consts) {
			return false
		}
		return true
	case *stmt.Constant:
		y, ok := y.(*stmt.Constant)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.ConstantName, y.ConstantName) {
			return false
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.Continue:
		y, ok := y.(*stmt.Continue)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.Declare:
		y, ok := y.(*stmt.Declare)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Consts, y.Consts) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if x.Alt != y.Alt {
			return false
		}
		return true
	case *stmt.Default:
		y, ok := y.(*stmt.Default)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.Do:
		y, ok := y.(*stmt.Do)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if !NodeEqual(x.Cond, y.Cond) {
			return false
		}
		return true
	case *stmt.Echo:
		y, ok := y.(*stmt.Echo)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Exprs, y.Exprs) {
			return false
		}
		return true
	case *stmt.Else:
		y, ok := y.(*stmt.Else)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	case *stmt.ElseIf:
		y, ok := y.(*stmt.ElseIf)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Cond, y.Cond) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	case *stmt.Expression:
		y, ok := y.(*stmt.Expression)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.Finally:
		y, ok := y.(*stmt.Finally)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.For:
		y, ok := y.(*stmt.For)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Init, y.Init) {
			return false
		}
		if !NodeSliceEqual(x.Cond, y.Cond) {
			return false
		}
		if !NodeSliceEqual(x.Loop, y.Loop) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	case *stmt.Foreach:
		y, ok := y.(*stmt.Foreach)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		if !NodeEqual(x.Key, y.Key) {
			return false
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	case *stmt.Function:
		y, ok := y.(*stmt.Function)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.ReturnsRef != y.ReturnsRef {
			return false
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.FunctionName, y.FunctionName) {
			return false
		}
		if !NodeSliceEqual(x.Params, y.Params) {
			return false
		}
		if !NodeEqual(x.ReturnType, y.ReturnType) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.Global:
		y, ok := y.(*stmt.Global)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Vars, y.Vars) {
			return false
		}
		return true
	case *stmt.Goto:
		y, ok := y.(*stmt.Goto)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Label, y.Label) {
			return false
		}
		return true
	case *stmt.GroupUse:
		y, ok := y.(*stmt.GroupUse)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.UseType, y.UseType) {
			return false
		}
		if !NodeEqual(x.Prefix, y.Prefix) {
			return false
		}
		if !NodeSliceEqual(x.UseList, y.UseList) {
			return false
		}
		return true
	case *stmt.HaltCompiler:
		y, ok := y.(*stmt.HaltCompiler)
		if !ok || x == nil || y == nil {
			return x == y
		}
		return true
	case *stmt.If:
		y, ok := y.(*stmt.If)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Cond, y.Cond) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if !NodeSliceEqual(x.ElseIf, y.ElseIf) {
			return false
		}
		if !NodeEqual(x.Else, y.Else) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	case *stmt.InlineHtml:
		y, ok := y.(*stmt.InlineHtml)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.Value != y.Value {
			return false
		}
		return true
	case *stmt.Interface:
		y, ok := y.(*stmt.Interface)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.InterfaceName, y.InterfaceName) {
			return false
		}
		if !NodeEqual(x.Extends, y.Extends) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.InterfaceExtends:
		y, ok := y.(*stmt.InterfaceExtends)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.InterfaceNames, y.InterfaceNames) {
			return false
		}
		return true
	case *stmt.Label:
		y, ok := y.(*stmt.Label)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.LabelName, y.LabelName) {
			return false
		}
		return true
	case *stmt.Namespace:
		y, ok := y.(*stmt.Namespace)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.NamespaceName, y.NamespaceName) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.Nop:
		y, ok := y.(*stmt.Nop)
		if !ok || x == nil || y == nil {
			return x == y
		}
		return true
	case *stmt.Property:
		y, ok := y.(*stmt.Property)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.PropertyList:
		y, ok := y.(*stmt.PropertyList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if len(x.Modifiers) != len(y.Modifiers) {
			return false
		}
		for i := range x.Modifiers {
			if !NodeEqual(x.Modifiers[i], y.Modifiers[i]) {
				return false
			}
		}
		if !NodeSliceEqual(x.Properties, y.Properties) {
			return false
		}
		return true
	case *stmt.Return:
		y, ok := y.(*stmt.Return)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.Static:
		y, ok := y.(*stmt.Static)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Vars, y.Vars) {
			return false
		}
		return true
	case *stmt.StaticVar:
		y, ok := y.(*stmt.StaticVar)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Variable, y.Variable) {
			return false
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.StmtList:
		y, ok := y.(*stmt.StmtList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.Switch:
		y, ok := y.(*stmt.Switch)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Cond, y.Cond) {
			return false
		}
		if !NodeEqual(x.CaseList, y.CaseList) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	case *stmt.Throw:
		y, ok := y.(*stmt.Throw)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Expr, y.Expr) {
			return false
		}
		return true
	case *stmt.Trait:
		y, ok := y.(*stmt.Trait)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if x.PhpDocComment != y.PhpDocComment {
			return false
		}
		if !NodeEqual(x.TraitName, y.TraitName) {
			return false
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		return true
	case *stmt.TraitAdaptationList:
		y, ok := y.(*stmt.TraitAdaptationList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Adaptations, y.Adaptations) {
			return false
		}
		return true
	case *stmt.TraitMethodRef:
		y, ok := y.(*stmt.TraitMethodRef)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Trait, y.Trait) {
			return false
		}
		if !NodeEqual(x.Method, y.Method) {
			return false
		}
		return true
	case *stmt.TraitUse:
		y, ok := y.(*stmt.TraitUse)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Traits, y.Traits) {
			return false
		}
		if !NodeEqual(x.TraitAdaptationList, y.TraitAdaptationList) {
			return false
		}
		return true
	case *stmt.TraitUseAlias:
		y, ok := y.(*stmt.TraitUseAlias)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Ref, y.Ref) {
			return false
		}
		if !NodeEqual(x.Modifier, y.Modifier) {
			return false
		}
		if !NodeEqual(x.Alias, y.Alias) {
			return false
		}
		return true
	case *stmt.TraitUsePrecedence:
		y, ok := y.(*stmt.TraitUsePrecedence)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Ref, y.Ref) {
			return false
		}
		if !NodeSliceEqual(x.Insteadof, y.Insteadof) {
			return false
		}
		return true
	case *stmt.Try:
		y, ok := y.(*stmt.Try)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Stmts, y.Stmts) {
			return false
		}
		if !NodeSliceEqual(x.Catches, y.Catches) {
			return false
		}
		if !NodeEqual(x.Finally, y.Finally) {
			return false
		}
		return true
	case *stmt.Unset:
		y, ok := y.(*stmt.Unset)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeSliceEqual(x.Vars, y.Vars) {
			return false
		}
		return true
	case *stmt.Use:
		y, ok := y.(*stmt.Use)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.UseType, y.UseType) {
			return false
		}
		if !NodeEqual(x.Use, y.Use) {
			return false
		}
		if !NodeEqual(x.Alias, y.Alias) {
			return false
		}
		return true
	case *stmt.UseList:
		y, ok := y.(*stmt.UseList)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.UseType, y.UseType) {
			return false
		}
		if !NodeSliceEqual(x.Uses, y.Uses) {
			return false
		}
		return true
	case *stmt.While:
		y, ok := y.(*stmt.While)
		if !ok || x == nil || y == nil {
			return x == y
		}
		if !NodeEqual(x.Cond, y.Cond) {
			return false
		}
		if !NodeEqual(x.Stmt, y.Stmt) {
			return false
		}
		if x.AltSyntax != y.AltSyntax {
			return false
		}
		return true
	default:
		panic(fmt.Sprintf(`unhandled type %T`, x))
	}
}
