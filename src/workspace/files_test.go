package workspace

import (
	"testing"
)

func TestFileIsAutoGenerated(t *testing.T) {
	tests := []struct {
		autogen  bool
		contents string
	}{
		{
			autogen: true,
			contents: `<?php
/** file is auto-generated; do not edit! */
`,
		},
		{
			autogen: true,
			contents: `<?php
# THIS FILE IS GENERATED BY PHP_GENERATOR. DO NOT EDIT!
`,
		},
		{
			autogen: true,
			contents: `<?php

// THIS FILE IS GENERATED BY codegen.php
// DON'T EDIT IT MANUALLY
`,
		},
		{
			autogen: true,
			contents: `<?php

// Copyright 2020 The NoVerify Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// AUTOGENERATED, DO NOT EDIT!
`,
		},
		{
			autogen: true,
			contents: `<?php
/**
 * Foo.php
 * Generated by codegen.php, don't modify this file directly!
 */
`,
		},

		{
			autogen:  false,
			contents: ``,
		},

		// Only "autogen" part.
		{
			autogen: false,
			contents: `<?php
// This file is auto-generated, edit it as you need.

class PageStub {
  public function __construct() {}
}
`,
		},
		// Only "don't edit" part.
		{
			autogen: false,
			contents: `<?php
// Do not edit this file if you don't know what you're doing.

function checkRights() { return true; }
`,
		},
		// Both parts, but not inside a comment.
		{
			autogen: false,
			contents: `<?php

$header = "Generated by codegen.php, don't modify this file directly!";

class Foo {}
`,
		},
	}

	for _, test := range tests {
		autogen := FileIsAutoGenerated([]byte(test.contents))
		if autogen != test.autogen {
			t.Errorf("result mismatch: have %v, want %v\ninput: %s",
				autogen, test.autogen, test.contents)
		}
	}
}
