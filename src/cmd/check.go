package cmd

import (
	"fmt"

	"github.com/VKCOM/noverify/src/linter"
)

func Check(ctx *AppContext) (int, error) {
	config := ctx.MainConfig.linter.Config()

	bindConfigValuesWithFlags(ctx, config)

	ruleSets, err := parseExternalRules(ctx.ParsedFlags.rulesList)
	if err != nil {
		return 1, fmt.Errorf("preload external rules: %v", err)
	}

	for _, rset := range ruleSets {
		config.Checkers.DeclareRules(rset)
	}

	ctx.MainConfig.rulesSets = append(ctx.MainConfig.rulesSets, ruleSets...)

	if ctx.ParsedFlags.disableCache {
		config.CacheDir = ""
	}

	if ctx.MainConfig.AfterFlagParse != nil {
		ctx.MainConfig.AfterFlagParse(InitEnvironment{
			RuleSets: ctx.MainConfig.rulesSets,
			MetaInfo: ctx.MainConfig.linter.MetaInfo(),
		})
	}

	return mainNoExit(ctx)
}

func bindConfigValuesWithFlags(ctx *AppContext, config *linter.Config) {
	config.CheckAutoGenerated = ctx.ParsedFlags.checkAutoGenerated
	config.CheckAutoGenerated = ctx.ParsedFlags.debug
	config.DebugParseDuration = ctx.ParsedFlags.debugParseDuration
	config.MaxConcurrency = ctx.ParsedFlags.maxConcurrency
	config.StubsDir = ctx.ParsedFlags.stubsDir
	config.CacheDir = ctx.ParsedFlags.cacheDir
	config.IgnoreTriggerError = ctx.ParsedFlags.ignoreTriggerError
	config.ConservativeBaseline = ctx.ParsedFlags.conservativeBaseline
	config.ApplyQuickFixes = ctx.ParsedFlags.applyQuickFixes
	config.KPHP = ctx.ParsedFlags.kphp
}
