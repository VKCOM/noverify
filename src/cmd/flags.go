package cmd

import (
	"flag"
	"fmt"
	"io"
	"os"
	"regexp"
	"runtime"
	"strings"

	"github.com/VKCOM/noverify/src/linter"
)

const allNonMaybe = "<all-non-maybe>"

var (
	outputFp io.Writer = os.Stderr

	gitRepo string

	pprofHost string

	gitCommitFrom              string
	gitCommitTo                string
	gitRef                     string
	gitPushArg                 string
	gitAuthorsWhitelist        string
	gitWorkTree                string
	gitSkipFetch               bool
	gitDisableCompensateMaster bool
	gitFullDiff                bool
	gitIncludeUntracked        bool

	phpExtensionsArg string

	reportsExclude          string
	reportsExcludeChecks    string
	reportsCritical         string
	reportsExcludeChecksSet = map[string]bool{}
	reportsIncludeChecksSet = map[string]bool{}
	reportsCriticalSet      = map[string]bool{}

	allowChecks       string
	allowDisable      string
	allowDisableRegex *regexp.Regexp

	misspellList string

	unusedVarPattern string

	fullAnalysisFiles string
	indexOnlyFiles    string

	rulesList string

	output     string
	outputJSON bool

	version bool

	cpuProfile string
	memProfile string
)

func bindFlags() {
	var enabledByDefault []string
	declaredChecks := linter.GetDeclaredChecks()
	for _, info := range declaredChecks {
		if info.Default {
			enabledByDefault = append(enabledByDefault, info.Name)
		}
	}

	flag.Usage = func() {
		out := flag.CommandLine.Output()
		fmt.Fprintf(out, "Usage of noverify:\n")
		fmt.Fprintf(out, "  $ noverify -stubs-dir=/path/to/phpstorm-stubs -cache-dir=/cache/dir /project/root\n")
		fmt.Fprintln(out)
		fmt.Fprintf(out, "Flags:\n")
		flag.PrintDefaults()
		fmt.Fprintln(out)
		fmt.Fprintf(out, "Diagnostics (checks):\n")
		for _, info := range declaredChecks {
			extra := " (disabled by default)"
			if info.Default {
				extra = ""
			}
			fmt.Fprintf(out, "  %s%s\n", info.Name, extra)
			fmt.Fprintf(out, "    \t%s\n", info.Comment)
		}
	}

	flag.StringVar(&pprofHost, "pprof", "", "HTTP pprof endpoint (e.g. localhost:8080)")

	flag.StringVar(&reportsCritical, "critical", allNonMaybe,
		"Comma-separated list of check names that are considered critical (all non-maybe checks by default)")

	flag.StringVar(&rulesList, "rules", "",
		"Comma-separated list of rules files")

	flag.StringVar(&gitRepo, "git", "", "Path to git repository to analyze")
	flag.StringVar(&gitCommitFrom, "git-commit-from", "", "Analyze changes between commits <git-commit-from> and <git-commit-to>")
	flag.StringVar(&gitCommitTo, "git-commit-to", "", "")
	flag.StringVar(&gitRef, "git-ref", "", "Ref (e.g. branch) that is being pushed")
	flag.StringVar(&gitPushArg, "git-push-arg", "", "In {pre,post}-receive hooks a whole line from stdin can be passed")
	flag.StringVar(&gitAuthorsWhitelist, "git-author-whitelist", "", "Whitelist (comma-separated) for commit authors, if needed")
	flag.StringVar(&gitWorkTree, "git-work-tree", "", "Work tree. If specified, local changes will also be examined.")
	flag.BoolVar(&gitSkipFetch, "git-skip-fetch", false, "Do not fetch ORIGIN_MASTER (use this option if you already fetch to ORIGIN_MASTER before that)")
	flag.BoolVar(&gitDisableCompensateMaster, "git-disable-compensate-master", false, "Do not try to compensate for changes in ORIGIN_MASTER after branch point")
	flag.BoolVar(&gitFullDiff, "git-full-diff", false, "Compute full diff: analyze all files, not just changed ones")
	flag.BoolVar(&gitIncludeUntracked, "git-include-untracked", true, "Include untracked (new, uncommitted files) into analysis")

	flag.StringVar(&reportsExclude, "exclude", "", "Exclude regexp for filenames in reports list")
	flag.StringVar(&reportsExcludeChecks, "exclude-checks", "", "Comma-separated list of check names to be excluded")
	flag.StringVar(&allowDisable, "allow-disable", "", "Regexp for filenames where '@linter disable' is allowed")
	flag.StringVar(&allowChecks, "allow-checks", strings.Join(enabledByDefault, ","),
		"Comma-separated list of check names to be enabled")
	flag.StringVar(&misspellList, "misspell-list", "Eng",
		"Comma-separated list of misspelling dicts; predefined sets are Eng, Eng/US and Eng/UK")

	flag.StringVar(&phpExtensionsArg, "php-extensions", "php,inc,php5,phtml,inc", "List of PHP extensions to be recognized")

	flag.StringVar(&fullAnalysisFiles, "full-analysis-files", "", "Comma-separated list of files to do full analysis")
	flag.StringVar(&indexOnlyFiles, "index-only-files", "", "Comma-separated list of files to do indexing")

	flag.StringVar(&output, "output", "", "Output reports to a specified file instead of stderr")
	flag.BoolVar(&outputJSON, "output-json", false, "Format output as JSON")

	flag.BoolVar(&linter.CheckAutoGenerated, `check-auto-generated`, false, "whether to lint auto-generated PHP file")
	flag.BoolVar(&linter.Debug, "debug", false, "Enable debug output")
	flag.DurationVar(&linter.DebugParseDuration, "debug-parse-duration", 0, "Print files that took longer than the specified time to analyse")
	flag.IntVar(&linter.MaxFileSize, "max-sum-filesize", 20*1024*1024, "max total file size to be parsed concurrently in bytes (limits max memory consumption)")
	flag.IntVar(&linter.MaxConcurrency, "cores", runtime.NumCPU(), "max cores")
	flag.BoolVar(&linter.LangServer, "lang-server", false, "Run language server for VS Code")
	flag.StringVar(&linter.DefaultEncoding, "encoding", "UTF-8", "Default encoding. Only UTF-8 and windows-1251 are supported")
	flag.StringVar(&linter.StubsDir, "stubs-dir", "", "phpstorm-stubs directory")
	flag.StringVar(&linter.CacheDir, "cache-dir", "", "Directory for linter cache (greatly improves indexing speed)")

	flag.StringVar(&unusedVarPattern, "unused-var-regex", `^_$`,
		"Variables that match such regexp are marked as discarded; not reported as unused, but should not be used as values")

	flag.BoolVar(&version, "version", false, "Show version info and exit")

	flag.StringVar(&cpuProfile, "cpuprofile", "", "write cpu profile to `file`")
	flag.StringVar(&memProfile, "memprofile", "", "write memory profile to `file`")
}
