// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\x4b\x6f\xe3\x36\x10\x80\xef\xfe\x15\x63\x43\xeb\xd8\x5e\xdb\xea\xa2\xb7\x3c\xb7\xed\xa9\xc0\xa2\x01\xb6\xd8\x53\xb1\xb1\x29\x69\x64\x71\x23\x93\x2a\x49\x25\x56\xa3\xfc\xf7\x82\x94\x14\xeb\x69\x4b\x69\x03\xc4\xb0\x87\xe4\x7c\xf3\x22\x87\xd2\xf5\x5d\x14\x44\xa3\x91\xbd\x58\x8c\x60\x01\x9f\x19\xa7\x4c\x46\xe8\x2a\xca\x19\xfc\xf2\xe5\x8b\x11\x86\x94\x29\x14\x90\xfd\x79\x54\x12\x27\xc4\x11\x2c\xec\xe3\x32\x97\xef\xf7\xc8\x14\x7c\xc5\x88\x0b\x05\x0a\x05\x23\x22\x01\x3c\x44\x02\xa5\xa4\x9c\x49\x50\x01\x51\xe0\x12\x06\x0e\x82\xa4\xfb\x28\xa4\x3e\x45\x6f\x6d\x96\x3b\xe8\x73\x81\x00\xd6\x01\xee\xf4\xc7\x25\x58\x89\x19\x20\x7e\x06\xd6\x03\xb9\xd0\x1e\xf9\x31\xcb\xec\xcb\x31\x7f\x66\xda\x92\xd9\x1c\x5e\x46\x00\xc6\x26\xd0\xab\xf7\x24\x71\x10\x5c\x1e\x87\x1e\x08\x8c\x42\xe2\x22\xa8\x00\xdf\xcc\x7b\xa6\x2a\x80\x1f\xb1\x54\x60\xb9\x9c\x79\xf9\x2a\x95\x44\x08\x0e\xe7\x61\x49\x6a\x8f\x20\xfb\x05\x77\xa0\x44\x8c\x70\x09\x3e\x09\x25\x5e\x8d\x4e\x00\x9f\x05\x55\x08\x44\xc2\x76\xa6\xd5\xcd\x8d\x82\x6d\x99\x02\xe3\xff\x97\x53\x84\xa9\x80\xf8\xf4\x50\x0a\x9d\x11\x45\xb1\x40\xb0\x0e\x47\x5a\x29\xe4\x03\x28\x77\x2d\x94\xbb\x82\xa2\xf5\x52\x29\x51\xcd\xac\xc3\xbc\xac\xfe\xb5\xb3\x62\x22\xae\x90\x29\x4a\x42\xe0\x11\x0a\x62\xd2\x1b\x09\x74\xd1\x43\xe6\xa2\xd6\x16\xa3\x6c\x14\xcb\x14\xac\x3d\x91\x8f\x70\x73\x03\x3f\x5d\x81\x6d\xeb\x2f\x01\x91\x10\xd0\x5d\x80\xa2\xac\x40\x05\x84\xc1\xb4\x52\x53\xb3\xa3\x82\xb9\xd1\x50\x2d\xae\xe3\xe2\xa2\xae\x6c\xf8\x83\x2b\xbc\x84\x67\xd4\xd5\xa4\xad\xde\x96\x6c\x18\xdf\xe8\x90\xe8\x00\x91\x86\xe5\x80\x4f\xc8\x32\x15\xd4\x07\xfa\xb6\x0f\x5c\x12\xef\x02\x95\xd5\xe1\x56\x57\x84\x1b\xa0\xfb\x78\x1f\x6d\xf3\xdd\xa2\x7f\x49\x70\xb8\x0a\xb2\xb0\x98\x2a\xb1\x6d\xd0\x53\x25\x98\xaa\x02\x2a\x81\x71\x05\x04\x76\x9c\x7b\xc5\x34\xf0\xb9\x00\x87\xaa\x67\x2a\xf1\x18\xd1\xf9\xda\x2c\xcf\x74\x64\x81\xa7\x6c\x07\x5b\xca\x9e\x48\x48\xbd\x4c\xed\x52\xef\x5a\x74\x15\x7a\xc0\xe2\xbd\x83\x02\x7c\x1e\x33\xcf\xec\x88\x2d\x50\x99\xad\xd6\x48\x63\x63\x80\x61\xe4\xc7\xe1\x12\x1c\x74\x49\x2c\xb3\x0d\x26\x38\x57\xc0\x7d\xf3\x3d\x12\xdc\x09\x71\xaf\xed\x3c\x86\x25\x33\x04\x7e\x2f\x83\x81\x08\x04\x02\x02\x65\x1c\xe6\xab\x89\x5a\xe7\x25\x09\x9f\x9f\x89\x60\xda\xda\x33\x29\xce\xaa\x8f\xb0\x64\x83\x7f\x6f\x1c\xaa\x08\xf3\x2e\x4d\xfa\x00\xac\x8d\x5e\x6c\x6d\x74\xca\x36\x57\x85\x68\xfa\x26\xd7\xa2\xd7\x3a\x6e\xdc\x17\xc7\xda\x78\xe3\x0e\xde\xb8\x93\x77\x33\xc0\xbf\x9f\xdb\x1c\xec\xf4\xf0\x84\x8b\x03\x7c\x6c\x61\x8e\xbb\x98\xe3\x12\x73\x58\x1a\xd3\x7a\x1a\xb9\x68\x64\x31\x2d\xf3\xd2\xff\x92\xc5\xb4\x91\xc5\x0a\x6e\xdc\x81\x7b\x77\x12\xd3\x46\x12\x6b\xee\x75\xfa\xf7\xde\x1c\xa6\xcd\x1c\xd6\x5c\xec\xf4\xf1\x88\xec\x3e\xbd\x89\x94\x74\xc7\xb4\xa4\x77\x9f\xbf\xd1\x1f\x1f\x4d\x57\xa8\x35\xfa\x8f\x37\xb9\xb4\x74\x18\x67\x80\xfb\xe8\x4c\x8b\xaf\xf4\x28\xa3\xa7\xd6\xa3\x8c\xac\xbb\x13\x96\x8c\xea\x4b\x59\xb5\x50\x56\x3d\x28\xab\x41\x94\x45\x0b\x65\xd1\x83\xb2\x18\x44\xb1\x5b\x28\x76\x0f\x8a\x3d\x88\xf2\xa1\x85\xf2\xa1\x07\xe5\xc3\x20\xca\xb4\x85\x32\xed\x41\x99\x0e\xa2\xa4\x2d\x94\xb4\x07\x25\x1d\x44\x79\x68\xa1\x3c\xf4\xa0\x3c\x0c\xa2\x5c\x5f\xb7\x60\x32\xe1\x19\xce\xf5\xf5\x20\xd0\xed\x6d\x0b\x28\x13\x9e\x01\xdd\xde\x0e\x02\xad\x5b\x38\xeb\x1e\x98\xf5\xc0\xbb\x70\x0b\x26\x13\x9e\xe1\x98\x1b\x73\xcf\x5b\xb1\xef\xaf\x9c\x64\xc5\x19\xc2\x9e\x4a\x45\x1e\x1b\xb7\x61\xf2\x97\xcb\x63\xa6\x66\x16\x99\x7f\xaf\x1e\xa9\xa5\x91\xd5\xa7\xef\xd5\x83\x95\xfb\xfe\xaf\xc9\xa7\xc6\xb1\x5a\xb4\x15\x7d\x79\x23\x4e\x98\x80\x7e\x02\x64\x1e\x7a\xa0\x38\xe8\x5b\x9e\xd1\xb8\xfa\x64\xae\xbb\x0c\x28\xf3\xf0\x50\x0a\x00\xd4\xb0\xb0\x02\x0d\x2e\xdc\x2f\x9b\x5a\x8b\xf3\x59\xb0\xa4\xff\x20\xf7\xcf\x91\xb3\x59\xad\xe8\xe3\xd0\xf7\x53\xa1\x97\xb1\x8c\xa8\x4b\x79\xac\xef\xa5\xbb\x38\xeb\x6d\x5c\x78\x28\xaa\x71\x97\x4a\x44\x5c\xce\x2e\xec\x8b\x25\x58\x72\x5e\x89\x7c\x3e\x66\xc9\x25\x5c\xd8\x17\xf3\x5a\x4b\x13\x3b\x79\xaf\xf5\x75\x07\xbf\xc8\xbe\x09\x83\xcb\x85\x40\x57\x41\x40\x12\xa9\x88\xfb\x08\xfa\x9a\xcf\x10\xbd\x10\xeb\x16\xbe\xb9\xab\xfb\x7d\x31\x7f\x93\xcd\x2d\x9a\x7e\x61\xdb\xcb\xc4\x0d\x88\x98\xbc\x2e\xc1\x7a\x99\x2c\x26\xaf\xf3\xab\x62\x98\x9e\x19\x3f\xbd\x3e\x76\xa4\x12\x9b\x3c\xcf\x2f\x13\xa9\xea\x73\x5e\x3b\x12\xdf\xea\x74\xfe\xf4\x6e\x12\xa4\xfd\x96\xb1\xf3\x43\xcb\xbb\x1c\x8f\x04\xee\x36\xf9\xa2\x99\xb5\x59\x82\xf9\x6f\x9a\x31\xdc\x84\x0c\xaf\x84\x9e\x78\x2a\xec\xda\xfb\x7c\x49\x29\xe4\x6d\x36\x75\xc5\xb7\x31\x77\x32\x79\x7f\x00\x3d\x0c\xe9\x9e\xea\xb2\xec\x61\x3f\x1e\xa2\x90\x7b\x39\xb8\xc5\xc0\x5e\xbb\x26\x96\x64\x87\xfa\x31\xae\xf1\x18\x5a\x3b\xb9\xa8\x0f\x33\x8b\xca\x6f\x5f\xbf\xe8\xe6\xfb\x84\x82\xfa\xc9\x1c\xd6\xeb\x75\x65\x2f\x95\x67\x35\xa6\x95\xb6\x55\x4e\xbb\x8f\x64\xe7\xbe\xfa\x26\xd1\x83\x69\xcd\x2e\x2e\x80\x3f\xa1\xc8\x5e\xfc\xe4\x4f\xd1\x72\x09\x11\x8a\x80\x44\x52\x33\xa9\x7c\x3b\x8c\xee\x6a\xf7\x8a\xe9\xf1\xac\x2f\xbd\x3d\x3a\x34\x45\x49\xb9\x07\xb4\x5c\x35\x2a\x26\xa6\xc3\x4c\x4c\xd3\x13\x26\xa6\xe9\xbb\x4c\x4c\xcf\x34\x28\x97\x84\xe1\xe0\xb7\x7c\x94\x6d\x88\x10\x24\x99\x59\x8f\x4b\x30\xdf\x36\x8f\x98\xc8\x99\xa5\x02\x2a\x57\xb7\x1e\x51\x64\x5e\x3d\x48\xdf\x26\x6d\xf0\x40\xa5\x92\x66\x65\x79\x7a\xb5\x06\xb4\x55\x67\x5e\x0a\xfe\x66\x3a\x79\x6e\x61\xa2\x9b\x4b\x0b\x03\x93\x25\x58\x5a\x79\xa9\xbd\x9c\x99\x66\x5e\x7d\x1d\xfd\xd3\x43\x65\x0f\xc9\xdc\x6c\x9f\x7f\x03\x00\x00\xff\xff\xe2\x8d\x2a\x7e\x75\x15\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
