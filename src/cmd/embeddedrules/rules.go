// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x51\x8f\xe2\x36\x10\xc7\xdf\xf9\x14\x7f\x24\x16\x2d\xdc\x2d\xa9\xd4\xb7\x5d\x58\xae\x8f\x95\x4e\x3d\xa9\x7d\x5f\x70\x92\x09\x71\x2f\xd8\xae\xed\x1c\xa0\xe6\xbe\x7b\x65\x1b\x96\x2c\x24\x47\xb2\x3d\x1e\x10\x4c\x32\xf3\x9b\x99\xff\x38\x93\xf9\x52\xe5\x6a\x30\x88\xa6\xd3\x01\xa6\xf8\x24\x24\x17\x46\x51\x62\xb9\x14\xf8\xed\xf3\x67\x6f\x2c\xb8\xb0\xa4\x11\x3e\x29\x37\x2c\x2e\x68\x80\x69\x74\x76\x4b\xe4\x76\x4b\xc2\xe2\x4f\x52\x52\x5b\x58\xd2\x82\xe9\x03\x68\xaf\x34\x19\xc3\xa5\x30\xb0\x39\xb3\x48\x98\x40\x4c\x30\x7c\xab\x0a\x9e\x71\x4a\x67\xde\x3d\xa6\x4c\x6a\x02\x46\x7b\x2c\xdd\xd7\x23\x46\x07\x7f\x81\x65\x01\xec\x2e\x1c\x8d\xd1\x20\x2b\x45\xc8\xef\x88\xf9\x2b\x44\x3b\xdc\x4f\xf0\xef\x00\xf0\x39\xc1\x79\x6f\xd9\x21\x26\x24\xb2\x2c\x52\x68\x52\x05\x4b\x08\x36\xa7\xd7\xf4\x76\xdc\xe6\xf8\xbb\x34\x16\xa3\x44\x8a\xf4\xe8\x65\x0f\x8a\x10\x4b\x59\xd4\xac\xd1\x00\xe1\x1f\x96\xb0\xba\x24\x3c\x22\x63\x85\xa1\xa7\xc1\x0f\x80\x3b\xcd\x2d\x81\x19\xac\xef\x5d\xb8\x89\x0f\xb0\xae\x53\x30\xfc\xb9\x9c\x53\x9b\x4e\x90\x8c\xef\x6b\xad\xf3\x26\x55\x6a\xc2\x68\x7f\xa6\xd5\x5a\xde\x83\xb2\x6c\xa0\x2c\x4f\x14\x17\x97\x1b\x43\xf6\x7e\xb4\x9f\xd4\xc3\x7f\x6f\x9d\x18\x25\x2d\x09\xcb\x59\x01\xa9\x48\x33\x2f\xaf\xd2\x94\x50\x4a\x22\x21\x17\xad\x24\x73\x35\x2c\x63\x8c\xb6\xcc\x7c\xc5\x62\x81\x5f\x9e\x10\x45\xee\x47\xce\x0c\x72\xbe\xc9\x49\xd7\x03\xd8\x9c\x09\x8c\xdf\xcc\xd4\xfd\x39\xc0\xc4\x47\x78\x3b\x5c\x67\xe7\xd3\x5c\x45\xf8\x43\x5a\x7a\xc4\x8e\xdc\x34\xb9\xac\xd7\xb5\x1c\x86\x0b\xd7\x12\xd7\x20\x76\x95\x39\xe8\x1b\x89\x10\x82\x67\xe0\xaf\xe7\x20\x61\xe5\x26\xb7\x61\x0e\xd7\x6e\x22\x92\x9c\x92\xaf\x5f\xd4\xfa\x78\x5a\xdc\x3f\x83\x58\xda\x3c\xb4\xc5\x4f\x49\x14\xc1\xdd\x6a\xe0\xa7\x0a\xdc\x40\x48\x0b\x86\x8d\x94\xe9\xe9\x36\x64\x52\x23\xe6\x76\xc7\x0d\x9d\x3b\x3a\x99\x79\xf7\x10\x23\x34\x9e\x8b\x0d\xd6\x5c\x7c\x63\x05\x4f\x43\xd8\x8f\xee\xd4\x52\x62\x29\x85\x28\xb7\x31\x69\x64\xb2\x14\xa9\x3f\x11\x6b\x70\x13\xbc\x1d\xd2\xe7\x98\x53\xa1\xb2\xb2\xf8\x88\x98\x12\x56\x9a\x70\xc0\xb4\x94\x16\x32\xf3\xbf\x95\x96\x71\x41\x5b\x97\xe7\xb9\x2d\x21\x11\xfc\x5e\x07\x83\x69\x02\x83\x26\x53\x16\x47\x6f\x66\x67\xc7\x91\xc4\xa7\x1d\xd3\xc2\x65\x7b\x43\xe2\x30\x7d\x4c\x1c\x56\xf4\xcf\x2a\xe6\x96\x89\xf4\xd1\xcb\x07\x8c\x56\xce\x79\xb4\x72\x92\xad\x9e\x4e\xa6\xf1\xab\xdd\x99\xbe\x5f\xe2\x86\x5d\x71\xa2\x89\x37\x6c\xe1\x0d\x5b\x79\x8b\x1e\xf5\xfd\xda\x54\x60\x6b\x85\x3f\x28\xb1\x47\x8d\x0d\xcc\x61\x1b\x73\x58\x63\xf6\x93\xb1\xba\x94\x51\xea\x2b\x15\xab\x3a\xaf\xfa\x3f\x2a\x56\x57\x2a\xbe\xc1\x0d\x5b\x70\xef\x16\xb1\xba\x12\xf1\xa2\xbc\xd6\xfa\xde\xab\x61\x75\xad\xe1\x45\x89\xad\x35\x9e\x91\xed\x4f\x6f\x66\x0c\xdf\x08\x67\xe9\xbc\xe7\x17\xee\xeb\x83\xdf\x0a\x17\x8b\xfe\xc3\xe2\x68\xad\x3d\x8c\x03\xe0\x8b\xba\xb1\xe2\xdf\xec\x28\x1f\xe7\x62\x47\x79\x5b\xfb\x26\xac\x25\xd5\x95\xf2\xd0\x40\x79\xe8\x40\x79\xe8\x45\x99\x36\x50\xa6\x1d\x28\xd3\x5e\x94\xa8\x81\x12\x75\xa0\x44\xbd\x28\x77\x0d\x94\xbb\x0e\x94\xbb\x5e\x94\x71\x03\x65\xdc\x81\x32\xee\x45\xa9\x1a\x28\x55\x07\x4a\xd5\x8b\xf2\xd2\x40\x79\xe9\x40\x79\xe9\x45\x99\xcf\x1b\x30\xc1\x78\x83\x33\x9f\xf7\x02\x3d\x3f\x37\x80\x82\xf1\x06\xe8\xf9\xb9\x17\x68\xd6\xc0\x99\x75\xc0\xcc\x7a\xbe\x0b\x37\x60\x82\xf1\x06\xc7\xbf\x31\xbb\xb7\xe2\xff\x02\x00\x00\xff\xff\xc6\x5e\x48\xe2\x85\x0d\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
