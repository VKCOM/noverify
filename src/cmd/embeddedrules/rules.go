// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\xdf\x73\xe2\x36\x10\xc7\xdf\xf9\x2b\xbe\xcc\x10\x06\xb8\x03\x37\xd3\xb7\x04\xc2\xb5\x6f\x9d\xb9\xe9\xcd\xb4\x8f\x9d\x04\x64\x7b\x8d\xd5\x18\xc9\x95\xe4\x03\x5a\xee\x7f\xef\x48\x82\x60\xc0\x3e\xec\xb4\x79\x60\xec\x95\x77\x3f\xfb\x4b\x5a\x65\x3a\xcf\xd3\xbc\xd3\x09\x46\xa3\x0e\x46\xf8\x24\x24\x17\x3a\xa7\xc8\x70\x29\xf0\xd3\xe7\xcf\x4e\x98\x71\x61\x48\xc1\xff\xc5\x5c\xb3\x30\xa3\x0e\x46\xc1\x49\x2d\x92\xeb\x35\x09\x83\xdf\x28\x97\xca\xc0\x90\x12\x4c\xed\x40\xdb\x5c\x91\xd6\x5c\x0a\x0d\x93\x32\x83\x88\x09\x84\x04\xcd\xd7\x79\xc6\x13\x4e\xf1\xc4\xa9\x87\x94\x48\x45\x40\x6f\x8b\xb9\xfd\x79\x40\x6f\xe7\x16\x58\xe2\xc1\x76\xe1\x20\x0c\x3a\x49\x21\xbc\x7f\x07\xcc\xef\xde\xda\x6e\x30\xc4\x3f\x1d\xc0\xf9\x04\xab\xbd\x66\xbb\x90\x10\xc9\x22\x8b\xa1\x28\xcf\x58\x44\x30\x29\xbd\xb9\xb7\xe1\x26\xc5\x9f\x85\x36\xe8\x45\x52\xc4\x07\x2d\xb3\xcb\x09\xa1\x94\x59\x49\x1a\x74\xe0\xdf\x30\x87\x51\x05\xe1\x01\x09\xcb\x34\x3d\x76\xbe\x03\xdc\x28\x6e\x08\x4c\x63\x39\xb0\xe6\x86\xce\xc0\xb2\x4c\x41\xf7\xff\xe5\x1c\xd3\x74\x84\x24\x7c\x5b\x4a\x9d\x13\xe5\x85\x22\xf4\xb6\x27\x5a\x29\xe5\x2d\x28\xf3\x0a\xca\xfc\x48\xb1\x76\xb9\xd6\x64\x06\xbd\xed\xb0\x6c\xfe\x5b\x6d\xc7\xe4\xd2\x90\x30\x9c\x65\x90\x39\x29\xe6\xca\x9b\x2b\x8a\x28\x26\x11\x91\xb5\x56\x90\xbe\x6a\x96\x3e\x7a\x6b\xa6\x5f\x31\x9b\xe1\x87\x47\x04\x81\x7d\x48\x99\x46\xca\x57\x29\xa9\xb2\x01\x93\x32\x81\xfe\x59\x4f\x0d\x4e\x06\x86\xce\xc2\x79\x73\x9d\x94\x8f\x7d\x15\xe0\x57\x69\xe8\x01\x1b\xb2\xdd\x64\xbd\x5e\x96\x7c\xe8\xce\x6c\x4a\x6c\x82\xd8\x95\xe7\xa0\xaf\x24\xbc\x09\x9e\x80\xbf\xed\x83\x88\x15\xab\xd4\xf8\x3e\x5c\xda\x8e\x88\x52\x8a\x5e\xbf\xe4\xcb\xc3\x6e\xb1\x6f\x1a\xa1\x34\xa9\x4f\x8b\xeb\x92\x20\x80\xfd\x54\xc3\x75\x15\xb8\x86\x90\x06\x0c\x2b\x29\xe3\xe3\x67\x48\xa4\x42\xc8\xcd\x86\x6b\x3a\x65\x74\x38\x71\xea\xde\x86\x4f\x3c\x17\x2b\x2c\xb9\xf8\xca\x32\x1e\x7b\xb3\x1f\xed\xae\xa5\xc8\x50\x0c\x51\xac\x43\x52\x48\x64\x21\x62\xb7\x23\x96\xe0\xda\x6b\x5b\xa4\xf3\x31\xa5\x2c\x4f\x8a\xec\x23\x42\x8a\x58\xa1\xfd\x06\x53\x52\x1a\xc8\xc4\x3d\xe7\x4a\x86\x19\xad\xad\x9f\xa7\xb4\x78\x47\xf0\x4b\x19\x0c\xa6\x08\x0c\x8a\x74\x91\x1d\xb4\x99\x99\x1c\x5a\x12\x9f\x36\x4c\x09\xeb\xed\x8d\x12\xfb\xee\x63\x62\xb7\xa0\xbf\x16\x21\x37\x4c\xc4\x0f\xae\x7c\x40\x6f\x61\x95\x7b\x0b\x5b\xb2\xc5\xe3\x51\xd4\x7f\x93\x5b\xd1\xb7\x4b\x5c\xb7\x29\x4e\x54\xf1\xba\x35\xbc\x6e\x2d\x6f\xd6\x22\xbe\x1f\xab\x02\xac\x8d\xf0\x3b\x21\xb6\x88\xb1\x82\xd9\xad\x63\x76\x4b\xcc\x76\x65\xdc\x5f\x96\x51\xaa\xab\x2a\xee\xcb\xbc\xfd\x7f\xa9\xe2\xfe\xaa\x8a\x67\xb8\x6e\x0d\xee\xdd\x45\xdc\x5f\x15\xf1\x22\xbc\xda\xf8\xde\x5b\xc3\xfd\x75\x0d\x2f\x42\xac\x8d\xf1\x84\xac\x3f\xbd\x99\xd6\x7c\x25\xac\xa4\xf1\x9c\x9f\xd9\x9f\x0f\x6e\x2a\x5c\x0c\xfa\x0f\xb3\x83\xb4\x74\x18\x7b\xc0\x97\xfc\xc6\x88\x3f\x9b\x51\xce\xce\xc5\x8c\x72\xb2\xfa\x49\x58\x72\xaa\x29\x65\x5c\x41\x19\x37\xa0\x8c\x5b\x51\x46\x15\x94\x51\x03\xca\xa8\x15\x25\xa8\xa0\x04\x0d\x28\x41\x2b\xca\x5d\x05\xe5\xae\x01\xe5\xae\x15\xa5\x5f\x41\xe9\x37\xa0\xf4\x5b\x51\xf6\x15\x94\x7d\x03\xca\xbe\x15\xe5\xa5\x82\xf2\xd2\x80\xf2\xd2\x8a\x32\x9d\x56\x60\xbc\xf0\x06\x67\x3a\x6d\x05\x7a\x7a\xaa\x00\x79\xe1\x0d\xd0\xd3\x53\x2b\xd0\xa4\x82\x33\x69\x80\x99\xb4\xbc\x0b\x57\x60\xbc\xf0\x06\xc7\xdd\x98\x1b\xde\x8a\x93\x64\x1c\xee\xc6\x52\x10\xd6\x5c\x1b\xf6\x7a\x75\x1b\x66\x7f\x44\xb2\x10\x66\xd0\x63\xc3\xe7\xf3\x23\xb5\xb4\x32\xbe\x7f\x3e\x3f\x58\x65\x92\xfc\xbc\xbb\xbf\x3a\x56\x8f\x63\xc5\x5e\xde\x58\x98\xed\x60\xff\x03\x14\x31\xc5\x30\x12\xf6\x96\xe7\x2c\x8e\xef\xdd\x75\x57\x80\x8b\x98\xb6\xa5\x04\xe0\x02\x8b\x31\x2c\xf8\x18\x7e\xd9\xd5\x8b\x3c\xdf\x04\x6b\xfe\x37\xc9\xe4\x16\xd9\x7f\x55\x89\x3e\x2d\x3d\xdb\xd4\xff\x1b\x00\x00\xff\xff\xfa\x48\x39\x30\x00\x0f\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
