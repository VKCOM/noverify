// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xdb\x6e\xe3\x36\x13\xc7\xef\xfd\x14\x63\x43\xeb\xd8\x5e\xdb\xfa\x16\xdf\x5d\x8e\xdb\xde\x15\x58\x34\xc0\x16\x7b\x55\x24\x36\x25\x8d\x2c\x6e\x24\x52\x25\xa9\xc4\x6a\x94\x77\x2f\x48\x49\xb1\xac\x83\x2d\xa5\x0d\x10\xc3\x1a\x91\xf3\xfb\xcf\x0c\x8f\xbe\xbe\x8b\x83\x78\x34\xb2\x17\x8b\x11\x2c\xe0\x2b\xe3\x94\xc9\x18\x5d\x45\x39\x83\x5f\xbe\x7d\x33\xc6\x90\x32\x85\x02\xf2\x3f\x8f\x4a\xe2\x84\x38\x82\x85\x7d\xe8\xe6\xf2\x28\x42\xa6\xe0\x3b\xc6\x5c\x28\x50\x28\x18\x11\x29\xe0\x3e\x16\x28\x25\xe5\x4c\x82\x0a\x88\x02\x97\x30\x70\x10\x24\x8d\xe2\x90\xfa\x14\xbd\xb5\xe9\xee\xa0\xcf\x05\x02\x58\x7b\xb8\xd3\x1f\x97\x60\xa5\xe6\x05\xf1\x73\xb0\x7e\x51\x18\xed\x91\x9f\xb0\x5c\x5f\x81\xf9\x23\xf7\x96\xce\xe6\xf0\x3a\x02\x30\x9a\x40\xf7\x8e\x48\xea\x20\xb8\x3c\x09\x3d\x10\x18\x87\xc4\x45\x50\x01\xbe\xcb\x7b\xa1\x2a\x80\x9f\x89\x54\x60\xb9\x9c\x79\x45\x2f\x95\xc6\x08\x0e\xe7\x61\xc5\x6a\x8f\x20\x7f\x82\x3b\x50\x22\x41\xb8\x04\x9f\x84\x12\xaf\x46\x27\x80\x2f\x82\x2a\x04\x22\x61\x3b\xd3\xee\xe6\xc6\xc1\xb6\x4a\x81\xf1\x7f\xcb\x29\xd3\x54\x42\x7c\xba\xaf\xa4\xce\x98\xe2\x44\x20\x58\xfb\x03\xad\x92\xf2\x01\x94\xbb\x16\xca\x5d\x49\xd1\x7e\xa9\x94\xa8\x66\xd6\x7e\x5e\x75\xff\xd6\x39\x62\x62\xae\x90\x29\x4a\x42\xe0\x31\x0a\x62\xca\x1b\x0b\x74\xd1\x43\xe6\xa2\xf6\x96\xa0\x6c\x0c\x96\x29\x58\x11\x91\x4f\x70\x73\x03\xff\xbb\x02\xdb\xd6\x5f\x02\x22\x21\xa0\xbb\x00\x45\xd5\x81\x0a\x08\x83\xe9\xd1\x98\x9a\x1d\x1c\xcc\x8d\x87\xe3\xc1\x75\xe8\x5c\x8e\x2b\x1b\x7e\xe7\x0a\x2f\xe1\x05\xf5\x68\xd2\xaa\xb7\x15\x0d\xe3\x1b\x9d\x12\x9d\x20\xd2\x50\x0e\xf8\x8c\x2c\x77\x41\x7d\xa0\xef\xf3\xc0\x25\xc9\x2e\x50\xf9\x38\xdc\xea\x11\xe1\x06\xe8\x3e\xdd\xc7\xdb\x62\xb6\xe8\x27\x09\x0e\x57\x41\x9e\x16\x33\x4a\x6c\x1b\x74\x53\x09\x66\x54\x01\x95\xc0\xb8\x02\x02\x3b\xce\xbd\xb2\x19\xf8\x5c\x80\x43\xd5\x0b\x95\x78\xc8\xe8\x7c\x6d\xba\xe7\x3e\xf2\xc4\x53\xb6\x83\x2d\x65\xcf\x24\xa4\x5e\xee\x76\xa9\x67\x2d\xba\x0a\x3d\x60\x49\xe4\xa0\x00\x9f\x27\xcc\x33\x33\x62\x0b\x54\xe6\xbd\x35\xd2\x68\x0c\x30\x8c\xfd\x24\x5c\x82\x83\x2e\x49\x64\x3e\xc1\x04\xe7\x0a\xb8\x6f\xbe\xc7\x82\x3b\x21\x46\x5a\xe7\x21\x2d\xb9\x10\xf8\xad\x0a\x06\x22\x10\x08\x08\x94\x49\x58\xf4\x26\x6a\x5d\x0c\x49\xf8\xfa\x42\x04\xd3\x6a\xcf\x94\x38\x1f\x7d\x84\xa5\x1b\xfc\x6b\xe3\x50\x45\x98\x77\x69\xca\x07\x60\x6d\x74\x67\x6b\xa3\x4b\xb6\xb9\x2a\x4d\xd3\x77\xbb\x36\xbd\xd5\x71\xe3\xbe\x38\xd6\xc6\x1b\x77\xf0\xc6\x9d\xbc\x9b\x01\xf1\xfd\xbf\x2d\xc0\xce\x08\x4f\x84\x38\x20\xc6\x16\xe6\xb8\x8b\x39\xae\x30\x87\x95\x31\xab\x97\x91\x8b\x46\x15\xb3\x2a\x2f\xfb\x37\x55\xcc\x1a\x55\x3c\xc2\x8d\x3b\x70\x1f\x2e\x62\xd6\x28\x62\x2d\xbc\xce\xf8\x3e\x5a\xc3\xac\x59\xc3\x5a\x88\x9d\x31\x1e\x90\xdd\xab\x37\x91\x92\xee\x98\xb6\xf4\xde\xe7\x6f\xf4\xc7\x67\xb3\x2b\xd4\x36\xfa\xcf\x37\x85\xb5\xb2\x18\xe7\x80\xfb\xf8\xcc\x16\x7f\xb4\x47\x19\x3f\xb5\x3d\xca\xd8\xba\x77\xc2\x8a\xa8\xbe\x94\x55\x0b\x65\xd5\x83\xb2\x1a\x44\x59\xb4\x50\x16\x3d\x28\x8b\x41\x14\xbb\x85\x62\xf7\xa0\xd8\x83\x28\x9f\x5a\x28\x9f\x7a\x50\x3e\x0d\xa2\x4c\x5b\x28\xd3\x1e\x94\xe9\x20\x4a\xd6\x42\xc9\x7a\x50\xb2\x41\x94\xc7\x16\xca\x63\x0f\xca\xe3\x20\xca\xf5\x75\x0b\x26\x37\x9e\xe1\x5c\x5f\x0f\x02\xdd\xde\xb6\x80\x72\xe3\x19\xd0\xed\xed\x20\xd0\xba\x85\xb3\xee\x81\x59\x0f\x3c\x0b\xb7\x60\x72\xe3\x19\x8e\x39\x31\xf7\x3c\x15\xfb\xfe\xca\x49\x57\x9c\x21\x44\x54\x2a\xf2\xd4\x38\x0d\x93\x3f\x5d\x9e\x30\x35\xb3\xc8\xfc\xe1\x78\x49\xad\xbc\x59\x7d\x79\x38\x5e\x58\xb9\xef\xff\x9a\x7e\x69\x2c\xab\xe5\xb6\xa2\x0f\x6f\xc4\x09\x53\xd0\x37\x40\xe6\xa1\x07\x8a\x83\x3e\xe5\x19\x8f\xab\x2f\xe6\xb8\xcb\x80\x32\x0f\xf7\x95\x04\x40\x0d\x0b\x2b\xd0\xe0\x32\xfc\xaa\xd4\x5a\x9e\xcf\x82\x25\xfd\x1b\xb9\x7f\x8e\x9c\xb7\x6a\x45\x1f\x5e\x3d\x9c\x4a\xbd\x4c\x64\x4c\x5d\xca\x13\x7d\x2e\xdd\x25\xf9\xde\xc6\x85\x87\xe2\x38\xef\x52\x89\x98\xcb\xd9\x85\x7d\xb1\x04\x4b\xce\x8f\x32\x5f\xbc\xb3\xe4\x12\x2e\xec\x8b\x79\x6d\x4b\x13\x3b\x79\xaf\xfd\x75\x27\xbf\xac\xbe\x49\x83\xcb\x85\x40\x57\x41\x40\x52\xa9\x88\xfb\x04\xfa\x98\xcf\x10\xbd\x10\xeb\x0a\xdf\xc3\xd5\xfb\x7d\xd9\x7e\x93\xb7\x2d\x37\xfd\x52\xdb\xeb\xc4\x0d\x88\x98\xbc\x2d\xc1\x7a\x9d\x2c\x26\x6f\xf3\xab\xf2\x35\x3d\xf3\xfe\x74\xff\xc4\x91\x4a\x6c\x8a\x3a\xbf\x4e\xa4\xaa\xb7\x79\xeb\x28\x7c\x6b\xd0\xc5\xed\xdd\x14\x48\xc7\x2d\x13\xe7\xa7\xb6\x77\x05\x1e\x0b\xdc\x6d\x8a\x4e\x33\x6b\xb3\x04\xf3\xdf\x94\x31\x5c\x42\x8e\x57\x42\x37\x3c\x95\x76\x1d\x7d\xd1\xa5\x92\xf2\x36\x4d\x5d\xf9\x6d\xb4\x9d\x4c\x3e\x9e\x40\x0f\x43\x1a\x51\x3d\x2c\x7b\xe8\xc7\x7d\x1c\x72\xaf\x00\xb7\x08\xec\x35\x6b\x12\x49\x76\xa8\xaf\x71\x8d\x6b\x68\x6d\xe5\xa2\x3e\xcc\x2c\x2a\x7f\x7c\xff\xa6\x37\xdf\x67\x14\xd4\x4f\xe7\xb0\x5e\xaf\x8f\xe6\x52\xb5\x55\xa3\x59\x65\x5a\x15\xb4\xfb\x58\x76\xce\xab\x1f\x12\x3d\x98\xd6\x74\x71\x01\xfc\x19\x45\xfe\xc3\x4f\x71\x8b\x96\x4b\x88\x51\x04\x24\x96\x9a\x49\xe5\xfb\x62\x74\x57\x3b\x57\x4c\x0f\x6b\x7d\xe5\xd7\xa3\x7d\xd3\x94\x56\xf7\x80\x96\xa3\xc6\x91\xc4\x6c\x98\xc4\x2c\x3b\x21\x31\xcb\x3e\x24\xb1\xf3\x9c\x62\x04\x36\xe5\x31\x90\x3c\x42\x15\xe8\x18\xcc\x45\x20\x22\xa9\xf9\xad\xc0\xd1\x57\x7b\x96\x44\x28\xa8\x6b\xae\xfb\x55\xf0\x78\x46\x99\xca\xfc\x90\x13\x35\xaf\x69\x3a\x7e\x95\x56\xa7\xd8\xfb\xf5\xa5\xcc\x64\xf1\x90\x55\x1f\x1e\x8b\x07\x7d\x7b\xf9\x27\x00\x00\xff\xff\x61\x31\xe5\x35\xeb\x14\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
