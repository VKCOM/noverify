// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x51\x6f\xe2\x46\x14\x85\xdf\xf9\x15\x27\x2a\x41\x40\x36\xb8\xea\x43\x2b\x25\x10\xb6\x52\x1f\xb6\x52\xd4\x48\x9b\x3e\x27\x8c\xed\x6b\x3c\x5d\x33\x63\xcd\x8c\x17\x50\xe9\x7f\xaf\x66\xc6\x60\x87\x98\x60\xa3\xe5\x01\xc1\xc5\x73\xbe\xcb\x99\x73\x19\x33\x9d\xe7\x69\xde\xeb\x05\xe3\x71\x0f\x63\x7c\x16\x92\x0b\x9d\x53\x64\xb8\x14\xf8\xfd\xf1\xd1\x15\x33\x2e\x0c\x29\xf8\x47\xcc\x35\x0b\x33\xea\x61\x1c\x54\xcb\x22\xb9\x5a\x91\x30\xf8\x4a\xb9\x54\x06\x86\x94\x60\x6a\x0b\xda\xe4\x8a\xb4\xe6\x52\x68\x98\x94\x19\x44\x4c\x20\x24\x68\xbe\xca\x33\x9e\x70\x8a\x27\x6e\x79\x48\x89\x54\x04\xf4\x37\x98\xdb\xa7\x3b\xf4\xb7\xee\x03\x96\x78\xb0\xfd\xa0\x2c\x06\xbd\xa4\x10\xbe\xbf\x12\xf3\xec\xd5\xb6\xc3\x11\xfe\xed\x01\xae\x27\xd8\xd5\x2b\xb6\x0d\x09\x91\x2c\xb2\x18\x8a\xf2\x8c\x45\x04\x93\xd2\xa1\xbd\x35\x37\x29\xfe\x29\xb4\x41\x3f\x92\x22\x2e\x57\x99\x6d\x4e\x08\xa5\xcc\x6a\xd5\xa0\x07\xff\x0e\x73\x18\x55\x10\xee\x90\xb0\x4c\xd3\x7d\xef\x03\xe0\x5a\x71\x43\x60\x1a\x8b\xa1\x95\x1b\x39\x81\x45\x9d\x82\xab\x1f\xcb\xd9\xdb\xb4\x87\x24\x7c\x53\xb3\xce\x95\xf2\x42\x11\xfa\x9b\x8a\x56\xb3\xbc\x03\x65\xde\x40\x99\xef\x29\x56\x97\x6b\x4d\x66\xd8\xdf\x8c\xea\xf2\xff\x9d\x4c\x4c\x2e\x0d\x09\xc3\x59\x06\x99\x93\x62\x6e\x7b\x73\x45\x11\xc5\x24\x22\xb2\x6a\x05\xe9\x77\x61\x19\xa0\xbf\x62\xfa\x1b\x66\x33\xfc\x7c\x8f\x20\xb0\x2f\x52\xa6\x91\xf2\x65\x4a\xaa\x2e\x60\x52\x26\x30\x78\x93\xa9\x61\x25\x30\x72\x0a\x6f\xc3\x55\x2d\xde\xe7\x2a\xc0\xdf\x4f\x7f\x3c\xdd\x61\x45\x6a\x49\xf8\xfa\xe5\xf9\xe6\xf1\xcb\x33\x54\x91\x91\xc6\x3a\x25\x81\x9f\x7e\xf9\xed\x57\x70\x8d\x98\x22\x1e\xdb\x6c\xfb\x55\x7f\x49\x43\x77\x58\x93\xcd\xa0\xfd\xae\x8b\x5a\xe7\x57\x33\x6b\xa4\xb5\x95\xbd\xfb\xbe\xa0\xef\x24\xbc\x04\x4f\xc0\x0f\xd3\x13\xb1\x62\x99\x1a\x9f\xde\x85\xcd\x51\x94\x52\xf4\xed\x29\x5f\x94\x33\x66\xdf\x69\x84\xd2\xa4\xde\x4c\x97\xad\x20\x80\xbd\x54\xc3\x65\xd1\x76\x29\xa4\x01\xc3\x52\xca\x78\x7f\x19\x12\xa9\x10\x72\xb3\xe6\x9a\xaa\x7d\x18\x4d\xdc\x72\xaf\xe1\xb7\x8b\x8b\x25\x16\x5c\x7c\x67\x19\x8f\xbd\xec\x27\x3b\xeb\x14\x19\x8a\x21\x8a\x55\x48\x0a\x89\x2c\x44\xec\xe6\x68\x01\xae\xfd\x6a\x8b\x74\x3d\xa6\x94\xe5\x49\x91\x7d\x42\x48\x11\x2b\xb4\x1f\x4b\x25\xa5\x81\x4c\xdc\xeb\x5c\xc9\x30\xa3\x95\xed\xb3\xb2\xc5\x37\x82\x3f\xeb\x60\x30\x45\x60\x50\xa4\x8b\xac\x5c\xcd\xcc\xde\xf9\xc3\xfe\x4c\xca\x64\xe3\xf3\x9a\x29\x61\xdb\x3f\x93\x94\x72\x38\x5e\xed\x75\xfd\x57\xbb\x5d\xaf\xf7\xc7\x12\x57\x2d\x25\xae\x4e\x4b\xcc\xda\xb7\xf1\x51\x1f\xad\x1b\xa9\x89\x74\x33\x64\x77\x64\xc8\xae\xbb\x21\xbb\x23\x43\x1a\x25\xce\x18\xb2\x3b\x36\xe4\x44\x1f\xad\x1b\xa9\x89\x94\x01\x3f\x8c\xf4\x50\xa7\xee\xa7\x2f\x24\x3f\xf1\xb1\x9f\xb8\x6a\xe6\xb9\x40\x52\x98\x42\xd1\xe8\xf2\x78\x0d\x0e\x96\x5e\x1c\xaf\xc1\xc1\xd2\xcb\xe3\x35\xa8\x2c\xbd\x3c\x5e\x83\xca\xd2\xcb\xe3\xb5\xbb\xd4\x90\x23\x89\x8b\x0c\x79\xd7\xc6\x25\x86\xbc\x6b\xc4\x8b\x9c\x3e\xfb\x98\xd6\x7c\x29\x6c\xa5\xf5\x5d\xd2\xcc\x3e\xdd\xb8\x33\xf5\xe8\x36\xe9\x66\x56\x56\x6b\x47\x99\x07\x3c\xe5\x67\x6e\x90\xde\x9c\xf0\x4e\xe7\xe8\x84\x77\xb5\xd3\xf7\x11\xb5\xa6\xda\x52\x6e\x1b\x28\xb7\x2d\x28\xb7\x9d\x28\xe3\x06\xca\xb8\x05\x65\xdc\x89\x12\x34\x50\x82\x16\x94\xa0\x13\xe5\xba\x81\x72\xdd\x82\x72\xdd\x89\x32\x68\xa0\x0c\x5a\x50\x06\x9d\x28\xbb\x06\xca\xae\x05\x65\xd7\x89\xf2\xd2\x40\x79\x69\x41\x79\xe9\x44\x99\x4e\x1b\x30\xbe\x78\x86\x33\x9d\x76\x02\x3d\x3c\x34\x80\x7c\xf1\x0c\xe8\xe1\xa1\x13\x68\xd2\xc0\x99\xb4\xc0\x4c\x3a\xfe\x93\x68\xc0\xf8\xe2\x19\x8e\xfb\xbf\x61\x7f\x57\xff\x0f\x00\x00\xff\xff\x85\xdf\x35\xd5\xc3\x0e\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
