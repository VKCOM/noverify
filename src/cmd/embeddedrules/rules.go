// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x51\x6f\xe2\x46\x14\x85\xdf\xfd\x2b\x4e\x54\x62\x01\xbb\xc1\x55\x1f\x5a\x29\x81\xb0\x95\xfa\xb0\x95\xa2\x46\xda\xf4\x39\x61\x6c\x5f\xe3\xe9\x9a\x19\x6b\x66\xbc\x80\xca\xfe\xf7\x6a\x66\x00\xbb\xc4\x09\x36\xda\x3c\x44\x30\x9a\x7b\xbe\xeb\x33\xe7\xda\x66\x3a\x2f\xf3\x32\x08\xa2\xf1\x38\xc0\x18\x9f\x84\xe4\x42\x97\x94\x18\x2e\x05\x7e\x7f\x78\x70\x8b\x05\x17\x86\x14\xfc\x5f\xca\x35\x8b\x0b\x0a\x30\x8e\x82\x20\xab\x84\xdf\x6a\x48\x09\xa6\xb6\x4f\x7c\x55\x16\x3c\xdb\x0e\x47\xf8\x37\x00\x9c\x2a\xac\xc4\x8a\x6d\x63\x42\x22\xab\x22\x85\xa2\xb2\x60\x09\xc1\xe4\x74\xa8\xc3\x9a\x9b\x1c\xff\x54\xda\x60\x90\x48\x91\xee\xab\xcc\xb6\x24\xc4\x52\x16\x8d\xd5\x28\x80\xff\x86\x39\x8c\xaa\x08\xb7\xc8\x58\xa1\xe9\x2e\x78\x07\xb8\x56\xdc\x10\x98\xc6\x62\x68\xe5\x46\x4e\x60\xd1\xa4\xe0\xea\xc7\x72\x06\x1b\xcc\x6f\x31\xd8\x1e\x20\x19\xdf\xe0\xb0\xb6\x5f\x2a\x2b\x45\x18\x6c\x6a\xda\x06\x73\xfb\xcf\x6e\xe9\x41\x99\xb7\x50\xe6\x07\x8a\xd5\xe5\x5a\x93\x19\x0e\x36\xa3\xa6\xfc\xf7\xfa\xcc\x13\xb9\x5a\x91\x30\xf8\x42\xa5\x54\x06\xa5\x34\x24\x0c\x67\x05\x64\x49\x8a\xb9\xe3\x2d\x15\x25\x94\x92\x48\xc8\xaa\x55\xa4\x27\xae\x32\xa6\x4c\x2a\x72\x9d\x87\x18\xac\x98\xfe\x8a\xd9\x0c\x3f\xdf\x21\x8a\xec\x87\x9c\x69\xe4\x7c\x99\x93\x6a\x0a\x98\x9c\x09\x84\xae\x9e\x65\x3e\x57\xc3\x5a\x60\xe4\x14\x5c\xba\x8e\xe1\xaa\x8b\x0f\xb9\x8a\xf0\xf7\xe3\x1f\x8f\xb7\x58\x91\x5a\x12\xbe\x7c\x7e\xfa\xf0\xf0\xf9\x09\xaa\x2a\x48\x63\x9d\x93\xc0\x4f\xbf\xfc\xf6\x2b\xb8\x46\x4a\x09\x4f\x29\x9d\x04\xbe\xea\x2f\x69\xe8\x16\x6b\xb2\x19\xb4\xd7\xba\x68\x74\x7e\x35\xb3\x46\x5a\x5b\xd9\xab\xeb\x05\x7d\x23\xe1\x25\x78\x06\x6e\x90\x30\x01\x7b\x22\xac\x5a\xe6\xc6\xa7\x77\x61\x73\x94\xe4\x94\x7c\x7d\x2c\x17\xf6\x2a\x0d\xdc\x37\x8d\x58\x9a\xdc\x9b\xe9\xb2\x15\x45\xb0\x5b\x35\x5c\x16\x6d\x97\x42\x1a\x30\x2c\xa5\x4c\x0f\xdb\x90\x49\x85\x98\x9b\x35\xd7\x54\x9f\xc3\x68\xe2\xca\xbd\x86\x3f\x2e\x2e\x96\x58\x70\xf1\x8d\x15\x3c\xf5\xb2\x1f\x41\x1b\x3b\xc1\x94\x42\x54\xab\x98\x14\x32\x59\x89\xd4\xcd\xd1\x02\x5c\xfb\x6a\x8b\x74\x3d\xe6\x54\x94\x59\x55\x7c\x44\x4c\x09\xab\xb4\x1f\x4b\x25\xa5\x81\xcc\xdc\xe7\x52\xc9\xb8\xa0\x95\xed\xb3\xb6\xc5\x37\x82\x3f\x9b\x60\x30\x45\x60\x50\xa4\xab\x62\x5f\xcd\xcc\xc1\xf9\xe3\xf9\x4c\xf6\xc9\xc6\xa7\x35\x53\xc2\xb6\x7f\x26\x29\xfb\xe1\x78\xb1\xfb\x06\x2f\xf6\xb8\x5e\xee\x4e\x25\xae\x3a\x4a\x5c\xbd\x2d\x31\xeb\xde\xc6\x7b\x7d\x74\x6e\xa4\x21\xd2\xcf\x90\xdd\x89\x21\xbb\xfe\x86\xec\x4e\x0c\x69\x95\x38\x63\xc8\xee\xd4\x90\x37\xfa\xe8\xdc\x48\x43\x64\x1f\xf0\xe3\x48\x0f\x75\xee\x6e\x7d\x31\xf9\x89\x4f\xfd\xc4\xd5\x33\xcf\x05\xb2\xca\x54\x8a\x46\x97\xc7\x2b\x3c\x5a\x7a\x71\xbc\xc2\xa3\xa5\x97\xc7\x2b\xac\x2d\xbd\x3c\x5e\x61\x6d\xe9\xe5\xf1\xda\x5d\x6a\xc8\x89\xc4\x45\x86\xbc\x6a\xe3\x12\x43\x5e\x35\xe2\x45\xbe\x37\x5e\x5c\x98\xd6\x7c\x29\x1e\xcb\x33\x6f\x2c\xff\x7b\xe4\x7e\x98\xbd\x7e\xe4\xba\xb5\xb7\x1f\xec\x33\xb7\xa7\xd7\x83\xfd\xa6\x85\x72\xd3\x81\x72\xd3\x8b\x32\x6e\xa1\x8c\x3b\x50\xc6\xbd\x28\x51\x0b\x25\xea\x40\x89\x7a\x51\xae\x5b\x28\xd7\x1d\x28\xd7\xbd\x28\x61\x0b\x25\xec\x40\x09\x7b\x51\x76\x2d\x94\x5d\x07\xca\xae\x17\xe5\xb9\x85\xf2\xdc\x81\xf2\xdc\x8b\x32\x9d\xb6\x60\xfc\xe2\x19\xce\x74\xda\x0b\x74\x7f\xdf\x02\xf2\x8b\x67\x40\xf7\xf7\xbd\x40\x93\x16\xce\xa4\x03\x66\xd2\xf3\xd5\xbe\x05\xe3\x17\xcf\x70\xdc\x0f\x00\x7b\xa3\xfb\x2f\x00\x00\xff\xff\x02\xed\xb5\x2f\xdf\x0d\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
