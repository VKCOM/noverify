// Package embeddedrules Code generated for package embeddedrules by go-bindata DO NOT EDIT. (@generated)
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xeb\x6f\xe3\x36\x12\xff\x1e\x20\xff\xc3\xd8\xd0\x66\xed\xd4\x8f\x04\x7b\xc0\x01\x9b\x38\xe9\x5d\xef\xc3\x1d\xb0\xe8\x16\x2d\xfa\x69\x91\x75\x28\x69\x64\xb1\x91\x49\x1d\x49\x25\xd6\xc5\xf9\xdf\x0f\xa4\x1e\x96\x25\x5a\x8f\xdd\xb6\x40\x37\x36\x1f\xf3\xfb\xcd\x83\x33\x43\xfa\xf6\x3e\x0e\xe3\xf3\xb3\xf3\xb3\xe5\xe5\xe5\xf9\x19\x5c\xc2\x8f\x8c\x53\x26\x63\xf4\x14\xe5\x0c\xfe\xf1\xe9\x53\x36\x1a\x51\xa6\x50\x40\xf6\x9f\x4f\x25\x71\x23\xd4\x33\xcb\xa3\xbd\x1e\xdf\x6e\x91\x29\xf8\x15\x63\x2e\x14\x28\x14\x8c\x88\x14\x70\x17\x0b\x94\x92\x72\x26\x41\x85\x44\x81\x47\x18\xb8\x08\x92\x6e\xe3\x88\x06\x14\xfd\x45\xb6\xdf\xc5\x80\x0b\x04\x70\x76\x70\xaf\xff\xf9\x08\x4e\x9a\xcd\x90\x20\x83\xd7\x33\xc5\xe8\xf2\xfc\x2c\x48\x58\x46\x34\x87\xfa\x2d\x93\x98\x4e\xa6\xf0\x7a\x7e\x06\x90\x31\x03\x2d\x61\x4b\x52\x17\xc1\xe3\x49\xe4\x83\xc0\x38\x22\x1e\x82\x0a\xb1\x24\xf9\x42\x55\x08\x7f\x24\x52\x81\xe3\x71\xe6\x17\xdb\x54\x1a\x23\xb8\x9c\x47\xd5\xe1\xa5\xfe\x63\xbe\xc3\x3d\x28\x91\x20\x7c\x84\x80\x44\x12\x6f\xb4\x39\x5a\x60\x5f\x04\x55\x08\x44\xc2\xe3\x44\xcb\x9c\x1a\x19\x8f\x47\x58\x30\xfa\x0b\xd0\x0a\xb3\x95\x50\x01\xdd\x55\x6d\x69\xc6\xe2\x44\x20\x38\xbb\x2a\x68\xc5\x0f\xc3\xc0\xee\x6d\x60\xf7\x25\x98\x91\x4e\xa5\x44\x35\x71\x76\xd3\x23\x90\xb7\xb6\x88\x8a\xb9\x42\xa6\x28\x89\x80\xc7\x28\x88\x71\x7d\x2c\xd0\x43\x1f\x99\x87\x5a\x62\x82\xb2\x19\x4c\x17\xe0\x6c\x89\x7c\x82\xd5\x0a\xae\x6e\x60\xb9\xd4\x1f\x42\x22\x21\xa4\x9b\x10\x45\x55\x82\x0a\x09\x83\x8b\xe3\x98\x9b\x1c\x24\x4c\x8d\x88\x7a\xf0\x1d\xf6\x97\x71\xb7\x84\x9f\xb9\xc2\x8f\xf0\x82\x3a\xd8\x34\xf5\xc7\x0a\x8f\xd1\x4a\x9b\x47\x1b\x8b\x34\xe8\x03\x3e\x23\xcb\x65\xd0\x00\x68\x79\x5a\x3c\x92\x6c\x42\x95\xc5\xe9\xa3\x0e\x15\x2f\x44\xef\xe9\x73\xfc\x98\x9f\x29\xfd\x4d\x82\xcb\x55\x98\x19\x27\x0b\x9f\xe5\x12\xf4\x5a\x09\x26\xe0\x80\x4a\x60\x5c\x01\x81\x0d\xe7\x7e\xb1\x0e\x02\x2e\xc0\xa5\xea\x85\x4a\x3c\x18\x76\xba\xc8\xf6\xe7\x52\x32\x0f\x50\xb6\x81\x47\xca\x9e\x49\x44\xfd\x4c\xf0\x4c\x1f\x6f\xf4\x14\xfa\xc0\x92\xad\x8b\x02\x02\x9e\x30\xdf\x9c\x99\x47\xa0\x32\xdf\xae\x51\x0d\xcf\x10\xa3\x38\x48\xa2\x19\xb8\xe8\x91\x44\x66\x87\x50\x70\xae\x80\x07\xe6\x73\x2c\xb8\x1b\xe1\x56\x53\x3d\xd8\x26\xe7\x02\xff\xa9\x42\x03\x11\x08\x04\x04\xca\x24\xca\xb7\x13\xb5\x28\xe3\x14\x7e\x7c\x21\x82\x69\xc6\x1d\xee\xce\xe3\x91\xb0\x74\x8d\xff\x5d\xbb\x54\x11\xe6\x7f\xcc\x1c\x09\xe0\xac\xf5\x76\x67\xad\x9d\xb7\xbe\x29\xc7\x2e\xca\x09\x33\xf6\xd6\xc0\x1c\xf5\xc6\x64\x56\xd0\xd1\x29\xd0\x51\x0b\xe8\x6a\x88\xa6\x1f\xac\xaa\x9e\xd6\xb5\x55\xd9\x21\xda\xda\x80\x47\x27\x81\x47\x47\xc0\x03\x7d\xbb\x6f\xf8\x96\x8b\xa6\x6b\xf7\x47\xa8\xfb\xef\x73\xed\xbe\xe9\xda\x63\xcc\xd1\x29\xcc\xef\xf0\xec\xbe\xe9\xd9\xba\xa2\xa7\x35\xfd\x76\xc7\xee\x2d\x8e\xad\x2b\x7b\x5a\xdb\x0e\xbf\xb6\x22\xdf\xdf\x17\x35\xaa\xd4\x4d\xd7\x97\xf5\x8d\x45\x54\x87\x12\x55\x51\xa3\x0e\x51\x43\x48\x75\x70\xea\x4f\xa9\x55\xd0\x5d\x5f\x39\x77\xed\x62\x7a\xf3\xb9\x6b\xe7\x73\xdb\x57\xce\x6d\xbb\x98\xde\x7c\x6e\x8f\xf8\xb4\xb6\x0f\x44\x4a\xba\x61\x7a\xa4\x7f\x23\xba\xd2\xff\xfc\x90\xf5\x26\xb5\x4e\xf4\x87\x55\x31\x5c\xed\x06\x32\x90\xcf\x71\x67\x0f\x7a\xd4\x31\x19\x59\xf5\x8e\xc9\x0c\xb6\xb6\x67\x55\x76\xfd\xc1\xe6\x36\xb0\x79\x3f\xb0\xf9\x50\xb0\x4b\x1b\xd8\x65\x3f\xb0\xcb\xa1\x60\x4b\x1b\xd8\xb2\x1f\xd8\x72\x28\xd8\x3b\x1b\xd8\xbb\x7e\x60\xef\x86\x82\x5d\xd8\xc0\x2e\xfa\x81\x5d\x0c\x05\xdb\xdb\xc0\xf6\xfd\xc0\xf6\x43\xc1\xbe\xda\xc0\xbe\xf6\x03\xfb\x3a\x14\xec\xf6\xd6\x86\x96\x8d\x76\xc3\xdd\xde\x0e\xc5\xbb\xbb\xb3\xe1\x65\xa3\xdd\x78\x77\x77\x43\xf1\x16\x36\xb8\x45\x3f\xb4\xc5\xf0\x6b\x9e\x0d\x2d\x1b\xed\x86\x33\xf7\xc1\x01\x37\xbe\x20\x98\xbb\xe9\x9c\x33\x84\x2d\x95\x8a\x3c\x35\x6f\x7a\xe4\x8b\xc7\x13\xa6\x26\x0e\x99\x3e\xd4\xb2\x75\x65\x6a\x7e\xfd\x50\xcf\xd9\x3c\x08\xfe\x99\x5e\x5b\x32\x76\x51\x8e\xf4\xa5\x84\xb8\x51\x0a\x94\x29\x64\x3e\xfa\xa0\x38\xe8\xdb\x8b\x91\x3a\xbf\x36\x77\x39\x06\x94\xf9\xb8\xab\x9a\x03\x6a\xd8\x30\x07\x83\x5e\xda\xa2\x4a\xb9\x69\xfb\x4e\x78\x49\xff\x87\x3c\xe8\xc4\xcf\x96\x9d\x20\x70\x98\x7c\xe8\xf2\x86\x4c\x64\x4c\x3d\xca\x13\x7d\xf7\xda\x24\x59\x25\xe5\xc2\x47\x51\x73\x85\x54\x22\xe6\x72\xf2\x7e\xf9\x7e\x06\x8e\x9c\x1e\x3b\x23\x9f\x74\xe4\x0c\xde\x2f\xdf\x4f\x1b\x05\x54\x6c\xe4\x67\x2d\xb3\xcd\x1f\x45\x58\x18\x9b\x78\x5c\x08\xf4\x14\x84\x24\x95\x8a\x78\x4f\xa0\x2f\xb5\x0c\xd1\x8f\xb0\xce\xb3\xa2\xba\x6e\x5a\x8b\x1d\xeb\x6c\x75\xd9\xb9\x16\x14\x5f\xc7\x5e\x48\xc4\xf8\x6d\x06\xce\xeb\xf8\x72\xfc\x36\xbd\x29\xe7\x69\xd7\x82\x0e\x09\x89\x2b\x95\x58\xe7\xde\x7f\x1d\x4b\xd5\x58\xf4\x76\x3a\x1e\xac\xea\xe7\xcf\x5a\xc6\x61\xda\x02\x32\x71\xff\xd0\xe3\xa7\x4d\x10\x0b\xdc\xac\xf3\x6d\x13\x67\x3d\x03\xf3\xbf\x85\xcc\xb7\xf0\xc8\x38\x28\xa1\x17\xb6\x7b\x41\x1b\x22\xdf\x54\xf5\x80\x8d\xd9\x49\x6b\x37\x16\x8f\xc7\xdf\x67\x4d\x1f\x23\xba\xa5\x3a\x62\x7b\xe9\x81\xbb\x38\xe2\x7e\x0e\x6f\xe3\xd9\xf7\x60\x25\x92\x6c\x10\x78\xd0\x7c\x91\xa9\xe7\x3b\x1a\xc0\xc4\xa1\xf2\xf7\x5f\x3f\xe9\x0a\xff\x8c\x82\x06\xe9\x14\x16\x8b\xc5\xf1\x71\xab\x2e\x6b\xae\xab\x9e\xbc\x1c\xf1\x73\x2c\x5b\x8e\xde\xef\x12\x7d\xb8\xa8\xb1\xe3\x02\xf8\x33\x8a\xec\xa5\x34\x7f\x56\x92\x33\x88\x51\x84\x24\x96\x1a\x97\xca\x32\x79\xdd\xd7\xbb\x98\x8b\x4a\xbd\xa8\x3c\xb8\xee\x2c\x63\xe9\x71\x21\xb1\x77\x36\x47\x54\xf7\xc3\xa8\xee\xf7\x6d\x54\xf7\xfb\x6f\xa6\xba\xef\x51\xed\x3c\x12\x45\xc3\x9f\xcb\x29\x5b\x13\x21\x48\x3a\x71\x9e\x66\x60\x3e\xad\x9f\x30\x95\x13\x47\x85\x54\xce\xef\x7c\xa2\xc8\xb4\x96\x82\xcb\x55\x6b\xdc\x51\xa9\xa4\xd9\x5a\x5d\x5f\x0f\x0d\xcd\xac\xf3\x75\xfd\x27\xd3\x24\xe4\x3c\x53\x5d\xa3\x2c\x38\x98\xce\xc0\x31\x00\x95\x2a\xd5\xb5\x2e\x7b\x30\x3e\xe8\xa9\x27\xab\x9a\x92\x69\xe7\x11\x63\x5c\xcd\xf5\x29\xf6\xd4\x1c\x19\x4f\x36\x21\x78\x7c\x1b\x13\x41\xa5\xe5\x64\x15\x48\xe3\x97\x90\xa8\xb1\xa5\x86\x59\x56\xcc\xcc\xe3\x7c\xc3\x72\x19\xe6\x4f\xdb\xf2\x42\x78\x30\xdc\x51\xb0\x32\xce\x72\x7e\x15\x62\x30\xd1\x55\x7e\xb5\x5a\x4d\x8b\x0d\xcb\xec\x43\xf6\xd0\x93\x90\xa8\x4c\x98\x87\x17\x2d\x4d\xe3\xe6\x30\x68\x7e\x32\x38\x3c\xb6\x54\x57\x16\x3f\x23\x14\xa3\xe6\xfb\x89\xb5\x2c\x89\xa2\xca\xa0\xfe\x7a\xb4\x32\xcf\xaf\xdd\xda\xe5\xa9\xb4\x4d\xc9\xfc\x1c\xe5\x2b\xf3\xd3\xd5\x1c\x4f\x6b\x46\x31\xad\xe5\xea\x90\x12\x86\x5b\x7a\x64\xb7\x34\xe3\xca\x6e\xed\x91\xdd\xda\xa3\xa6\x05\x47\xa7\xac\x6d\x5f\x6b\xb3\xf6\xe8\x4f\xb4\xf6\xe8\xfb\xad\xed\xec\xb2\x1f\x32\xda\x8d\xfd\x41\xf8\x65\xd5\xd4\x55\xad\x38\x38\xb0\x4d\xa4\xd2\x69\xcd\x18\xec\x25\x44\x56\x70\x64\x9b\x1c\x52\x9e\x20\xe2\xd6\x88\x1c\xf2\x82\xab\x4b\xff\x74\x18\xa1\x2c\x8d\x48\x24\xc2\x0b\xff\x44\x52\x55\xb1\x15\x62\xad\x29\x4a\x85\x68\xba\x7a\x1e\x80\x97\x88\x28\x05\x57\x10\x0f\xa5\xf9\x7d\xc6\xb4\xf6\x94\x6d\x1a\x2f\x54\xaf\x57\x6f\xf5\x97\xa9\x2f\x57\x8d\x1b\x4e\xb1\xfd\xb7\x94\x29\xb2\xeb\x48\x45\xe4\x95\xbe\x95\x3b\x74\x39\xf4\x31\x16\xe8\x11\x85\x3a\xbb\x33\x0f\xe1\x97\x7f\xff\x02\x7f\x5f\xfc\x6d\x66\xe8\x92\x2f\xf4\x01\x28\x93\x0a\x89\x7f\x10\x96\x55\xcc\x2f\x4e\xfa\xd0\x88\x9b\x57\x27\x7d\xeb\xb2\x45\x22\x0d\x13\x66\x4a\xf1\xc6\xfc\xac\x24\xc0\xa9\x35\xf5\xda\x52\x52\x89\x4b\x28\xf4\xac\x27\xf2\xbc\x8f\x1f\x87\x18\x45\x7c\x3c\x83\xeb\x2b\xfb\x5d\xa4\x5c\xe0\x85\x62\x72\x7d\x35\x6d\x64\x71\xca\xd4\xcf\x06\xbb\xc3\x74\x55\xf3\x7c\x98\x41\x4c\xa4\xd1\x43\x7b\x96\x32\x05\x31\x11\x64\x8b\x1a\x3a\xd7\x44\xf1\x22\x82\xf2\x08\x2c\x35\x31\xef\x9f\x2e\x22\xab\x58\x7f\x06\x1e\x91\x0a\xa8\x32\xed\x26\xf5\xa8\x8a\xd2\x8a\x08\x2e\xe0\x45\x90\x58\xcf\x53\x06\xc4\x28\x33\x85\xa3\x1a\x5e\x8b\x5e\xcd\xe9\x70\xe0\x0f\x19\xef\x28\xcf\x15\x97\x21\xdd\xd9\xee\xa6\x37\x47\x13\xa7\x67\xe8\xe9\x3d\xa7\xa7\xa4\x12\xf6\x09\xad\x8a\x5d\xd8\xc9\x19\xda\x14\xf6\x56\x0f\x3a\xdc\xe9\x3e\x4f\xd6\xbd\x1d\x11\xb6\xf9\x57\x69\xf5\x21\x2e\x5f\x5c\xcd\x8c\xb3\x7d\x0c\x28\xa3\xf9\xe3\x82\xf6\x9a\xb6\xb5\x44\x26\xa9\xa2\xcf\x08\x1e\x67\x52\x11\x7d\x8f\xb0\x78\xb9\xe6\x0e\x23\xea\x70\xaf\x31\x4d\x46\x7b\x8a\xcb\x76\xe8\x3f\x24\x89\x94\x34\x8d\x58\xc6\xa1\xc9\x20\xa3\xab\x42\x5a\x4d\x8b\x79\xc7\x29\x70\xcb\x9f\xb1\x76\xa6\x1b\x94\x4a\xb3\x9f\x20\x6c\xca\x5c\x9e\xfb\xfe\x1f\x00\x00\xff\xff\x50\x8b\x51\xf3\x70\x22\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
