// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xdd\x6e\xdb\xb8\x12\xc7\xef\x03\xe4\x1d\x46\x86\xea\xd8\xa9\x6d\x9d\xa2\x77\x49\x9c\xf4\x9c\x73\xb5\x40\xb1\x01\xba\xe8\xd5\xa2\x75\x28\x69\x64\xb1\x91\x49\x2d\x49\x25\xd6\x46\x79\xf7\x05\x45\x59\x96\x25\xfa\x43\x4d\xb7\x40\x1d\x7b\x44\xce\xef\xcf\x19\x7e\x8c\x78\x73\x97\xc6\xe9\xf9\xd9\xf9\x99\x77\x79\x79\x7e\x06\x97\xf0\x89\x71\xca\x64\x8a\x81\xa2\x9c\xc1\x7f\x3f\x7f\x36\xd6\x84\x32\x85\x02\xcc\xbf\x90\x4a\xe2\x27\xa8\x9f\x78\x3b\x7d\x03\xbe\x5a\x21\x53\xf0\x05\x53\x2e\x14\x28\x14\x8c\x88\x1c\x70\x9d\x0a\x94\x92\x72\x26\x41\xc5\x44\x41\x40\x18\xf8\x08\x92\xae\xd2\x84\x46\x14\xc3\x99\xe9\xef\x63\xc4\x05\x02\xb8\x6b\xb8\xd3\x1f\x57\xe0\xe6\xe6\x09\x89\x0c\x5e\x3f\xd9\x58\xbd\xf3\xb3\x28\x63\x46\x68\x85\xfa\xc3\x78\xcc\x47\x63\x78\x39\x3f\x03\x30\xca\x40\x7b\x58\x91\xdc\x47\x08\x78\x96\x84\x20\x30\x4d\x48\x80\xa0\x62\xac\x45\x3e\x53\x15\xc3\x8f\x4c\x2a\x70\x03\xce\xc2\x4d\x37\x95\xa7\x08\x3e\xe7\x49\xd3\xec\xe9\x3f\xe5\x6f\xb8\x03\x25\x32\x84\x2b\x88\x48\x22\xf1\x5a\x87\xe3\x00\xf6\x59\x50\x85\x40\x24\x3c\x8c\xb4\xcf\x71\xe9\xe3\x61\x87\x05\xce\xbf\x40\xdb\x84\xad\x46\x45\x74\xdd\x8c\x65\x69\x4b\x33\x81\xe0\xae\x9b\xd0\x46\x1e\xfa\xc1\xee\x6c\xb0\xbb\x1a\x56\x7a\xa7\x52\xa2\x1a\xb9\xeb\xf1\x0e\xe4\xf5\xd0\x8c\x4a\xb9\x42\xa6\x28\x49\x80\xa7\x28\x48\x99\xfa\x54\x60\x80\x21\xb2\x00\xb5\xc7\x0c\x65\x77\x32\x0d\xc1\x5d\x11\xf9\x08\xf3\x39\xfc\xe7\x1a\x3c\x4f\x7f\x89\x89\x84\x98\x2e\x63\x14\x4d\x0f\x2a\x26\x0c\x86\xbb\x73\x6e\xb4\xf5\x30\x2e\x5d\xb4\x27\xdf\xb6\x7f\x3d\xef\x3c\xf8\x9d\x2b\xbc\x82\x67\xd4\x93\x4d\x4b\x7f\x68\xe8\x70\xe6\x3a\x3c\x3a\x58\xa4\x23\x1f\xf0\x09\x59\xe5\x83\x46\x40\xeb\xd5\x12\x90\x6c\x19\x2b\x33\x4f\x1f\xf4\x54\x09\x62\x0c\x1e\xef\xd3\x87\x6a\x4d\xe9\x5f\x12\x7c\xae\x62\x13\x1c\x33\x7d\x3c\x0f\x74\x5b\x09\xe5\x84\x03\x2a\x81\x71\x05\x04\x96\x9c\x87\x9b\x76\x10\x71\x01\x3e\x55\xcf\x54\xe2\x36\xb0\xe3\x99\xe9\x5f\x79\x31\x19\xa0\x6c\x09\x0f\x94\x3d\x91\x84\x86\xc6\xf1\x44\x2f\x6f\x0c\x14\x86\xc0\xb2\x95\x8f\x02\x22\x9e\xb1\xb0\x5c\x33\x0f\x40\x65\xd5\x5d\x53\x4b\x9d\x31\x26\x69\x94\x25\x13\xf0\x31\x20\x99\x34\x8b\x50\x70\xae\x80\x47\xe5\xf7\x54\x70\x3f\xc1\x95\x96\xba\x8d\x4d\xa5\x05\x7e\x6b\xa2\x81\x08\x04\x02\x02\x65\x96\x54\xdd\x89\x9a\xd5\xf3\x14\x3e\x3d\x13\xc1\xb4\xe2\x23\xe9\xae\xe6\x23\x61\xf9\x02\xff\x5a\xf8\x54\x11\x16\x5e\x99\x44\x02\xb8\x0b\xdd\xdd\x5d\xe8\xe4\x2d\xae\x6b\xdb\xb0\x7e\x50\xda\x5e\x3b\x4c\xe7\x64\x26\xb3\x42\x9d\x7d\x50\xe7\x00\x74\xde\x67\xa4\x1f\xad\x43\xdd\x3f\xd6\x83\x83\xed\x33\x5a\x1b\xd8\xd9\x0b\x76\x76\xc0\x3d\x73\x5b\x74\x72\xcb\x45\x37\xb5\xc5\x0e\xb5\x78\x5b\x6a\x8b\x6e\x6a\x77\x99\xce\x3e\xe6\x1b\x32\x5b\x74\x33\xdb\x1e\xe8\xfe\x91\xfe\x7c\x62\x0b\x4b\x62\xdb\x83\xdd\x3f\xda\x26\xf7\xe0\xb6\x4f\xa4\xa4\x4b\xa6\x2d\xa7\x17\x10\x73\xfd\xf1\xde\x9c\x29\xad\x0a\xe2\xfd\x7c\x63\x6e\xee\xe2\x06\x72\x9f\x1e\xad\x1d\x76\x4e\xba\xd2\x57\xfb\xa4\x2b\x8d\x07\x8f\xd5\xa6\xba\xd3\x61\x53\x1b\x6c\x7a\x1a\x6c\xda\x17\x76\x69\x83\x5d\x9e\x06\xbb\xec\x0b\xf3\x6c\x30\xef\x34\x98\xd7\x17\xf6\xce\x06\x7b\x77\x1a\xec\x5d\x5f\xd8\xd0\x06\x1b\x9e\x06\x1b\xf6\x85\x15\x36\x58\x71\x1a\xac\xe8\x0b\xfb\x6e\x83\x7d\x3f\x0d\xf6\xbd\x2f\xec\xe6\xc6\x46\x33\xd6\xe3\xb8\x9b\x9b\xbe\xbc\xdb\x5b\x1b\xcf\x58\x8f\xf3\x6e\x6f\xfb\xf2\x66\x36\xdc\xec\x34\xda\xac\x7f\x79\x6e\xa3\x19\xeb\x71\x5c\x59\xc7\xf7\xa8\xd4\xa3\x68\xea\xe7\x53\xce\x10\x56\x54\x2a\xf2\xd8\xad\xd0\xc9\x9f\x01\xcf\x98\x1a\xb9\x64\xfc\xad\xb5\x5b\x37\x1e\x4d\x3f\x7c\x6b\xef\xd9\x3c\x8a\xfe\x97\x7f\xb0\xec\xd8\x9b\xf3\x4b\x17\x93\xc4\x4f\x72\xd0\xef\xaf\x2c\xc4\x10\x14\x07\x5d\x75\x96\x5e\xa7\x1f\xca\x1a\x9c\x01\x65\x21\xae\x9b\xe1\x80\x16\x1b\xa6\x50\xd2\xeb\x58\x34\x25\x77\x63\x7f\x14\x2f\xe9\xdf\xc8\xa3\xa3\x7c\xd3\x6c\x8f\x80\xed\xc3\x6f\xc7\xb2\x21\x33\x99\xd2\x80\xf2\x4c\xd7\xcc\xcb\xcc\x9c\xa4\x5c\x84\x28\x5a\xa9\x90\x4a\xa4\x5c\x8e\x2e\xbc\x8b\x09\xb8\x72\xbc\x9b\x8c\xea\xa1\x2b\x27\x70\xe1\x5d\x8c\x3b\x07\xa8\x58\xca\x7b\xed\xf3\x50\x3e\x36\xd3\xa2\x8c\x49\xc0\x85\xc0\x40\x41\x4c\x72\xa9\x48\xf0\x08\xfa\x65\x84\x21\x86\x09\xb6\x75\x36\x86\xae\x8b\x8d\x4d\x8f\x85\x69\x5d\x57\x1c\x1b\x89\x2f\x83\x20\x26\x62\xf0\x3a\x01\xf7\x65\x70\x39\x78\x1d\x5f\xd7\xcf\xe9\xb1\x06\x47\x3c\x64\xbe\x54\x62\x51\x65\xff\x65\x20\x55\xa7\xd1\xeb\xfe\xf9\x60\x1d\x7e\x75\x1d\x51\x26\x4c\x47\x40\x66\xfe\x0f\x6d\xdf\x1f\x82\x54\xe0\x72\x51\x75\x1b\xb9\x8b\x09\x94\xff\x2d\x62\x7e\x46\x87\xd1\xa0\x84\x6e\x78\x38\x0b\x3a\x10\x55\xa7\x66\x06\x6c\xca\xf6\x46\xbb\xd3\x78\x30\x78\x5b\x34\x43\x4c\xe8\x8a\xea\x19\x7b\xd2\x38\x70\x9d\x26\x3c\xac\xf0\x36\x9d\x07\x17\x16\xe3\x6a\xaa\x11\x81\x9a\x22\xe3\xd9\x32\x86\x80\xaf\x52\x22\xa8\xe4\xac\xbd\xcd\x51\xb6\x20\x42\x90\x7c\x34\x78\x8e\x89\x1a\x58\x16\x98\xa5\xc5\xa4\xbc\xf1\xe9\xac\x35\xc3\xfc\xff\xaa\xae\x56\xb7\x01\xda\x09\x11\xe3\xac\xd2\xd7\x10\x06\x23\xbd\x05\xcd\xe7\xf3\xf1\xa6\x83\x67\xbe\x98\xb7\x87\x8c\x24\x75\x36\xb7\xaf\x49\x5a\xc6\xf5\xd6\x58\xde\x43\x6d\x2b\xf8\x66\xcb\xcd\xdd\xd4\xc6\x5a\xfe\xde\xd3\x96\x65\x49\xd2\x30\xea\x9f\x3b\x2d\xab\xe4\x1f\x1f\x5d\x95\xe7\x43\x83\xac\x2e\xd8\xaa\x96\xd5\xd1\xd6\xb5\xe7\xad\xa0\x94\xe7\xde\x7c\x7b\xc4\xf6\x8f\xb4\x63\x8f\x34\xe3\xca\x1e\x6d\xc7\x1e\x6d\xa7\x1b\x41\x67\x5f\xb4\xed\x6d\x6d\xd1\x76\x7e\x61\xb4\x9d\xb7\x47\xdb\x5d\x9b\xdb\xb1\xc3\xc1\xfe\x28\xc2\x7a\x49\x03\x8f\xea\x85\x03\xab\x4c\x2a\xfd\x66\x58\x06\xec\x39\x46\xb6\xd1\xc8\x96\x15\x52\xee\x11\xe2\xb7\x84\xd4\x6b\xd1\xf5\xf5\xbe\x34\xee\x27\xa8\xec\xba\x90\x48\x44\x10\xff\x42\x51\x4d\xb7\x0d\x61\xa7\x9e\xfd\x99\x24\x4b\xd4\xf2\x3a\x97\x7d\x9d\xbd\x2a\x82\x91\x4b\xe5\xd7\x2f\x9f\xf5\x4b\xc8\x13\x0a\x1a\xe5\x63\x98\xcd\x66\xad\x0d\xab\xd1\xac\xdb\xae\xb9\x61\x55\xc4\xfb\x54\x1e\xa8\x0e\xbe\x4a\x0c\x61\xd8\x52\xc7\x05\xf0\x27\x14\xe6\x12\xbe\xba\xb1\x94\x13\x48\x51\xc4\x24\x95\x9a\x4b\x65\x5d\x5f\xdd\xb5\x5f\xb4\x86\x8d\x92\xb6\x71\x97\xbf\xb6\xd8\xf2\xdd\x5a\xd7\xfe\xf2\xb5\x23\xb5\xe8\x27\xb5\x28\x0e\x49\x2d\x8a\x9f\x96\x5a\xd4\x05\xf9\x3f\x01\x00\x00\xff\xff\x82\x54\x6b\xf4\xd0\x19\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
