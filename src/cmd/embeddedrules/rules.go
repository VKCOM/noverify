// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x99\x5b\x6f\xe3\xb8\x15\xc7\xdf\x03\xe4\x3b\x1c\x1b\x1a\x8f\x9d\xf5\xa5\x83\x7d\x4b\x7c\xd9\x76\x9f\x0a\x0c\x1a\x60\x8b\x7d\x2a\x66\x1c\x4a\x3a\xb2\xb8\x91\x49\x95\xa4\x12\xab\x71\xbe\x7b\x41\x51\x96\x65\x89\xb2\xa4\xc9\xee\x00\xe3\xd8\xd4\x21\x7f\xff\x73\x0e\xef\x5a\x6e\xe2\x30\xbe\xbd\xb9\xbd\x59\xdc\xdd\xdd\xde\xc0\x1d\xfc\xc2\x38\x65\x32\x46\x4f\x51\xce\xe0\xef\x5f\xbf\x9a\xd2\x88\x32\x85\x02\xcc\x3f\x9f\x4a\xe2\x46\xa8\x9f\x2c\x2e\xea\x7a\x7c\xbf\x47\xa6\xe0\x37\x8c\xb9\x50\xa0\x50\x30\x22\x52\xc0\x43\x2c\x50\x4a\xca\x99\x04\x15\x12\x05\x1e\x61\xe0\x22\x48\xba\x8f\x23\x1a\x50\xf4\xe7\xa6\xbe\x8b\x01\x17\x08\xe0\x1c\x60\xa3\x3f\xee\xc1\x49\xcd\x13\x12\x18\xbc\x7e\x72\x2a\x5d\xdc\xde\x04\x09\x33\x42\x73\xd4\xbf\x4d\x8b\xe9\x78\x02\x6f\xb7\x37\x00\x46\x19\xe8\x16\xf6\x24\x75\x11\x3c\x9e\x44\x3e\x08\x8c\x23\xe2\x21\xa8\x10\x0b\x91\xaf\x54\x85\xf0\x47\x22\x15\x38\x1e\x67\xfe\xa9\x9a\x4a\x63\x04\x97\xf3\xa8\x5c\xbc\xd0\x7f\xb2\xdf\xb0\x01\x25\x12\x84\x7b\x08\x48\x24\xf1\x41\x87\xe3\x0a\xf6\x55\x50\x85\x40\x24\x3c\x8d\x75\x9b\x93\xac\x8d\xa7\x0b\x16\x0c\xfe\x02\xda\x29\x6c\x05\x2a\xa0\x87\x72\x2c\xb3\xb2\x38\x11\x08\xce\xa1\x0c\x2d\xe5\xa1\x1f\x6c\x63\x83\x6d\x0a\x58\xd6\x3a\x95\x12\xd5\xd8\x39\x4c\x2e\x20\xef\xd7\x7a\x54\xcc\x15\x32\x45\x49\x04\x3c\x46\x41\xb2\xd4\xc7\x02\x3d\xf4\x91\x79\xa8\x5b\x4c\x50\xd6\x3b\xd3\x08\x9c\x3d\x91\xcf\xb0\x5a\xc1\xdf\x1e\x60\xb1\xd0\x5f\x42\x22\x21\xa4\xbb\x10\x45\xb9\x05\x15\x12\x06\xa3\xcb\x3e\x37\x3e\xb7\x30\xc9\x9a\xa8\x76\xbe\x73\xfd\xa2\xdf\x2d\xe0\x5f\x5c\xe1\x3d\xbc\xa2\xee\x6c\x5a\xfa\x53\x49\xc7\x60\xa5\xc3\xa3\x83\x45\x6a\xf2\x01\x5f\x90\xe5\x6d\xd0\x00\x68\x31\x5a\x3c\x92\xec\x42\x65\xfa\xe9\x93\xee\x2a\x5e\x88\xde\xf3\x63\xfc\x94\x8f\x29\xfd\x4b\x82\xcb\x55\x68\x82\x63\xba\xcf\x62\x01\xda\x56\x42\xd6\xe1\x80\x4a\x60\x5c\x01\x81\x1d\xe7\xfe\xc9\x0e\x02\x2e\xc0\xa5\xea\x95\x4a\x3c\x07\x76\x32\x37\xf5\xf3\x56\x4c\x06\x28\xdb\xc1\x13\x65\x2f\x24\xa2\xbe\x69\x78\xaa\x87\x37\x7a\x0a\x7d\x60\xc9\xde\x45\x01\x01\x4f\x98\x9f\x8d\x99\x27\xa0\x32\xaf\xae\xa9\x99\xce\x10\xa3\x38\x48\xa2\x29\xb8\xe8\x91\x44\x9a\x41\x28\x38\x57\xc0\x83\xec\x7b\x2c\xb8\x1b\xe1\x5e\x4b\x3d\xc7\x26\xd7\x02\xff\x2c\xa3\x81\x08\x04\x02\x02\x65\x12\xe5\xd5\x89\x9a\x17\xfd\x14\x7e\x79\x25\x82\x69\xc5\x2d\xe9\xce\xfb\x23\x61\xe9\x16\xff\xbb\x75\xa9\x22\xcc\xbf\x37\x89\x04\x70\xb6\xba\xba\xb3\xd5\xc9\xdb\x3e\x14\x65\xa3\xe2\x41\x56\xf6\x5e\x63\x0e\x3a\x33\x99\x15\x3a\x68\x82\x0e\xae\x40\x57\x7d\x3c\xfd\xd9\xea\x6a\xb3\xaf\x57\x9d\xed\xe3\xad\x0d\x3c\x68\x04\x0f\x2e\xc0\x3d\x73\x7b\xac\xe5\x96\x8b\x7a\x6a\x8f\x17\xd4\xe3\xc7\x52\x7b\xac\xa7\xf6\x92\x39\x68\x62\x7e\x20\xb3\xc7\x7a\x66\xab\x8e\x36\x7b\xfa\xe3\x89\x3d\x5a\x12\x5b\x75\xb6\xd9\xdb\x96\xbc\x5e\x25\x6f\x36\x15\x8f\x3d\x4e\x22\x94\x1e\x5a\x9c\xd6\x0b\x4f\x33\xa8\xc5\xc5\x0b\x10\x6b\x22\x0d\xba\x90\x7a\x79\xd4\xe0\x50\x17\x7f\xfa\xb8\xd3\xe0\x4d\x3b\x66\xdd\x99\xb2\x13\x56\xc8\xba\x03\xa3\xbb\x2b\x3b\xd1\xe0\xcb\xba\x83\x2f\xcb\xce\x98\xc8\xee\xcb\xb2\x03\xa3\xbb\x2f\x51\x93\x2f\xcb\xba\x2f\x57\xb7\x4b\x44\x4a\xba\x63\xba\xa4\xfb\xc6\x7b\xa5\x3f\x7e\x32\x7b\xb1\xca\xce\xfb\xa7\xd5\xa9\xb8\xbc\xfb\x31\x90\xc7\xb8\x75\xcf\x7d\xb1\x43\xcc\xda\xaa\xee\x10\xb3\xc2\xab\xdb\xd1\xb2\xba\xee\xb0\x99\x0d\x36\xeb\x06\x9b\xf5\x85\xdd\xd9\x60\x77\xdd\x60\x77\x7d\x61\x0b\x1b\x6c\xd1\x0d\xb6\xe8\x0b\xfb\x64\x83\x7d\xea\x06\xfb\xd4\x17\x36\xb2\xc1\x46\xdd\x60\xa3\xbe\xb0\xa3\x0d\x76\xec\x06\x3b\xf6\x85\x7d\xb7\xc1\xbe\x77\x83\x7d\xef\x0b\x5b\x2e\x6d\x34\x53\xda\x8e\x5b\x2e\xfb\xf2\xd6\x6b\x1b\xcf\x94\xb6\xf3\xd6\xeb\xbe\xbc\xb9\x0d\x37\xef\x46\x9b\xf7\x3f\xd6\xda\x68\xa6\xb4\x1d\x97\x9d\x7f\x7b\x9c\x70\x83\x60\xe6\xa6\x33\xce\x10\xf6\x54\x2a\xf2\x5c\x3f\xd9\x92\xff\x78\x3c\x61\x6a\xec\x90\xc9\xb7\xca\x6c\x5d\x7a\x34\xfb\xf2\xad\x3a\x67\xf3\x20\xf8\x47\xfa\xc5\x32\x63\x9f\x56\x2b\x7d\x08\x23\x6e\x94\x02\x65\x0a\x99\x8f\x3e\x28\x0e\xfa\xb4\x96\xb5\x3a\xfb\x92\x9d\x5d\x19\x50\xe6\xe3\xa1\x1c\x0e\xa8\xb0\x61\x06\x19\xbd\x88\x45\x59\x72\x3d\xf6\xad\x78\x49\xff\x87\x3c\x68\xe5\x1b\xb3\x06\x01\xe7\x87\xdf\xda\xb2\x21\x13\x19\x53\x8f\xf2\x44\x9f\x35\x77\x89\x59\x49\xb9\xf0\x51\x54\x52\x21\x95\x88\xb9\x1c\x7f\x5e\x7c\x9e\x82\x23\x27\x97\xc9\xc8\x1f\x3a\x72\x0a\x9f\x17\x9f\x27\xb5\x05\x54\xec\xe4\xa3\x6e\xf3\x5a\x3e\x4e\xdd\x22\x8b\x89\xc7\x85\x40\x4f\x41\x48\x52\xa9\x88\xf7\x0c\xfa\x10\xcf\x10\xfd\x08\xab\x3a\x4b\xae\xeb\xad\xc5\xa9\xc6\xd6\x58\x17\x9b\x8b\x93\xc4\xb7\xa1\x17\x12\x31\x7c\x9f\x82\xf3\x36\xbc\x1b\xbe\x4f\x1e\x8a\xe7\xb4\xcd\xa0\xa5\x85\xc4\x95\x4a\xef\x9e\xb2\xec\xbf\x0d\xa5\xaa\x19\xbd\x37\xf7\x07\xab\xfb\xf9\x35\x5e\x96\x30\x1d\x01\x99\xb8\x7f\xe8\xf2\xe6\x10\xc4\x02\x77\xdb\xbc\xda\xd8\xd9\x4e\x21\xfb\x6f\x11\xf3\x23\x3a\x8c\x06\x25\xb4\xe1\xf5\x2c\xe8\x40\xe4\x95\xca\x19\xb0\x29\x6b\x8c\x76\xcd\x78\x38\xfc\x58\x34\x7d\x8c\xe8\x9e\xea\x1e\xdb\xc9\x0f\x3c\xc4\x11\xf7\x73\xbc\x4d\x67\xd7\x81\x95\x48\xb2\x43\xe0\x41\xfd\x06\xaa\x3a\xdf\xd1\x00\xc6\x0e\x95\xbf\xff\xf6\x55\xaf\xf0\x2f\x28\x68\x90\x4e\x60\x3e\x9f\x5f\x0e\xb7\xb2\x59\xdd\xae\x3c\xf2\x72\xe2\x63\x2c\xaf\x0c\xbd\xdf\x25\xfa\x30\xaa\xa8\xe3\x02\xf8\x0b\x0a\x73\x33\x9c\x5f\xa3\xc9\x29\xc4\x28\x42\x12\x4b\xcd\xa5\xb2\x98\xbc\x36\xd5\x5d\xcc\xa8\xb4\x5e\x94\x2e\x98\x0f\x96\xb2\xf4\x72\x21\xb1\xef\x6c\x2e\xa4\x1e\xfb\x49\x3d\x1e\xaf\x49\x3d\x1e\x7f\x58\xea\xb1\xc3\x6a\xe7\x91\x28\xea\xff\x7a\x80\xb2\x2d\x11\x82\xa4\x63\xe7\x79\x0a\xd9\xb7\xed\x33\xa6\x72\xec\xa8\x90\xca\xd9\xda\x27\x8a\x4c\x2a\x53\x70\x61\xb5\xc5\x03\x95\x4a\x66\x55\xcb\xf6\xd5\xae\xa1\x95\xb5\xbe\x4d\xf8\x35\xdb\x24\xe4\x3a\x53\xbd\x46\x59\x38\x98\x4e\xc1\xc9\x00\xa5\x55\xaa\xcd\xce\x5c\x90\x9f\xfd\xd4\x0f\xcb\x9e\x92\x49\xeb\x10\x63\x5c\xcd\xf4\x28\xf6\xd4\x0c\x19\x4f\x76\x21\x78\x7c\x1f\x13\x41\xa5\x65\x64\x9d\x48\xc3\xd7\x90\xa8\xa1\x65\x0d\xb3\x58\x4c\xb3\x97\x11\xb5\xc8\x19\xe6\xaf\xfb\xe2\x40\x78\x0e\xdc\x45\x67\x65\x9c\xe5\xfa\x4a\xc2\x60\xac\x57\xf9\xd5\x6a\x35\x39\x55\x58\x98\x2f\xe6\x52\x24\x21\x51\x31\x61\x9e\xaf\x44\xb4\x8c\x87\x73\x61\xf6\x8a\xe4\x7c\xb9\x54\xb6\x3c\xbd\x36\x39\x95\x66\xbf\x1b\x6c\x59\x12\x45\xa5\x42\xfd\xf3\xc2\x32\x9f\x5f\xdb\xbd\xcb\xa7\xd2\x6b\x4e\xe6\xe3\x28\xb7\xcc\x47\x57\xbd\x3c\xad\x04\x25\xdb\x5a\xae\xce\x53\x42\xff\x48\x0f\xec\x91\x66\x5c\xd9\xa3\x3d\xb0\x47\x7b\x50\x8f\xe0\xa0\x29\xda\x76\x5b\x5b\xb4\x07\x7f\x62\xb4\x07\x1f\x8f\xb6\x73\x30\x2f\x6e\xae\x07\xfb\x67\xe1\x17\xab\xa6\x5e\xd5\x4e\x03\x07\xf6\x89\x54\x7a\x5a\xcb\x02\xf6\x1a\x22\x3b\x69\x64\xbb\x1c\x29\x1b\x84\xb8\x15\x21\xe7\x79\xc1\xd5\x4b\xff\xa4\x9f\x20\x33\x8d\x48\x24\xc2\x0b\xff\x44\x51\xe5\x66\x4b\xc2\xde\x6f\x6f\xfe\x1f\x00\x00\xff\xff\x99\x2c\xf0\x75\x64\x1e\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
