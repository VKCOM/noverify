// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd4\xc1\x8a\xb3\x30\x10\x07\xf0\xbb\xe0\x3b\xcc\x07\xb6\xb4\x7e\xb4\xde\xbb\x56\x77\xef\x85\x3d\xec\xbd\xd4\xda\x71\x9b\x25\x8d\x21\x89\x54\xd9\xee\xbb\x2f\x31\x58\x2a\x84\x9a\x1c\xf6\xa2\xf8\x67\x66\x7e\x86\xc0\xa4\x39\x3f\xf3\x30\x08\x83\x24\x8e\xc3\x00\x62\x78\x65\x35\x61\x92\x63\xa9\x48\xcd\xe0\x6d\xb7\x33\x29\x25\x4c\xa1\x80\x13\x91\xc5\x91\xa2\xce\x12\xdd\x55\x35\xcc\x14\x2a\x14\xac\x10\xdd\x07\xb9\x70\x4a\xaa\x6e\xb1\x84\xef\x30\x00\x30\x53\x41\x4f\xb8\x14\xdd\x11\xa1\xac\x1b\x7a\x02\x81\x9c\x16\x25\x82\x3a\xe3\xd0\x09\x57\xa2\xce\xf0\xd5\x48\x05\x51\x59\xb3\xd3\xd0\xa6\x3a\x8e\x70\xac\x6b\xfa\x18\x27\xfa\xd5\x7f\x43\x0e\x4a\x34\x08\x1b\xa8\x0a\x2a\xf1\x45\xff\xd4\x13\xf6\x2a\x88\x42\x28\x24\x1c\x16\x7a\xe6\xb2\x9f\x71\x18\x59\xff\xfe\x00\x8b\x5a\xc8\x37\x10\x75\x77\xa9\x22\x2d\x0c\xe1\x90\xf1\x46\x20\x44\xed\x23\xda\x42\xae\x1f\xba\xca\x0f\xcb\x6d\x58\x7e\xc7\xfa\xe9\x44\x4a\x54\x8b\xa8\x5d\x8e\x90\x9f\xd1\xb5\x16\x52\x92\x4f\xf6\xce\x27\xef\x73\xc4\xff\xdf\x5a\xf8\x3e\x7c\x7a\xd6\x6d\x5f\xe6\x7b\xd6\x95\x0d\x5b\xb9\x61\x2b\x5f\x2c\xb6\x61\xb1\x1b\x16\xfb\x62\x89\x0d\x4b\xdc\xb0\xc4\x17\x9b\xd9\xb0\x99\x1b\x36\xf3\xc5\xe6\x36\x6c\xee\x86\xcd\x7d\xb1\x9b\x0d\xbb\xb9\x61\x37\x5f\x6c\x6f\xc3\xf6\x6e\xd8\xde\x17\x4b\x53\x9b\x66\xd2\x69\x2e\x4d\x7d\xbd\x2c\xb3\x79\x26\x9d\xf6\xb2\xcc\xd7\x5b\xdb\xb8\xb5\x9b\xb6\xf6\xdf\x99\x36\xcd\xa4\xd3\x5c\xbf\x5c\xcd\xfa\xfc\x0d\x00\x00\xff\xff\x53\x84\xf1\x97\x53\x07\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
