// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x99\x5b\x8f\xdb\x36\x16\xc7\xdf\x07\x98\xef\x70\x6c\x28\x8e\x3d\xf5\x65\x83\xbe\x65\x7c\xe9\x6e\x9f\x16\x08\x36\x40\x17\x7d\x5a\x24\x1e\x4a\x3a\xb2\xd8\x91\x49\x2d\x49\x65\xac\x8d\xe7\xbb\x2f\x28\x4a\xb2\x2c\xd1\xba\x64\xda\x02\x9d\xd8\xe4\xe1\xf9\xfd\x79\x0e\xef\x5e\xef\xe2\x30\xbe\xbf\xbb\xbf\x5b\x3d\x3c\xdc\xdf\xc1\x03\xfc\xc2\x38\x65\x32\x46\x4f\x51\xce\xe0\xef\x9f\x3e\x99\xd2\x88\x32\x85\x02\xcc\x7f\x3e\x95\xc4\x8d\x50\xd7\xac\xae\xda\x7a\xfc\x78\x44\xa6\xe0\x37\x8c\xb9\x50\xa0\x50\x30\x22\x52\xc0\x53\x2c\x50\x4a\xca\x99\x04\x15\x12\x05\x1e\x61\xe0\x22\x48\x7a\x8c\x23\x1a\x50\xf4\x97\xa6\xbd\x8b\x01\x17\x08\xe0\x9c\x60\xa7\xff\x7c\x04\x27\x35\x35\x24\x30\x78\x5d\x53\x94\xae\xee\xef\x82\x84\x19\xa1\x39\xea\xdf\xc6\x63\x3a\x9d\xc1\xf7\xfb\x3b\x00\xa3\x0c\xb4\x87\x23\x49\x5d\x04\x8f\x27\x91\x0f\x02\xe3\x88\x78\x08\x2a\xc4\x52\xe4\x0b\x55\x21\xfc\x91\x48\x05\x8e\xc7\x99\x5f\x34\x53\x69\x8c\xe0\x72\x1e\x55\x8b\x57\xfa\x9f\xec\x3b\xec\x40\x89\x04\xe1\x23\x04\x24\x92\xf8\xa8\xc3\xd1\x82\x7d\x11\x54\x21\x10\x09\x4f\x53\xed\x73\x96\xf9\x78\xba\x62\xc1\xe8\x2f\xa0\x15\x61\x2b\x51\x01\x3d\x55\x63\x99\x95\xc5\x89\x40\x70\x4e\x55\x68\x25\x0f\xc3\x60\x3b\x1b\x6c\x57\xc2\x32\xef\x54\x4a\x54\x53\xe7\x34\xbb\x82\xbc\xb6\x8d\xa8\x98\x2b\x64\x8a\x92\x08\x78\x8c\x82\x64\xa9\x8f\x05\x7a\xe8\x23\xf3\x50\x7b\x4c\x50\x36\x07\xd3\x04\x9c\x23\x91\xcf\xb0\xd9\xc0\xdf\x1e\x61\xb5\xd2\x1f\x42\x22\x21\xa4\x87\x10\x45\xd5\x83\x0a\x09\x83\xc9\xf5\x98\x9b\x5e\x3c\xcc\x32\x17\xf5\xc1\x77\x69\x5f\x8e\xbb\x15\xfc\x8b\x2b\xfc\x08\x2f\xa8\x07\x9b\x96\xfe\x54\xd1\x31\xda\xe8\xf0\xe8\x60\x91\x86\x7c\xc0\x6f\xc8\x72\x1f\x34\x00\x5a\xce\x16\x8f\x24\x87\x50\x99\x71\xfa\xa4\x87\x8a\x17\xa2\xf7\xfc\x39\x7e\xca\xe7\x94\xfe\x26\xc1\xe5\x2a\x34\xc1\x31\xc3\x67\xb5\x02\x6d\x2b\x21\x1b\x70\x40\x25\x30\xae\x80\xc0\x81\x73\xbf\xb0\x83\x80\x0b\x70\xa9\x7a\xa1\x12\x2f\x81\x9d\x2d\x4d\xfb\xdc\x8b\xc9\x00\x65\x07\x78\xa2\xec\x1b\x89\xa8\x6f\x1c\xcf\xf5\xf4\x46\x4f\xa1\x0f\x2c\x39\xba\x28\x20\xe0\x09\xf3\xb3\x39\xf3\x04\x54\xe6\xcd\x35\x35\xd3\x19\x62\x14\x07\x49\x34\x07\x17\x3d\x92\x48\x33\x09\x05\xe7\x0a\x78\x90\x7d\x8e\x05\x77\x23\x3c\x6a\xa9\x97\xd8\xe4\x5a\xe0\x9f\x55\x34\x10\x81\x40\x40\xa0\x4c\xa2\xbc\x39\x51\xcb\x72\x9c\xc2\x2f\x2f\x44\x30\xad\xb8\x23\xdd\xf9\x78\x24\x2c\xdd\xe3\x7f\xf7\x2e\x55\x84\xf9\x1f\x4d\x22\x01\x9c\xbd\x6e\xee\xec\x75\xf2\xf6\x8f\x65\xd9\xa4\xac\xc8\xca\x5e\x1b\xcc\x51\x6f\x26\xb3\x42\x47\xb7\xa0\xa3\x16\xe8\x66\x48\x4f\x7f\xb6\x76\xf5\x76\x5f\x5b\x3b\x3b\xa4\xb7\x36\xf0\xe8\x26\x78\x74\x05\x1e\x98\xdb\x73\x23\xb7\x5c\x34\x53\x7b\xbe\xa2\x9e\xdf\x96\xda\x73\x33\xb5\xd7\xcc\xd1\x2d\xe6\x1b\x32\x7b\x6e\x66\xb6\xde\xd1\xdb\x3d\xfd\xf1\xc4\x9e\x2d\x89\xad\x77\xf6\x76\x6f\x3b\xf2\xda\x4a\xde\xed\x8a\x3d\xaa\xec\x9b\xde\x5f\xf6\x8f\x16\x57\x1d\x9d\xa8\xba\x1a\x75\xb8\x1a\x22\xaa\x43\x53\x7f\x49\xad\x8e\xb6\x7d\xfd\x6c\xdb\xdd\xf4\xd6\xb3\x6d\xd7\xb3\xee\xeb\x67\xdd\xee\xa6\xb7\x9e\xf5\x95\x9e\xd6\xe3\x03\x91\x92\x1e\x98\x2e\xe9\x7f\x10\xdd\xe8\x3f\x3f\x99\xb3\x49\xed\x24\xfa\xd3\xa6\x28\xae\x9e\x06\x0c\xe4\x73\xdc\x79\x06\xbd\x3a\x31\x65\xbe\xea\x27\xa6\xac\xb0\xf5\x78\x56\x55\xd7\x1f\xb6\xb0\xc1\x16\xfd\x60\x8b\xa1\xb0\x07\x1b\xec\xa1\x1f\xec\x61\x28\x6c\x65\x83\xad\xfa\xc1\x56\x43\x61\xef\x6c\xb0\x77\xfd\x60\xef\x86\xc2\x26\x36\xd8\xa4\x1f\x6c\x32\x14\x76\xb6\xc1\xce\xfd\x60\xe7\xa1\xb0\xaf\x36\xd8\xd7\x7e\xb0\xaf\x43\x61\xeb\xb5\x8d\x66\x4a\xbb\x71\xeb\xf5\x50\xde\x76\x6b\xe3\x99\xd2\x6e\xde\x76\x3b\x94\xb7\xb4\xe1\x96\xfd\x68\xcb\xe1\xd7\x3c\x1b\xcd\x94\x76\xe3\xb2\xfb\xe0\x80\x1b\x5f\x10\x2c\xdc\x74\xc1\x19\xc2\x91\x4a\x45\x9e\x9b\x37\x3d\xf2\x1f\x8f\x27\x4c\x4d\x1d\x32\xfb\x52\x5b\xad\x2b\x55\x8b\x0f\x5f\xea\x6b\x36\x0f\x82\x7f\xa4\x1f\x2c\x2b\x76\xb1\x1d\xe9\x4b\x09\x71\xa3\x14\x28\x53\xc8\x7c\xf4\x41\x71\xd0\xb7\x97\xcc\xeb\xe2\x43\x76\x97\x63\x40\x99\x8f\xa7\x6a\x38\xa0\xc6\x86\x05\x64\xf4\x32\x16\x55\xc9\xcd\xd8\x77\xe2\x25\xfd\x1f\xf2\xa0\x93\x6f\xcc\x6e\x08\xb8\x54\x7e\xe9\xca\x86\x4c\x64\x4c\x3d\xca\x13\x7d\xf7\x3a\x24\x66\x27\xe5\xc2\x47\x51\x4b\x85\x54\x22\xe6\x72\xfa\x7e\xf5\x7e\x0e\x8e\x9c\x5d\x27\x23\xaf\x74\xe4\x1c\xde\xaf\xde\xcf\x1a\x1b\xa8\x38\xc8\xcf\xda\x67\x5b\x3e\x8a\x61\x91\xc5\xc4\xe3\x42\xa0\xa7\x20\x24\xa9\x54\xc4\x7b\x06\x7d\xa9\x65\x88\x7e\x84\x75\x9d\x95\xae\xeb\x43\x6b\xd1\x62\x6f\xac\xcb\x93\x6b\x21\xf1\xfb\xd8\x0b\x89\x18\xbf\xce\xc1\xf9\x3e\x7e\x18\xbf\xce\x1e\xcb\x7a\xda\x65\xd0\xe1\x21\x71\xa5\x12\xfb\x3c\xfb\xdf\xc7\x52\x35\x8c\x5e\x6f\x8f\x07\x6b\xf7\xf3\x67\xad\x2c\x61\x3a\x02\x32\x71\xff\xd0\xe5\xb7\x43\x10\x0b\x3c\xec\xf3\x66\x53\x67\x3f\x87\xec\x7f\x8b\x98\x1f\xd1\x61\x34\x28\xa1\x0d\xdb\xb3\xa0\x03\x91\x37\xaa\x66\xc0\xa6\xec\x66\xb4\x1b\xc6\xe3\xf1\xdb\xa2\xe9\x63\x44\x8f\x54\x8f\xd8\x5e\xfd\xc0\x53\x1c\x71\x3f\xc7\xdb\x74\xf6\x9d\x58\x89\x24\x07\x04\x1e\x34\x5f\x64\xea\xeb\x1d\x0d\x60\xea\x50\xf9\xfb\x6f\x9f\xf4\x0e\xff\x0d\x05\x0d\xd2\x19\x2c\x97\xcb\xeb\xe9\x56\x35\x6b\xda\x55\x67\x5e\x4e\xfc\x1c\xcb\x96\xa9\xf7\xbb\x44\x1f\x26\x35\x75\x5c\x00\xff\x86\xc2\xbc\x94\xe6\xcf\x4a\x72\x0e\x31\x8a\x90\xc4\x52\x73\xa9\x2c\x17\xaf\x5d\xfd\x14\x33\xa9\xec\x17\x95\x07\xd7\x93\xa5\x2c\xbd\xde\x48\xec\x27\x9b\x2b\xa9\xe7\x61\x52\xcf\xe7\x36\xa9\xe7\xf3\x0f\x4b\x3d\xf7\xd8\xed\x3c\x12\x45\xc3\x9f\xcb\x29\xdb\x13\x21\x48\x3a\x75\x9e\xe7\x90\x7d\xda\x3f\x63\x2a\xa7\x8e\x0a\xa9\x5c\x6c\x7d\xa2\xc8\xac\xb6\x04\x97\x56\x7b\x3c\x51\xa9\x64\xd6\xb4\x6a\x5f\x1f\x1a\x5a\x59\xe7\xeb\xfa\xaf\xd9\x21\x21\xd7\x99\xea\x3d\xca\xc2\xc1\x74\x0e\x4e\x06\xa8\xec\x52\x5d\x76\xe6\xc1\xf8\xd2\x4f\x5d\x59\xed\x29\x99\x75\x4e\x31\xc6\xd5\x42\xcf\x62\x4f\x2d\x90\xf1\xe4\x10\x82\xc7\x8f\x31\x11\x54\x5a\x66\x56\x41\x1a\xbf\x84\x44\x8d\x2d\x7b\x98\xc5\x62\x9e\x3d\xce\x37\x22\x67\x98\xbf\x1e\xcb\x0b\xe1\x25\x70\x57\x83\x95\x71\x96\xeb\xab\x08\x83\xa9\xde\xe5\x37\x9b\xcd\xac\x68\xb0\x32\x1f\xcc\x43\x4f\x42\xa2\x72\xc1\xbc\xbc\x68\x69\x19\x8f\x97\xc2\xec\x27\x83\xcb\x63\x4b\xd5\xb2\xf8\x19\xa1\x28\xcd\xbe\xdf\xb0\x65\x49\x14\x55\x0a\xf5\xd7\x2b\xcb\x7c\x7d\xed\xee\x5d\xbe\x94\xb6\x75\x32\x9f\x47\xb9\x65\x3e\xbb\x9a\xe5\x69\x2d\x28\xd9\xd1\x72\x73\x59\x12\x86\x47\x7a\x64\x8f\x34\xe3\xca\x1e\xed\x91\x3d\xda\xa3\x66\x04\x47\xb7\xa2\x6d\xb7\xb5\x45\x7b\xf4\x27\x46\x7b\xf4\xf6\x68\x3b\x27\xf3\x43\x46\x7b\xb0\x7f\x16\x7e\xb9\x6b\xea\x5d\xad\x98\x38\x70\x4c\xa4\xd2\xcb\x5a\x16\xb0\x97\x10\x59\xa1\x91\x1d\x72\xa4\xbc\x21\xc4\xad\x09\xb9\xac\x0b\xae\xde\xfa\x67\xc3\x04\x99\x65\x44\x22\x11\x5e\xf8\x27\x8a\xaa\xba\xad\x08\x7b\xbd\xbf\xfb\x7f\x00\x00\x00\xff\xff\x0a\x5b\x9e\xe7\x74\x1d\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
