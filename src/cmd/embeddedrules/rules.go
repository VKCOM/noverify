// Package embeddedrules Code generated for package embeddedrules by go-bindata DO NOT EDIT. (@generated)
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xeb\x6f\xe3\x36\x12\xff\x1e\x20\xff\xc3\xd8\x50\xb3\x76\xea\x47\x82\x3d\xe0\x80\x4d\x9c\xf4\xae\x5f\xee\x80\x45\xb7\x68\xd1\x4f\x8b\xac\x43\x49\x23\x8b\x8d\x4c\xea\x48\x6a\x63\x5d\xec\xff\xfd\x40\xea\x61\x59\xa2\xf5\xd8\xed\x15\x68\xd6\xe6\x63\x7e\xbf\x79\x70\x66\x48\xdf\x3f\xc6\x61\x7c\x79\x71\x79\xb1\xbc\xbe\xbe\xbc\x80\x6b\xf8\x89\x71\xca\x64\x8c\x9e\xa2\x9c\xc1\x3f\x3e\x7e\xcc\x46\x23\xca\x14\x0a\xc8\xfe\xf3\xa9\x24\x6e\x84\x7a\x66\x79\xb2\xd7\xe3\xdb\x2d\x32\x05\xbf\x61\xcc\x85\x02\x85\x82\x11\x91\x02\xee\x62\x81\x52\x52\xce\x24\xa8\x90\x28\xf0\x08\x03\x17\x41\xd2\x6d\x1c\xd1\x80\xa2\xbf\xc8\xf6\xbb\x18\x70\x81\x00\xce\x0e\x1e\xf5\x9f\x0f\xe0\xa4\xd9\x0c\x09\x32\x78\x3d\x53\x8c\x2e\x2f\x2f\x82\x84\x65\x44\x73\xa8\xdf\x33\x89\xe9\x64\x0a\x6f\x97\x17\x00\x19\x33\xd0\x12\xb6\x24\x75\x11\x3c\x9e\x44\x3e\x08\x8c\x23\xe2\x21\xa8\x10\x4b\x92\xaf\x54\x85\xf0\x67\x22\x15\x38\x1e\x67\x7e\xb1\x4d\xa5\x31\x82\xcb\x79\x54\x1d\x5e\xea\x7f\xcc\x77\x78\x04\x25\x12\x84\x0f\x10\x90\x48\xe2\x9d\x36\x47\x0b\xec\xab\xa0\x0a\x81\x48\x78\x9e\x68\x99\x53\x23\xe3\xf9\x04\x0b\x46\xff\x07\xb4\xc2\x6c\x25\x54\x40\x77\x55\x5b\x9a\xb1\x38\x11\x08\xce\xae\x0a\x5a\xf1\xc3\x30\xb0\x47\x1b\xd8\x63\x09\x66\xa4\x53\x29\x51\x4d\x9c\xdd\xf4\x04\xe4\xd0\x16\x51\x31\x57\xc8\x14\x25\x11\xf0\x18\x05\x31\xae\x8f\x05\x7a\xe8\x23\xf3\x50\x4b\x4c\x50\x36\x83\xe9\x0a\x9c\x2d\x91\x2f\xb0\x5a\xc1\xcd\x1d\x2c\x97\xfa\x43\x48\x24\x84\x74\x13\xa2\xa8\x4a\x50\x21\x61\x70\x75\x1a\x73\x93\xa3\x84\xa9\x11\x51\x0f\xbe\xe3\xfe\x32\xee\x96\xf0\x0b\x57\xf8\x01\x5e\x51\x07\x9b\xa6\xfe\x5c\xe1\x31\x5a\x69\xf3\x68\x63\x91\x06\x7d\xc0\xaf\xc8\x72\x19\x34\x00\x5a\x9e\x16\x8f\x24\x9b\x50\x65\x71\xfa\xac\x43\xc5\x0b\xd1\x7b\xf9\x14\x3f\xe7\x67\x4a\x7f\x93\xe0\x72\x15\x66\xc6\xc9\xc2\x67\xb9\x04\xbd\x56\x82\x09\x38\xa0\x12\x18\x57\x40\x60\xc3\xb9\x5f\xac\x83\x80\x0b\x70\xa9\x7a\xa5\x12\x8f\x86\x9d\x2e\xb2\xfd\xb9\x94\xcc\x03\x94\x6d\xe0\x99\xb2\xaf\x24\xa2\x7e\x26\x78\xa6\x8f\x37\x7a\x0a\x7d\x60\xc9\xd6\x45\x01\x01\x4f\x98\x6f\xce\xcc\x33\x50\x99\x6f\xd7\xa8\x86\x67\x88\x51\x1c\x24\xd1\x0c\x5c\xf4\x48\x22\xb3\x43\x28\x38\x57\xc0\x03\xf3\x39\x16\xdc\x8d\x70\xab\xa9\x1e\x6d\x93\x73\x81\x7f\x57\xa1\x81\x08\x04\x02\x02\x65\x12\xe5\xdb\x89\x5a\x94\x71\x0a\x3f\xbd\x12\xc1\x34\xe3\x0e\x77\xe7\xf1\x48\x58\xba\xc6\xff\xac\x5d\xaa\x08\xf3\x3f\x64\x8e\x04\x70\xd6\x7a\xbb\xb3\xd6\xce\x5b\xdf\x95\x63\x57\xe5\x84\x19\x3b\x34\x30\x47\xbd\x31\x99\x15\x74\x74\x0e\x74\xd4\x02\xba\x1a\xa2\xe9\x7b\xab\xaa\xe7\x75\x6d\x55\x76\x88\xb6\x36\xe0\xd1\x59\xe0\xd1\x09\xf0\x40\xdf\xee\x1b\xbe\xe5\xa2\xe9\xda\xfd\x09\xea\xfe\xfb\x5c\xbb\x6f\xba\xf6\x14\x73\x74\x0e\xf3\x3b\x3c\xbb\x6f\x7a\xb6\xae\xe8\x79\x4d\xbf\xdd\xb1\x7b\x8b\x63\xeb\xca\x9e\xd7\xb6\xc3\xaf\xad\xc8\x8f\x8f\x45\x8d\x2a\x75\xd3\xf5\x65\x7d\x67\x11\xd5\xa1\x44\x55\xd4\xa8\x43\xd4\x10\x52\x1d\x9c\xfa\x53\x6a\x15\xf4\xd0\x57\xce\x43\xbb\x98\xde\x7c\x1e\xda\xf9\xdc\xf7\x95\x73\xdf\x2e\xa6\x37\x9f\xfb\x13\x3e\xad\xed\x03\x91\x92\x6e\x98\x1e\xe9\xdf\x88\xae\xf4\x9f\x1f\xb3\xde\xa4\xd6\x89\xfe\xb8\x2a\x86\xab\xdd\x40\x06\xf2\x29\xee\xec\x41\x4f\x3a\x26\x23\xab\xde\x31\x99\xc1\xd6\xf6\xac\xca\xae\x3f\xd8\xdc\x06\x36\xef\x07\x36\x1f\x0a\x76\x6d\x03\xbb\xee\x07\x76\x3d\x14\x6c\x69\x03\x5b\xf6\x03\x5b\x0e\x05\xfb\xc1\x06\xf6\x43\x3f\xb0\x1f\x86\x82\x5d\xd9\xc0\xae\xfa\x81\x5d\x0d\x05\xdb\xdb\xc0\xf6\xfd\xc0\xf6\x43\xc1\xbe\xd8\xc0\xbe\xf4\x03\xfb\x32\x14\xec\xfe\xde\x86\x96\x8d\x76\xc3\xdd\xdf\x0f\xc5\x7b\x78\xb0\xe1\x65\xa3\xdd\x78\x0f\x0f\x43\xf1\x16\x36\xb8\x45\x3f\xb4\xc5\xf0\x6b\x9e\x0d\x2d\x1b\xed\x86\x33\xf7\xc1\x01\x37\xbe\x20\x98\xbb\xe9\x9c\x33\x84\x2d\x95\x8a\xbc\x34\x6f\x7a\xe4\xb3\xc7\x13\xa6\x26\x0e\x99\x3e\xd5\xb2\x75\x65\x6a\x7e\xfb\x54\xcf\xd9\x3c\x08\xfe\x99\xde\x5a\x32\x76\x51\x8e\xf4\xa5\x84\xb8\x51\x0a\x94\x29\x64\x3e\xfa\xa0\x38\xe8\xdb\x8b\x91\x3a\xbf\x35\x77\x39\x06\x94\xf9\xb8\xab\x9a\x03\x6a\xd8\x30\x07\x83\x5e\xda\xa2\x4a\xb9\x69\xfb\x4e\x78\x49\xff\x8b\x3c\xe8\xc4\xcf\x96\x9d\x21\x70\x9c\x7c\xea\xf2\x86\x4c\x64\x4c\x3d\xca\x13\x7d\xf7\xda\x24\x59\x25\xe5\xc2\x47\x51\x73\x85\x54\x22\xe6\x72\xf2\x6e\xf9\x6e\x06\x8e\x9c\x9e\x3a\x23\x9f\x74\xe4\x0c\xde\x2d\xdf\x4d\x1b\x05\x54\x6c\xe4\x27\x2d\xb3\xcd\x1f\x45\x58\x18\x9b\x78\x5c\x08\xf4\x14\x84\x24\x95\x8a\x78\x2f\xa0\x2f\xb5\x0c\xd1\x8f\xb0\xce\xb3\xa2\xba\x6e\x5a\x8b\x1d\xeb\x6c\x75\xd9\xb9\x16\x14\xdf\xc6\x5e\x48\xc4\xf8\x30\x03\xe7\x6d\x7c\x3d\x3e\x4c\xef\xca\x79\xda\xb5\xa0\x43\x42\xe2\x4a\x25\xd6\xb9\xf7\xdf\xc6\x52\x35\x16\x1d\xce\xc7\x83\x55\xfd\xfc\x59\xcb\x38\x4c\x5b\x40\x26\xee\x9f\x7a\xfc\xbc\x09\x62\x81\x9b\x75\xbe\x6d\xe2\xac\x67\x60\xfe\xb7\x90\xf9\x16\x1e\x19\x07\x25\xf4\xc2\x76\x2f\x68\x43\xe4\x9b\xaa\x1e\xb0\x31\x3b\x6b\xed\xc6\xe2\xf1\xf8\xfb\xac\xe9\x63\x44\xb7\x54\x47\x6c\x2f\x3d\x70\x17\x47\xdc\xcf\xe1\x6d\x3c\xfb\x1e\xac\x44\x92\x0d\x02\x0f\x9a\x2f\x32\xf5\x7c\x47\x03\x98\x38\x54\xfe\xf1\xdb\x47\x5d\xe1\xbf\xa2\xa0\x41\x3a\x85\xc5\x62\x71\x7a\xdc\xaa\xcb\x9a\xeb\xaa\x27\x2f\x47\xfc\x14\xcb\x96\xa3\xf7\x87\x44\x1f\xae\x6a\xec\xb8\x00\xfe\x15\x45\xf6\x52\x9a\x3f\x2b\xc9\x19\xc4\x28\x42\x12\x4b\x8d\x4b\x65\x99\xbc\x1e\xeb\x5d\xcc\x55\xa5\x5e\x54\x1e\x5c\x77\x96\xb1\xf4\xb4\x90\xd8\x3b\x9b\x13\xaa\xfb\x61\x54\xf7\xfb\x36\xaa\xfb\xfd\x37\x53\xdd\xf7\xa8\x76\x1e\x89\xa2\xe1\xcf\xe5\x94\xad\x89\x10\x24\x9d\x38\x2f\x33\x30\x9f\xd6\x2f\x98\xca\x89\xa3\x42\x2a\xe7\x0f\x3e\x51\x64\x5a\x4b\xc1\xe5\xaa\x35\xee\xa8\x54\xd2\x6c\xad\xae\xaf\x87\x86\x66\xd6\xf9\xba\xfe\xb3\x69\x12\x72\x9e\xa9\xae\x51\x16\x1c\x4c\x67\xe0\x18\x80\x4a\x95\xea\x5a\x97\x3d\x18\x1f\xf5\xd4\x93\x55\x4d\xc9\xb4\xf3\x88\x31\xae\xe6\xfa\x14\x7b\x6a\x8e\x8c\x27\x9b\x10\x3c\xbe\x8d\x89\xa0\xd2\x72\xb2\x0a\xa4\xf1\x6b\x48\xd4\xd8\x52\xc3\x2c\x2b\x66\xe6\x71\xbe\x61\xb9\x0c\xf3\xe7\x6d\x79\x21\x3c\x1a\xee\x24\x58\x19\x67\x39\xbf\x0a\x31\x98\xe8\x2a\xbf\x5a\xad\xa6\xc5\x86\x65\xf6\x21\x7b\xe8\x49\x48\x54\x26\xcc\xe3\x8b\x96\xa6\x71\x77\x1c\x34\x3f\x19\x1c\x1f\x5b\xaa\x2b\x8b\x9f\x11\x8a\x51\xf3\xfd\xcc\x5a\x96\x44\x51\x65\x50\x7f\x3d\x59\x99\xe7\xd7\x6e\xed\xf2\x54\xda\xa6\x64\x7e\x8e\xf2\x95\xf9\xe9\x6a\x8e\xa7\x35\xa3\x98\xd6\x72\x75\x4c\x09\xc3\x2d\x3d\xb2\x5b\x9a\x71\x65\xb7\xf6\xc8\x6e\xed\x51\xd3\x82\xa3\x73\xd6\xb6\xaf\xb5\x59\x7b\xf4\x17\x5a\x7b\xf4\xfd\xd6\x76\x76\xd9\x0f\x19\xed\xc6\x7e\x2f\xfc\xb2\x6a\xea\xaa\x56\x1c\x1c\xd8\x26\x52\xe9\xb4\x66\x0c\xf6\x1a\x22\x2b\x38\xb2\x4d\x0e\x29\xcf\x10\x71\x6b\x44\x8e\x79\xc1\xd5\xa5\x7f\x3a\x8c\x50\x96\x46\x24\x12\xe1\x85\x7f\x21\xa9\xaa\xd8\x0a\xb1\xd6\x14\xa5\x42\x34\x5d\x3d\x0f\xc0\x4b\x44\x94\x82\x2b\x88\x87\xd2\xfc\x3e\x63\x5a\x7b\xca\x36\x8d\x17\xaa\xb7\x9b\x43\xfd\x65\xea\xf3\x4d\xe3\x86\x53\x6c\xff\x3d\x65\x8a\xec\x3a\x52\x11\x79\xa3\x87\x72\x87\x2e\x87\x3e\xc6\x02\x3d\xa2\x50\x67\x77\xe6\x21\xfc\xfa\xaf\x5f\xe1\xef\x8b\xbf\xcd\x0c\x5d\xf2\x99\x3e\x01\x65\x52\x21\xf1\x8f\xc2\xb2\x8a\xf9\xd9\x49\x9f\x1a\x71\xf3\xe6\xa4\x87\x2e\x5b\x24\xd2\x30\x61\xa6\x14\x6f\xcc\xcf\x4a\x02\x9c\x5a\x53\xaf\x2d\x25\x95\xb8\x86\x42\xcf\x7a\x22\xcf\xfb\xf8\x71\x88\x51\xc4\xc7\x33\xb8\xbd\xb1\xdf\x45\xca\x05\x5e\x28\x26\xb7\x37\xd3\x46\x16\xa7\x4c\xfd\x62\xb0\x3b\x4c\x57\x35\xcf\xfb\x19\xc4\x44\x1a\x3d\xb4\x67\x29\x53\x10\x13\x41\xb6\xa8\xa1\x73\x4d\x14\x2f\x22\x28\x8f\xc0\x52\x13\xf3\xfe\xe9\x22\xb2\x8a\xf5\x67\xe0\x11\xa9\x80\x2a\xd3\x6e\x52\x8f\xaa\x28\xad\x88\xe0\x02\x5e\x05\x89\xf5\x3c\x65\x40\x8c\x32\x53\x38\xa9\xe1\xb5\xe8\xd5\x9c\x8e\x07\xfe\x98\xf1\x4e\xf2\x5c\x71\x19\xd2\x9d\xed\x6e\x7a\x77\x32\x71\x7e\x86\x9e\xdf\x73\x7e\x4a\x2a\x61\x9f\xd0\xaa\xd8\x85\x9d\x9d\xa1\x4d\x61\x07\x13\x74\xff\x0b\x00\x00\xff\xff\xb4\x8c\x23\x3d\xf5\x20\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
