// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x6d\x6f\xe3\x36\x12\xfe\x1e\x20\xff\x61\x6c\x68\xb3\x76\xea\x97\x5d\xf4\x80\x03\x36\x71\xd2\xbb\x7e\xb9\x03\x16\xb7\x45\x8b\x7e\x5a\x64\x1d\x4a\x1a\x59\x6c\x64\x52\x47\x52\x1b\xeb\xe2\xfc\xf7\x03\x49\x59\x96\x25\x5a\x2f\xbb\x6d\x81\x66\xed\xe1\x70\x9e\x67\x5e\xc8\x21\xe9\xdb\xfb\x34\x4e\x2f\x2f\x2e\x2f\x96\xd7\xd7\x97\x17\x70\x0d\x3f\x31\x4e\x99\x4c\x31\x50\x94\x33\xf8\xc7\xc7\x8f\x56\x9a\x50\xa6\x50\x80\xfd\x2f\xa4\x92\xf8\x09\xea\x91\xe5\xc9\xdc\x80\x6f\xb7\xc8\x14\xfc\x8a\x29\x17\x0a\x14\x0a\x46\x44\x0e\xb8\x4b\x05\x4a\x49\x39\x93\xa0\x62\xa2\x20\x20\x0c\x7c\x04\x49\xb7\x69\x42\x23\x8a\xe1\xc2\xce\xf7\x31\xe2\x02\x01\xbc\x1d\xdc\xeb\x3f\x1f\xc0\xcb\xed\x08\x89\x2c\xbc\x1e\x39\x48\x97\x97\x17\x51\xc6\x2c\xd1\x02\xea\x37\x6b\x31\x9f\x4c\xe1\xe5\xf2\x02\xc0\x32\x03\x6d\x61\x4b\x72\x1f\x21\xe0\x59\x12\x82\xc0\x34\x21\x01\x82\x8a\xb1\x24\xf9\x4c\x55\x0c\x7f\x64\x52\x81\x17\x70\x16\x1e\xa6\xa9\x3c\x45\xf0\x39\x4f\xaa\xe2\xa5\xfe\xc7\x7c\x87\x7b\x50\x22\x43\xf8\x00\x11\x49\x24\xde\xe8\x70\xb4\xc0\x3e\x0b\xaa\x10\x88\x84\xc7\x89\xb6\x39\x35\x36\x1e\x4f\xb0\x60\xf4\x17\xa0\x1d\xc2\x56\x42\x45\x74\x57\x8d\xa5\x91\xa5\x99\x40\xf0\x76\x55\xd0\x4a\x1e\x86\x81\xdd\xbb\xc0\xee\x4b\x30\x63\x9d\x4a\x89\x6a\xe2\xed\xa6\x27\x20\xaf\x6d\x15\x95\x72\x85\x4c\x51\x92\x00\x4f\x51\x10\x93\xfa\x54\x60\x80\x21\xb2\x00\xb5\xc5\x0c\x65\xb3\x98\xae\xc0\xdb\x12\xf9\x04\xab\x15\xbc\xbb\x81\xe5\x52\x7f\x88\x89\x84\x98\x6e\x62\x14\x55\x0b\x2a\x26\x0c\xae\x4e\x6b\x6e\x72\xb4\x30\x35\x26\xea\xc5\x77\x9c\x5f\xd6\xdd\x12\xfe\xc3\x15\x7e\x80\x67\xd4\xc5\xa6\xa9\x3f\x56\x78\x8c\x56\x3a\x3c\x3a\x58\xa4\x41\x1f\xf0\x2b\xb2\xc2\x06\x8d\x80\x96\xab\x25\x20\xd9\x26\x56\xb6\x4e\x1f\x75\xa9\x04\x31\x06\x4f\x9f\xd2\xc7\x62\x4d\xe9\x6f\x12\x7c\xae\x62\x1b\x1c\x5b\x3e\xcb\x25\x68\x5d\x09\xa6\xe0\x80\x4a\x60\x5c\x01\x81\x0d\xe7\xe1\x41\x0f\x22\x2e\xc0\xa7\xea\x99\x4a\x3c\x06\x76\xba\xb0\xf3\x0b\x2b\x36\x03\x94\x6d\xe0\x91\xb2\xaf\x24\xa1\xa1\x35\x3c\xd3\xcb\x1b\x03\x85\x21\xb0\x6c\xeb\xa3\x80\x88\x67\x2c\x34\x6b\xe6\x11\xa8\x2c\xa6\x6b\x54\xc3\x33\xc6\x24\x8d\xb2\x64\x06\x3e\x06\x24\x93\x76\x11\x0a\xce\x15\xf0\xc8\x7c\x4e\x05\xf7\x13\xdc\x6a\xaa\xc7\xd8\x14\x5c\xe0\xdf\x55\x68\x20\x02\x81\x80\x40\x99\x25\xc5\x74\xa2\x16\x65\x9d\xc2\x4f\xcf\x44\x30\xcd\xb8\x23\xdd\x45\x3d\x12\x96\xaf\xf1\xbf\x6b\x9f\x2a\xc2\xc2\x0f\x36\x91\x00\xde\x5a\x4f\xf7\xd6\x3a\x79\xeb\x9b\x52\x76\x55\x0e\x18\xd9\x6b\x03\x73\xd4\x1b\x93\x39\x41\x47\xe7\x40\x47\x2d\xa0\xab\x21\x9e\xfe\xe8\x74\xf5\xbc\xaf\xad\xce\x0e\xf1\xd6\x05\x3c\x3a\x0b\x3c\x3a\x01\x1e\x98\xdb\x7d\x23\xb7\x5c\x34\x53\xbb\x3f\x41\xdd\x7f\x5f\x6a\xf7\xcd\xd4\x9e\x62\x8e\xce\x61\x7e\x47\x66\xf7\xcd\xcc\xd6\x1d\x3d\xef\xe9\xb7\x27\x76\xef\x48\x6c\xdd\xd9\xf3\xde\x76\xe4\xb5\x15\xf9\xfe\xfe\xd0\xa3\x4a\xdf\x74\x7f\x59\xdf\x38\x4c\x75\x38\x51\x35\x35\xea\x30\x35\x84\x54\x07\xa7\xfe\x94\x5a\x0d\xdd\xf5\xb5\x73\xd7\x6e\xa6\x37\x9f\xbb\x76\x3e\xb7\x7d\xed\xdc\xb6\x9b\xe9\xcd\xe7\xf6\x84\x4f\xeb\xf1\x81\x48\x49\x37\x4c\x4b\xfa\x1f\x44\x57\xfa\xcf\x0f\xf6\x6c\x52\x3b\x89\xfe\xb0\x3a\x88\xab\xa7\x01\x0b\xf2\x29\xed\x3c\x83\x9e\x9c\x98\x8c\xad\xfa\x89\xc9\x08\x5b\x8f\x67\x55\x76\xfd\xc1\xe6\x2e\xb0\x79\x3f\xb0\xf9\x50\xb0\x6b\x17\xd8\x75\x3f\xb0\xeb\xa1\x60\x4b\x17\xd8\xb2\x1f\xd8\x72\x28\xd8\x1b\x17\xd8\x9b\x7e\x60\x6f\x86\x82\x5d\xb9\xc0\xae\xfa\x81\x5d\x0d\x05\xdb\xbb\xc0\xf6\xfd\xc0\xf6\x43\xc1\xbe\xb8\xc0\xbe\xf4\x03\xfb\x32\x14\xec\xf6\xd6\x85\x66\xa5\xdd\x70\xb7\xb7\x43\xf1\xee\xee\x5c\x78\x56\xda\x8d\x77\x77\x37\x14\x6f\xe1\x82\x5b\xf4\x43\x5b\x0c\xbf\xe6\xb9\xd0\xac\xb4\x1b\xce\xdc\x07\x07\xdc\xf8\xa2\x68\xee\xe7\x73\xce\x10\xb6\x54\x2a\xf2\xd4\xbc\xe9\x91\xcf\x01\xcf\x98\x9a\x78\x64\xfa\x50\xdb\xad\x2b\x43\xf3\xf7\x0f\xf5\x3d\x9b\x47\xd1\x3f\xf3\xf7\x8e\x1d\xfb\xd0\x8e\xf4\xa5\x84\xf8\x49\x0e\x94\x29\x64\x21\x86\xa0\x38\xe8\xdb\x8b\xb1\x3a\x7f\x6f\xee\x72\x0c\x28\x0b\x71\x57\x0d\x07\xd4\xb0\x61\x0e\x06\xbd\x8c\x45\x95\x72\x33\xf6\x9d\xf0\x92\xfe\x0f\x79\xd4\x89\x6f\xd5\xce\x10\x38\x0e\x3e\x74\x65\x43\x66\x32\xa5\x01\xe5\x99\xbe\x7b\x6d\x32\xdb\x49\xb9\x08\x51\xd4\x52\x21\x95\x48\xb9\x9c\xbc\x5d\xbe\x9d\x81\x27\xa7\xa7\xc9\x28\x06\x3d\x39\x83\xb7\xcb\xb7\xd3\x46\x03\x15\x1b\xf9\x49\xdb\x6c\xcb\xc7\xa1\x2c\x4c\x4c\x02\x2e\x04\x06\x0a\x62\x92\x4b\x45\x82\x27\xd0\x97\x5a\x86\x18\x26\x58\xe7\x59\x71\x5d\x1f\x5a\x0f\x33\xd6\x56\xbb\x3c\xb9\x1e\x28\xbe\x8c\x83\x98\x88\xf1\xeb\x0c\xbc\x97\xf1\xf5\xf8\x75\x7a\x53\x8e\xd3\x2e\x85\x0e\x0b\x99\x2f\x95\x58\x17\xd9\x7f\x19\x4b\xd5\x50\x7a\x3d\x5f\x0f\x4e\xf7\x8b\x67\x2d\x93\x30\x1d\x01\x99\xf9\x7f\x68\xf9\xf9\x10\xa4\x02\x37\xeb\x62\xda\xc4\x5b\xcf\xc0\xfc\xef\x20\xf3\x2d\x3c\x2c\x07\x25\xb4\x62\x7b\x16\x74\x20\x8a\x49\xd5\x0c\xb8\x98\x9d\x8d\x76\x43\x79\x3c\xfe\xbe\x68\x86\x98\xd0\x2d\xd5\x15\xdb\xcb\x0f\xdc\xa5\x09\x0f\x0b\x78\x17\xcf\xbe\x0b\x2b\x93\x64\x83\xc0\xa3\xe6\x8b\x4c\x7d\xbf\xa3\x11\x4c\x3c\x2a\x7f\xff\xf5\xa3\xee\xf0\x5f\x51\xd0\x28\x9f\xc2\x62\xb1\x38\x5d\x6e\x55\xb5\xa6\x5e\x75\xe5\x15\x88\x9f\x52\xd9\xb2\xf4\x7e\x97\x18\xc2\x55\x8d\x1d\x17\xc0\xbf\xa2\xb0\x2f\xa5\xc5\xb3\x92\x9c\x41\x8a\x22\x26\xa9\xd4\xb8\x54\x96\x9b\xd7\x7d\xfd\x14\x73\x55\xe9\x17\x95\x07\xd7\x9d\x43\x96\x9f\x36\x12\xf7\xc9\xe6\x84\xea\x7e\x18\xd5\xfd\xbe\x8d\xea\x7e\xff\xcd\x54\xf7\x3d\xba\x5d\x40\x92\x64\xf8\x73\x39\x65\x6b\x22\x04\xc9\x27\xde\xd3\x0c\xcc\xa7\xf5\x13\xe6\x72\xe2\xa9\x98\xca\xf9\x5d\x48\x14\x99\xd6\xb6\xe0\x52\x6b\x8d\x3b\x2a\x95\x34\x53\xab\xfa\xf5\xd2\xd0\xcc\x3a\x5f\xd7\x7f\x36\x87\x84\x82\x67\xae\x7b\x94\x03\x07\xf3\x19\x78\x06\xa0\xd2\xa5\xba\xf4\xec\x83\xf1\xd1\x4f\x3d\x58\xf5\x94\x4c\x3b\x97\x18\xe3\x6a\xae\x57\x71\xa0\xe6\xc8\x78\xb6\x89\x21\xe0\xdb\x94\x08\x2a\x1d\x2b\xeb\x80\x34\x7e\x8e\x89\x1a\x3b\x7a\x98\x43\x63\x66\x1e\xe7\x1b\x91\xb3\x98\x3f\x6f\xcb\x0b\xe1\x31\x70\x27\xc5\xca\x38\x2b\xf8\x55\x88\xc1\x44\x77\xf9\xd5\x6a\x35\x3d\x4c\x58\xda\x0f\xf6\xa1\x27\x23\x49\xb9\x61\x1e\x5f\xb4\x34\x8d\x9b\xa3\xd0\xfc\x64\x70\x7c\x6c\xa9\x6a\x1e\x7e\x46\x38\x48\xcd\xf7\x33\xba\x2c\x4b\x92\x8a\x50\x7f\x3d\xd1\x2c\xf6\xd7\x6e\xef\x8a\xad\xb4\xcd\xc9\x62\x1d\x15\x9a\xc5\xea\x6a\xca\xf3\x5a\x50\xcc\xd1\x72\x75\xdc\x12\x86\x47\x7a\xe4\x8e\x34\xe3\xca\x1d\xed\x91\x3b\xda\xa3\x66\x04\x47\xe7\xa2\xed\xd6\x75\x45\x7b\xf4\x27\x46\x7b\xf4\xfd\xd1\xf6\x76\xf6\x87\x8c\xf6\x60\xff\x28\xc2\xb2\x6b\xea\xae\x76\x58\x38\xb0\xcd\xa4\xd2\xdb\x9a\x09\xd8\x73\x8c\xec\xc0\x91\x6d\x0a\x48\x79\x86\x88\x5f\x23\x72\xdc\x17\x7c\xdd\xfa\xa7\xc3\x08\xd9\x6d\x44\x22\x11\x41\xfc\x27\x92\xaa\x9a\xad\x10\x6b\xdd\xa2\x54\x8c\xe6\x54\xcf\x23\x08\x32\x91\xe4\xe0\x0b\x12\xa0\x34\xbf\xcf\x98\xa3\x3d\x65\x9b\xc6\x0b\xd5\xcb\xbb\xd7\xfa\xcb\xd4\xe7\x77\x8d\x1b\xce\x61\xfa\x6f\x39\x53\x64\xd7\xb1\x15\x91\x17\xfa\x5a\xce\xd0\xed\x30\xc4\x54\x60\x40\x14\xea\xdd\x9d\x05\x08\xbf\xfc\xeb\x17\xf8\xfb\xe2\x6f\x33\x43\x97\x7c\xa6\x0f\x40\x99\x54\x48\xc2\xa3\x31\xdb\x31\x3f\x7b\xf9\x43\xa3\x6e\x5e\xbc\xfc\x55\xc7\xe2\xff\x01\x00\x00\xff\xff\x9d\xdc\x6f\x0d\x7e\x1e\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
