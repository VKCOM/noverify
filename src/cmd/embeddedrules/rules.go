// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x98\xdb\x6e\xe3\x36\x13\x80\xef\xfd\x14\x63\x43\xeb\xd8\x5e\xdb\xfa\x17\xff\x5d\x8e\xdb\xde\x15\x58\x34\xc0\x16\x7b\x55\xec\xda\x94\x34\xb2\xb8\x91\x49\x95\xa4\x12\xab\x51\xde\xbd\x20\x29\xc5\xb2\x0e\xb1\x94\x36\x40\x0c\x7b\x48\xce\x37\x27\x72\x28\x5d\xdf\x25\x51\x32\x1a\xb9\x8b\xc5\x08\x16\xf0\x99\x71\xca\x64\x82\xbe\xa2\x9c\xc1\x2f\x5f\xbe\x18\x61\x4c\x99\x42\x01\xf6\x2f\xa0\x92\x78\x31\x8e\x60\xe1\x1e\x97\xf9\x7c\xbf\x47\xa6\xe0\x2b\x26\x5c\x28\x50\x28\x18\x11\x19\xe0\x21\x11\x28\x25\xe5\x4c\x82\x8a\x88\x02\x9f\x30\xf0\x10\x24\xdd\x27\x31\x0d\x29\x06\x6b\xb3\xdc\xc3\x90\x0b\x04\x70\x0e\x70\xa7\x3f\x2e\xc1\xc9\xcc\x00\x09\x2d\x58\x0f\x14\x42\x77\x14\xa6\xcc\xda\x57\x60\xfe\xb0\xda\xb2\xd9\x1c\x9e\x47\x00\xc6\x26\xd0\xab\xf7\x24\xf3\x10\x7c\x9e\xc6\x01\x08\x4c\x62\xe2\x23\xa8\x08\x5f\xcd\x7b\xa2\x2a\x82\x9f\xa9\x54\xe0\xf8\x9c\x05\xc5\x2a\x95\x25\x08\x1e\xe7\x71\x45\xea\x8e\xc0\xfe\x82\x3b\x50\x22\x45\xb8\x84\x90\xc4\x12\xaf\x46\x6f\x00\x9f\x04\x55\x08\x44\xc2\x76\xa6\xd5\xcd\x8d\x82\x6d\x95\x02\xe3\xff\x96\x53\x86\xa9\x84\x84\xf4\x50\x09\x9d\x11\x25\xa9\x40\x70\x0e\x47\x5a\x25\xe4\x03\x28\x77\x2d\x94\xbb\x92\xa2\xf5\x52\x29\x51\xcd\x9c\xc3\xbc\xaa\xfe\xa5\xb3\x62\x12\xae\x90\x29\x4a\x62\xe0\x09\x0a\x62\xd2\x9b\x08\xf4\x31\x40\xe6\xa3\xd6\x96\xa2\x6c\x14\xcb\x14\x9c\x3d\x91\x0f\x70\x73\x03\xff\xbb\x02\xd7\xd5\x5f\x22\x22\x21\xa2\xbb\x08\x45\x55\x81\x8a\x08\x83\xe9\x49\x4d\xcd\x8e\x0a\xe6\x46\xc3\x69\x71\x1d\x17\x97\x75\xe5\xc2\xef\x5c\xe1\x25\x3c\xa1\xae\x26\x6d\xf5\xb6\x62\xc3\xf8\x46\x87\x44\x07\x88\x34\x2c\x07\x7c\x44\x66\x55\xd0\x10\xe8\xeb\x3e\xf0\x49\xba\x8b\x94\xad\xc3\xad\xae\x08\x3f\x42\xff\xe1\x3e\xd9\x16\xbb\x45\xff\x92\xe0\x71\x15\xd9\xb0\x98\x2a\x71\x5d\xd0\x53\x25\x98\xaa\x02\x2a\x81\x71\x05\x04\x76\x9c\x07\xe5\x34\x08\xb9\x00\x8f\xaa\x27\x2a\xf1\x18\xd1\xf9\xda\x2c\xb7\x3a\x6c\xe0\x29\xdb\xc1\x96\xb2\x47\x12\xd3\xc0\xaa\x5d\xea\x5d\x8b\xbe\xc2\x00\x58\xba\xf7\x50\x40\xc8\x53\x16\x98\x1d\xb1\x05\x2a\xed\x6a\x8d\x34\x36\x46\x18\x27\x61\x1a\x2f\xc1\x43\x9f\xa4\xd2\x6e\x30\xc1\xb9\x02\x1e\x9a\xef\x89\xe0\x5e\x8c\x7b\x6d\xe7\x31\x2c\xd6\x10\xf8\xad\x0a\x06\x22\x10\x08\x08\x94\x69\x5c\xac\x26\x6a\x5d\x94\x24\x7c\x7e\x22\x82\x69\x6b\xcf\xa4\xd8\x56\x1f\x61\xd9\x06\xff\xda\x78\x54\x11\x16\x5c\x9a\xf4\x01\x38\x1b\xbd\xd8\xd9\xe8\x94\x6d\xae\x4a\xd1\xf4\x55\xae\x45\x2f\x75\xdc\xb8\x2f\x8e\xb5\xf1\xc6\x1d\xbc\x71\x27\xef\x66\x80\x7f\xff\x6f\x73\xb0\xd3\xc3\x37\x5c\x1c\xe0\x63\x0b\x73\xdc\xc5\x1c\x57\x98\xc3\xd2\x98\xd7\xd3\xc8\x45\x23\x8b\x79\x95\x97\xff\x9b\x2c\xe6\x8d\x2c\x9e\xe0\xc6\x1d\xb8\x77\x27\x31\x6f\x24\xb1\xe6\x5e\xa7\x7f\xef\xcd\x61\xde\xcc\x61\xcd\xc5\x4e\x1f\x8f\xc8\xee\xd3\x9b\x48\x49\x77\x4c\x4b\x7a\xf7\xf9\x1b\xfd\xf1\xd1\x74\x85\x5a\xa3\xff\x78\x53\x48\x2b\x87\xb1\x05\xdc\x27\x67\x5a\xfc\x49\x8f\x32\x7a\x6a\x3d\xca\xc8\xba\x3b\x61\xc5\xa8\xbe\x94\x55\x0b\x65\xd5\x83\xb2\x1a\x44\x59\xb4\x50\x16\x3d\x28\x8b\x41\x14\xb7\x85\xe2\xf6\xa0\xb8\x83\x28\x1f\x5a\x28\x1f\x7a\x50\x3e\x0c\xa2\x4c\x5b\x28\xd3\x1e\x94\xe9\x20\x4a\xde\x42\xc9\x7b\x50\xf2\x41\x94\x1f\x2d\x94\x1f\x3d\x28\x3f\x06\x51\xae\xaf\x5b\x30\x56\x78\x86\x73\x7d\x3d\x08\x74\x7b\xdb\x02\xb2\xc2\x33\xa0\xdb\xdb\x41\xa0\x75\x0b\x67\xdd\x03\xb3\x1e\x78\x17\x6e\xc1\x58\xe1\x19\x8e\xb9\x31\xf7\xbc\x15\x87\xe1\xca\xcb\x56\x9c\x21\xec\xa9\x54\xe4\xa1\x71\x1b\x26\x7f\xfa\x3c\x65\x6a\xe6\x90\xf9\xf7\xd3\x23\xb5\x32\xb2\xfa\xf4\xfd\xf4\x60\xe5\x61\xf8\x6b\xf6\xa9\x71\xac\x96\x6d\x45\x5f\xde\x88\x17\x67\xa0\x9f\x00\x59\x80\x01\x28\x0e\xfa\x96\x67\x34\xae\x3e\x99\xeb\x2e\x03\xca\x02\x3c\x54\x02\x00\x35\x2c\xac\x40\x83\x4b\xf7\xab\xa6\xd6\xe2\x7c\x16\x2c\xe9\xdf\xc8\xc3\x73\x64\x3b\xab\x15\x7d\x1c\xfa\xfe\x56\xe8\x65\x2a\x13\xea\x53\x9e\xea\x7b\xe9\x2e\xb5\xbd\x8d\x8b\x00\xc5\x69\xdc\xa5\x12\x09\x97\xb3\x0b\xf7\x62\x09\x8e\x9c\x9f\x44\xbe\x18\x73\xe4\x12\x2e\xdc\x8b\x79\xad\xa5\x89\x9d\xbc\xd7\xfa\xba\x83\x5f\x66\xdf\x84\xc1\xe7\x42\xa0\xaf\x20\x22\x99\x54\xc4\x7f\x00\x7d\xcd\x67\x88\x41\x8c\x75\x0b\x5f\xdd\xd5\xfd\xbe\x9c\xbf\xb1\x73\xcb\xa6\x5f\xda\xf6\x3c\xf1\x23\x22\x26\x2f\x4b\x70\x9e\x27\x8b\xc9\xcb\xfc\xaa\x1c\xa6\x67\xc6\xdf\x5e\x9f\x7a\x52\x89\x4d\x91\xe7\xe7\x89\x54\xf5\x39\x2f\x1d\x89\x6f\x75\xba\x78\x7a\x37\x09\xd2\x7e\xcb\xd4\xfb\xa9\xe5\x5d\x8e\x27\x02\x77\x9b\x62\xd1\xcc\xd9\x2c\xc1\xfc\x37\xcd\x18\x6e\x82\xc5\x2b\xa1\x27\xbe\x15\x76\xed\x7d\xb1\xa4\x12\xf2\x36\x9b\xba\xe2\xdb\x98\x3b\x99\xbc\x3f\x80\x01\xc6\x74\x4f\x75\x59\xf6\xb0\x1f\x0f\x49\xcc\x83\x02\xdc\x62\x60\xaf\x5d\x93\x4a\xb2\x43\xfd\x18\xd7\x78\x0c\xad\x9d\x5c\x34\x84\x99\x43\xe5\xb7\xaf\x5f\x74\xf3\x7d\x44\x41\xc3\x6c\x0e\xeb\xf5\xfa\x64\x2f\x55\x67\x35\xa6\x55\xb6\x55\x41\xbb\x4f\x64\xe7\xbe\xfa\x26\x31\x80\x69\xcd\x2e\x2e\x80\x3f\xa2\xb0\x2f\x7e\x8a\xa7\x68\xb9\x84\x04\x45\x44\x12\xa9\x99\x54\xbe\x1e\x46\x77\xb5\x7b\xc5\xf4\x78\xd6\x57\xde\x1e\x1d\x9a\xa2\xac\xda\x03\x5a\xae\x1a\x27\x26\xe6\xc3\x4c\xcc\xf3\x37\x4c\xcc\xf3\x77\x99\x98\x17\x0d\xea\x9f\x00\x00\x00\xff\xff\x98\x8d\x25\xec\x26\x14\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
