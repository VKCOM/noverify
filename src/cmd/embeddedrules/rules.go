// Package embeddedrules Code generated for package embeddedrules by go-bindata DO NOT EDIT. (@generated)
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x6d\x6f\xe3\x36\x12\xfe\x1e\x20\xff\x61\x6c\xa8\x59\x3b\xf5\x4b\x82\x3d\xe0\x80\x4d\x9c\xf4\xae\x5f\xee\x80\x45\xb7\x68\xd1\x4f\x8b\xac\x43\x49\x23\x8b\x8d\x4c\xea\x48\x6a\x63\x5d\xec\xff\x7e\x20\xf5\x62\x59\xa2\xf5\xb2\xdb\x2b\xd0\xac\x4d\x0e\xe7\x79\x38\x33\x9c\x19\xd2\xf7\x8f\x71\x18\x5f\x5e\x5c\x5e\x2c\xaf\xaf\x2f\x2f\xe0\x1a\x7e\x62\x9c\x32\x19\xa3\xa7\x28\x67\xf0\x8f\x8f\x1f\xb3\xd1\x88\x32\x85\x02\xb2\xff\x7c\x2a\x89\x1b\xa1\x9e\x59\x9e\xac\xf5\xf8\x76\x8b\x4c\xc1\x6f\x18\x73\xa1\x40\xa1\x60\x44\xa4\x80\xbb\x58\xa0\x94\x94\x33\x09\x2a\x24\x0a\x3c\xc2\xc0\x45\x90\x74\x1b\x47\x34\xa0\xe8\x2f\xb2\xf5\x2e\x06\x5c\x20\x80\xb3\x83\x47\xfd\xe7\x03\x38\x69\x36\x43\x82\x0c\x5e\xcf\x14\xa3\xcb\xcb\x8b\x20\x61\x19\xd1\x1c\xea\xf7\x4c\x63\x3a\x99\xc2\xdb\xe5\x05\x40\xc6\x0c\xb4\x86\x2d\x49\x5d\x04\x8f\x27\x91\x0f\x02\xe3\x88\x78\x08\x2a\xc4\x92\xe4\x2b\x55\x21\xfc\x99\x48\x05\x8e\xc7\x99\x5f\x2c\x53\x69\x8c\xe0\x72\x1e\x55\x87\x97\xfa\x1f\xf3\x1d\x1e\x41\x89\x04\xe1\x03\x04\x24\x92\x78\xa7\xcd\xd1\x02\xfb\x2a\xa8\x42\x20\x12\x9e\x27\x5a\xe7\xd4\xe8\x78\x3e\xc1\x82\xd1\xff\x01\xad\x30\x5b\x09\x15\xd0\x5d\xd5\x96\x66\x2c\x4e\x04\x82\xb3\xab\x82\x56\xfc\x30\x0c\xec\xd1\x06\xf6\x58\x82\x19\xed\x54\x4a\x54\x13\x67\x37\x3d\x01\x39\xb4\x45\x54\xcc\x15\x32\x45\x49\x04\x3c\x46\x41\x8c\xeb\x63\x81\x1e\xfa\xc8\x3c\xd4\x1a\x13\x94\xcd\x60\xba\x02\x67\x4b\xe4\x0b\xac\x56\x70\x73\x07\xcb\xa5\xfe\x10\x12\x09\x21\xdd\x84\x28\xaa\x1a\x54\x48\x18\x5c\x9d\xc6\xdc\xe4\xa8\x61\x6a\x54\xd4\x83\xef\xb8\xbe\x8c\xbb\x25\xfc\xc2\x15\x7e\x80\x57\xd4\xc1\xa6\xa9\x3f\x57\x78\x8c\x56\xda\x3c\xda\x58\xa4\x41\x1f\xf0\x2b\xb2\x5c\x07\x0d\x80\x96\xa7\xc5\x23\xc9\x26\x54\x59\x9c\x3e\xeb\x50\xf1\x42\xf4\x5e\x3e\xc5\xcf\xf9\x99\xd2\xdf\x24\xb8\x5c\x85\x99\x71\xb2\xf0\x59\x2e\x41\xcb\x4a\x30\x01\x07\x54\x02\xe3\x0a\x08\x6c\x38\xf7\x0b\x39\x08\xb8\x00\x97\xaa\x57\x2a\xf1\x68\xd8\xe9\x22\x5b\x9f\x6b\xc9\x3c\x40\xd9\x06\x9e\x29\xfb\x4a\x22\xea\x67\x8a\x67\xfa\x78\xa3\xa7\xd0\x07\x96\x6c\x5d\x14\x10\xf0\x84\xf9\xe6\xcc\x3c\x03\x95\xf9\x72\x8d\x6a\x78\x86\x18\xc5\x41\x12\xcd\xc0\x45\x8f\x24\x32\x3b\x84\x82\x73\x05\x3c\x30\x9f\x63\xc1\xdd\x08\xb7\x9a\xea\xd1\x36\x39\x17\xf8\x77\x15\x1a\x88\x40\x20\x20\x50\x26\x51\xbe\x9c\xa8\x45\x19\xa7\xf0\xd3\x2b\x11\x4c\x33\xee\x70\x77\x1e\x8f\x84\xa5\x6b\xfc\xcf\xda\xa5\x8a\x30\xff\x43\xe6\x48\x00\x67\xad\x97\x3b\x6b\xed\xbc\xf5\x5d\x39\x76\x55\x4e\x98\xb1\x43\x03\x73\xd4\x1b\x93\x59\x41\x47\xe7\x40\x47\x2d\xa0\xab\x21\x3b\x7d\x6f\xdd\xea\xf9\xbd\xb6\x6e\x76\xc8\x6e\x6d\xc0\xa3\xb3\xc0\xa3\x13\xe0\x81\xbe\xdd\x37\x7c\xcb\x45\xd3\xb5\xfb\x13\xd4\xfd\xf7\xb9\x76\xdf\x74\xed\x29\xe6\xe8\x1c\xe6\x77\x78\x76\xdf\xf4\x6c\x7d\xa3\xe7\x77\xfa\xed\x8e\xdd\x5b\x1c\x5b\xdf\xec\xf9\xdd\x76\xf8\xb5\x15\xf9\xf1\xb1\xa8\x51\xe5\xde\x74\x7d\x59\xdf\x59\x54\x75\x6c\xa2\xaa\x6a\xd4\xa1\x6a\x08\xa9\x0e\x4e\xfd\x29\xb5\x2a\x7a\xe8\xab\xe7\xa1\x5d\x4d\x6f\x3e\x0f\xed\x7c\xee\xfb\xea\xb9\x6f\x57\xd3\x9b\xcf\xfd\x09\x9f\xd6\xf6\x81\x48\x49\x37\x4c\x8f\xf4\x6f\x44\x57\xfa\xcf\x8f\x59\x6f\x52\xeb\x44\x7f\x5c\x15\xc3\xd5\x6e\x20\x03\xf9\x14\x77\xf6\xa0\x27\x1d\x93\xd1\x55\xef\x98\xcc\x60\x6b\x7b\x56\x65\xd7\x1f\x6c\x6e\x03\x9b\xf7\x03\x9b\x0f\x05\xbb\xb6\x81\x5d\xf7\x03\xbb\x1e\x0a\xb6\xb4\x81\x2d\xfb\x81\x2d\x87\x82\xfd\x60\x03\xfb\xa1\x1f\xd8\x0f\x43\xc1\xae\x6c\x60\x57\xfd\xc0\xae\x86\x82\xed\x6d\x60\xfb\x7e\x60\xfb\xa1\x60\x5f\x6c\x60\x5f\xfa\x81\x7d\x19\x0a\x76\x7f\x6f\x43\xcb\x46\xbb\xe1\xee\xef\x87\xe2\x3d\x3c\xd8\xf0\xb2\xd1\x6e\xbc\x87\x87\xa1\x78\x0b\x1b\xdc\xa2\x1f\xda\x62\xf8\x35\xcf\x86\x96\x8d\x76\xc3\x99\xfb\xe0\x80\x1b\x5f\x10\xcc\xdd\x74\xce\x19\xc2\x96\x4a\x45\x5e\x9a\x37\x3d\xf2\xd9\xe3\x09\x53\x13\x87\x4c\x9f\x6a\xd9\xba\x32\x35\xbf\x7d\xaa\xe7\x6c\x1e\x04\xff\x4c\x6f\x2d\x19\xbb\x28\x47\xfa\x52\x42\xdc\x28\x05\xca\x14\x32\x1f\x7d\x50\x1c\xf4\xed\xc5\x68\x9d\xdf\x9a\xbb\x1c\x03\xca\x7c\xdc\x55\xcd\x01\x35\x6c\x98\x83\x41\x2f\x6d\x51\xa5\xdc\xb4\x7d\x27\xbc\xa4\xff\x45\x1e\x74\xe2\x67\x62\x67\x08\x1c\x27\x9f\xba\xbc\x21\x13\x19\x53\x8f\xf2\x44\xdf\xbd\x36\x49\x56\x49\xb9\xf0\x51\xd4\x5c\x21\x95\x88\xb9\x9c\xbc\x5b\xbe\x9b\x81\x23\xa7\xa7\xce\xc8\x27\x1d\x39\x83\x77\xcb\x77\xd3\x46\x01\x15\x1b\xf9\x49\xeb\x6c\xf3\x47\x11\x16\xc6\x26\x1e\x17\x02\x3d\x05\x21\x49\xa5\x22\xde\x0b\xe8\x4b\x2d\x43\xf4\x23\xac\xf3\xac\x6c\x5d\x37\xad\xc5\x8a\x75\x26\x5d\x76\xae\x05\xc5\xb7\xb1\x17\x12\x31\x3e\xcc\xc0\x79\x1b\x5f\x8f\x0f\xd3\xbb\x72\x9e\x76\x09\x74\x68\x48\x5c\xa9\xc4\x3a\xf7\xfe\xdb\x58\xaa\x86\xd0\xe1\x7c\x3c\x58\xb7\x9f\x3f\x6b\x19\x87\x69\x0b\xc8\xc4\xfd\x53\x8f\x9f\x37\x41\x2c\x70\xb3\xce\x97\x4d\x9c\xf5\x0c\xcc\xff\x16\x32\xdf\xc2\x23\xe3\xa0\x84\x16\x6c\xf7\x82\x36\x44\xbe\xa8\xea\x01\x1b\xb3\xb3\xd6\x6e\x08\x8f\xc7\xdf\x67\x4d\x1f\x23\xba\xa5\x3a\x62\x7b\xed\x03\x77\x71\xc4\xfd\x1c\xde\xc6\xb3\xef\xc1\x4a\x24\xd9\x20\xf0\xa0\xf9\x22\x53\xcf\x77\x34\x80\x89\x43\xe5\x1f\xbf\x7d\xd4\x15\xfe\x2b\x0a\x1a\xa4\x53\x58\x2c\x16\xa7\xc7\xad\x2a\xd6\x94\xab\x9e\xbc\x1c\xf1\x53\x2c\x5b\x8e\xde\x1f\x12\x7d\xb8\xaa\xb1\xe3\x02\xf8\x57\x14\xd9\x4b\x69\xfe\xac\x24\x67\x10\xa3\x08\x49\x2c\x35\x2e\x95\x65\xf2\x7a\xac\x77\x31\x57\x95\x7a\x51\x79\x70\xdd\x59\xc6\xd2\xd3\x42\x62\xef\x6c\x4e\xa8\xee\x87\x51\xdd\xef\xdb\xa8\xee\xf7\xdf\x4c\x75\xdf\xa3\xda\x79\x24\x8a\x86\x3f\x97\x53\xb6\x26\x42\x90\x74\xe2\xbc\xcc\xc0\x7c\x5a\xbf\x60\x2a\x27\x8e\x0a\xa9\x9c\x3f\xf8\x44\x91\x69\x2d\x05\x97\x52\x6b\xdc\x51\xa9\xa4\x59\x5a\x95\xaf\x87\x86\x66\xd6\xf9\xba\xfe\xb3\x69\x12\x72\x9e\xa9\xae\x51\x16\x1c\x4c\x67\xe0\x18\x80\x4a\x95\xea\x92\xcb\x1e\x8c\x8f\xfb\xd4\x93\xd5\x9d\x92\x69\xe7\x11\x63\x5c\xcd\xf5\x29\xf6\xd4\x1c\x19\x4f\x36\x21\x78\x7c\x1b\x13\x41\xa5\xe5\x64\x15\x48\xe3\xd7\x90\xa8\xb1\xa5\x86\x59\x24\x66\xe6\x71\xbe\x61\xb9\x0c\xf3\xe7\x6d\x79\x21\x3c\x1a\xee\x24\x58\x19\x67\x39\xbf\x0a\x31\x98\xe8\x2a\xbf\x5a\xad\xa6\xc5\x82\x65\xf6\x21\x7b\xe8\x49\x48\x54\x26\xcc\xe3\x8b\x96\xa6\x71\x77\x1c\x34\x3f\x19\x1c\x1f\x5b\xaa\x92\xc5\xcf\x08\xc5\xa8\xf9\x7e\x46\x96\x25\x51\x54\x19\xd4\x5f\x4f\x24\xf3\xfc\xda\xbd\xbb\x3c\x95\xb6\x6d\x32\x3f\x47\xb9\x64\x7e\xba\x9a\xe3\x69\xcd\x28\xa6\xb5\x5c\x1d\x53\xc2\x70\x4b\x8f\xec\x96\x66\x5c\xd9\xad\x3d\xb2\x5b\x7b\xd4\xb4\xe0\xe8\x9c\xb5\xed\xb2\x36\x6b\x8f\xfe\x42\x6b\x8f\xbe\xdf\xda\xce\x2e\xfb\x21\xa3\xdd\xd8\xef\x85\x5f\x56\x4d\x5d\xd5\x8a\x83\x03\xdb\x44\x2a\x9d\xd6\x8c\xc1\x5e\x43\x64\x05\x47\xb6\xc9\x21\xe5\x19\x22\x6e\x8d\xc8\x31\x2f\xb8\xba\xf4\x4f\x87\x11\xca\xd2\x88\x44\x22\xbc\xf0\x2f\x24\x55\x55\x5b\x21\xd6\x9a\xa2\x54\x88\xa6\xab\xe7\x01\x78\x89\x88\x52\x70\x05\xf1\x50\x9a\xdf\x67\x4c\x6b\x4f\xd9\xa6\xf1\x42\xf5\x76\x73\xa8\xbf\x4c\x7d\xbe\x69\xdc\x70\x8a\xe5\xbf\xa7\x4c\x91\x5d\x47\x2a\x22\x6f\xf4\x50\xae\xd0\xe5\xd0\xc7\x58\xa0\x47\x14\xea\xec\xce\x3c\x84\x5f\xff\xf5\x2b\xfc\x7d\xf1\xb7\x99\xa1\x4b\x3e\xd3\x27\xa0\x4c\x2a\x24\xfe\x51\x59\x56\x31\x3f\x3b\xe9\x53\x23\x6e\xde\x9c\xf4\xd0\x65\x8b\x44\x1a\x26\xcc\x94\xe2\x8d\xf9\x59\x49\xe4\x3d\xbd\xfd\xae\x31\x0e\x31\x8a\xf8\x78\x06\xb7\x37\xf6\xfb\x46\x29\xe0\x85\x62\x72\x7b\x33\x6d\x64\x6a\xca\xd4\x2f\x06\xa0\xc3\x3c\x55\x13\xbc\x9f\x41\x4c\xa4\xe1\xaa\xbd\x47\x99\x82\x98\x08\xb2\x45\x0d\x9d\x5f\x41\x14\x2f\xa2\x24\x8f\xb2\x02\x51\x9a\x37\x4e\x17\x91\x55\x2c\x3c\x03\x8f\x48\x05\x54\x99\x96\x92\x7a\x54\x45\x69\x45\x05\x17\xf0\x2a\x48\xac\xe7\x29\x03\x62\x36\x33\x85\x93\x3a\x5d\x8b\x50\xcd\xa9\x7a\xa8\xb5\x63\x8a\xfb\xcd\x3a\xb3\x86\xb3\x9b\x16\xad\x74\x35\xef\x9d\x64\xbb\xca\x12\x67\x37\xbd\x3b\x99\x38\x3f\x43\xcf\xaf\x39\x3f\x25\x95\xb0\x4f\x18\xae\x56\x65\x67\x67\x68\x53\xd9\xc1\x84\xde\xff\x02\x00\x00\xff\xff\x0b\x65\xb6\x9c\xfb\x20\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
