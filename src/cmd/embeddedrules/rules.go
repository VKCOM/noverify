// Package embeddedrules Code generated for package embeddedrules by go-bindata DO NOT EDIT. (@generated)
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\x6d\x6f\xdb\x38\x12\xfe\x5e\x20\xff\x61\x6c\xa8\x81\x9d\xf5\x4b\x82\x1e\x70\x40\x13\x27\x7b\xb7\xf7\xe1\x0e\x28\xb6\x8b\x5d\xec\xa7\x22\x75\x28\x69\x64\x71\x23\x93\x3a\x92\x4a\xac\x8b\xfd\xdf\x0f\x24\x25\x59\x96\x64\xbd\xb4\xbb\x05\x9a\xd8\x7c\x99\xe7\x99\x67\xc8\xe1\x90\xb9\x7b\x88\xc3\xf8\xe2\xdd\xc5\xbb\xe5\xd5\xd5\xc5\x3b\xb8\x82\x1f\x19\xa7\x4c\xc6\xe8\x29\xca\x19\xfc\xe3\xd3\x27\xdb\x1a\x51\xa6\x50\x80\xfd\xe7\x53\x49\xdc\x08\x75\xcf\xf2\x64\xae\xc7\xb7\x5b\x64\x0a\x7e\xc5\x98\x0b\x05\x0a\x05\x23\x22\x05\xdc\xc5\x02\xa5\xa4\x9c\x49\x50\x21\x51\xe0\x11\x06\x2e\x82\xa4\xdb\x38\xa2\x01\x45\x7f\x61\xe7\xbb\x18\x70\x81\x00\xce\x0e\x1e\xf4\x8f\x8f\xe0\xa4\xb6\x87\x04\x16\x5e\xf7\xe4\xad\xcb\x8b\x77\x41\xc2\x2c\xd1\x0c\xea\x37\x6b\x31\x9d\x4c\xe1\xed\xe2\x1d\x80\x65\x06\xda\xc2\x96\xa4\x2e\x82\xc7\x93\xc8\x07\x81\x71\x44\x3c\x04\x15\x62\x41\xf2\x95\xaa\x10\xfe\x48\xa4\x02\xc7\xe3\xcc\xcf\xa7\xa9\x34\x46\x70\x39\x8f\xca\xcd\x4b\xfd\xcb\x7c\x87\x07\x50\x22\x41\xf8\x08\x01\x89\x24\xde\x6a\x39\x5a\x60\x5f\x05\x55\x08\x44\xc2\xd3\x44\xdb\x9c\x1a\x1b\x4f\x27\x58\x30\xfa\x0b\xd0\x72\xd9\x0a\xa8\x80\xee\xca\x5a\x9a\xb6\x38\x11\x08\xce\xae\x0c\x5a\x8a\xc3\x30\xb0\x87\x26\xb0\x87\x02\xcc\x58\xa7\x52\xa2\x9a\x38\xbb\xe9\x09\xc8\xa1\x6d\x45\xc5\x5c\x21\x53\x94\x44\xc0\x63\x14\xc4\x84\x3e\x16\xe8\xa1\x8f\xcc\x43\x6d\x31\x41\x59\x5f\x4c\x97\xe0\x6c\x89\x7c\x86\xd5\x0a\xae\x6f\x61\xb9\xd4\x1f\x42\x22\x21\xa4\x9b\x10\x45\xd9\x82\x0a\x09\x83\xcb\xd3\x35\x37\x39\x5a\x98\x1a\x13\xd5\xc5\x77\x9c\x5f\xac\xbb\x25\xfc\xcc\x15\x7e\x84\x57\xd4\x8b\x4d\x53\x7f\x2a\xf1\x18\xad\xb4\x3c\x5a\x2c\x52\xa3\x0f\xf8\x82\x2c\xb3\x41\x03\xa0\xc5\x6e\xf1\x48\xb2\x09\x95\x5d\xa7\x4f\x7a\xa9\x78\x21\x7a\xcf\x9f\xe3\xa7\x6c\x4f\xe9\x6f\x12\x5c\xae\x42\x2b\x8e\x5d\x3e\xcb\x25\xe8\xb1\x12\xcc\x82\x03\x2a\x81\x71\x05\x04\x36\x9c\xfb\xf9\x38\x08\xb8\x00\x97\xaa\x57\x2a\xf1\x28\xec\x74\x61\xe7\x67\x56\x6c\x04\x28\xdb\xc0\x13\x65\x2f\x24\xa2\xbe\x35\x3c\xd3\xdb\x1b\x3d\x85\x3e\xb0\x64\xeb\xa2\x80\x80\x27\xcc\x37\x7b\xe6\x09\xa8\xcc\xa6\x6b\x54\xc3\x33\xc4\x28\x0e\x92\x68\x06\x2e\x7a\x24\x91\x76\x13\x0a\xce\x15\xf0\xc0\x7c\x8e\x05\x77\x23\xdc\x6a\xaa\x47\x6d\x32\x2e\xf0\x9f\x32\x34\x10\x81\x40\x40\xa0\x4c\xa2\x6c\x3a\x51\x8b\x62\x9d\xc2\x8f\xaf\x44\x30\xcd\xb8\x23\xdc\xd9\x7a\x24\x2c\x5d\xe3\x7f\xd7\x2e\x55\x84\xf9\x1f\x6d\x20\x01\x9c\xb5\x9e\xee\xac\x75\xf0\xd6\xb7\x45\xdb\x65\xd1\x61\xda\x0e\x35\xcc\x51\x6f\x4c\xd6\x08\x3a\x3a\x07\x3a\x6a\x01\x5d\x0d\xf1\xf4\x43\xa3\xab\xe7\x7d\x6d\x75\x76\x88\xb7\x4d\xc0\xa3\xb3\xc0\xa3\x13\xe0\x81\xb1\xdd\xd7\x62\xcb\x45\x3d\xb4\xfb\x13\xd4\xfd\xf7\x85\x76\x5f\x0f\xed\x29\xe6\xe8\x1c\xe6\x77\x44\x76\x5f\x8f\x6c\xd5\xd1\xf3\x9e\x7e\x7b\x60\xf7\x0d\x81\xad\x3a\x7b\xde\xdb\x8e\xb8\xb6\x22\x3f\x3c\xe4\x67\x54\xe1\x9b\x3e\x5f\xd6\xb7\x0d\xa6\x3a\x9c\x28\x9b\x1a\x75\x98\x1a\x42\xaa\x83\x53\x7f\x4a\xad\x86\xee\xfb\xda\xb9\x6f\x37\xd3\x9b\xcf\x7d\x3b\x9f\xbb\xbe\x76\xee\xda\xcd\xf4\xe6\x73\x77\xc2\xa7\xb5\x7c\x20\x52\xd2\x0d\xd3\x2d\xfd\x0b\xd1\x95\xfe\xf1\x83\xad\x4d\x2a\x95\xe8\x0f\xab\xbc\xb9\x5c\x0d\x58\x90\xcf\x71\x67\x0d\x7a\x52\x31\x19\x5b\xd5\x8a\xc9\x34\xb6\x96\x67\x65\x76\xfd\xc1\xe6\x4d\x60\xf3\x7e\x60\xf3\xa1\x60\x57\x4d\x60\x57\xfd\xc0\xae\x86\x82\x2d\x9b\xc0\x96\xfd\xc0\x96\x43\xc1\xde\x37\x81\xbd\xef\x07\xf6\x7e\x28\xd8\x65\x13\xd8\x65\x3f\xb0\xcb\xa1\x60\xfb\x26\xb0\x7d\x3f\xb0\xfd\x50\xb0\xaf\x4d\x60\x5f\xfb\x81\x7d\x1d\x0a\x76\x77\xd7\x84\x66\x5b\xbb\xe1\xee\xee\x86\xe2\xdd\xdf\x37\xe1\xd9\xd6\x6e\xbc\xfb\xfb\xa1\x78\x8b\x26\xb8\x45\x3f\xb4\xc5\xf0\x6b\x5e\x13\x9a\x6d\xed\x86\x33\xf7\xc1\x01\x37\xbe\x20\x98\xbb\xe9\x9c\x33\x84\x2d\x95\x8a\x3c\xd7\x6f\x7a\xe4\x8b\xc7\x13\xa6\x26\x0e\x99\x3e\x56\xb2\x75\xa9\x6b\x7e\xf3\x58\xcd\xd9\x3c\x08\xfe\x99\xde\x34\x64\xec\xfc\x38\xd2\x97\x12\xe2\x46\x29\x50\xa6\x90\xf9\xe8\x83\xe2\xa0\x6f\x2f\xc6\xea\xfc\xc6\xdc\xe5\x18\x50\xe6\xe3\xae\x2c\x07\x54\xb0\x61\x0e\x06\xbd\xd0\xa2\x4c\xb9\xae\x7d\x27\xbc\xa4\xff\x43\x1e\x74\xe2\xdb\x61\x67\x08\x1c\x3b\x1f\x6b\xd1\xc0\x9d\xc6\x93\xb5\x33\x4e\x6c\xe4\x67\xe1\xa3\x68\x93\x2c\x8f\x9c\xa1\xed\x71\x21\xd0\x53\x10\x92\x54\x2a\xe2\x3d\x83\xbe\x77\x32\x44\x3f\x42\x6d\x2d\xb1\x87\x32\xd7\x36\x4b\xec\x74\x5d\x99\xcf\x58\xdb\xd1\x45\x71\x29\x95\x88\xb9\x9c\x38\x6f\x63\x2f\x24\x62\x7c\x98\x81\xf3\x36\xbe\x1a\x1f\xa6\xb7\x45\x3f\xed\x1a\xd0\x61\x21\x71\xa5\x12\xeb\x2c\x40\x6f\x63\xa9\x6a\x83\x0e\xe7\x43\xd6\xe8\x7e\xf6\xf2\x64\x56\xb8\x56\x40\x26\xee\x1f\xba\xfd\xbc\x04\xb1\xc0\xcd\x3a\x9b\x36\x71\xd6\x33\x30\xff\x1b\xc8\x7c\x0b\x0f\xcb\x41\x09\x3d\xb0\x3d\x0a\x5a\x88\x6c\x52\x39\x02\x4d\xcc\xce\xaa\x5d\x1b\x3c\x1e\x7f\x9f\x9a\x3e\x46\x74\x4b\xf5\x0e\xef\xe5\x07\xee\xe2\x88\xfb\x19\x7c\x13\xcf\xd6\x4c\x24\x13\x19\x53\x8f\xf2\x44\x42\x22\xc9\x06\x81\x07\xf5\x47\x93\x6a\x4a\xa2\x01\x4c\x1c\x2a\x7f\xff\xf5\x93\x3e\x84\x5f\x50\xd0\x20\x9d\xc2\x62\xb1\x38\x4d\x4f\xe5\x61\xf5\x71\xe5\x9d\x97\x21\x7e\x8e\x65\xcb\xd6\xfb\x5d\xa2\x0f\x97\x15\x76\x5c\x00\x7f\x41\x61\x1f\x33\xb3\x97\x1f\x39\x83\x18\x45\x48\x62\xa9\x71\xa9\x2c\xf2\xcb\x43\xb5\xd0\xb8\x2c\xa5\xf4\xd2\x9b\xe8\xae\xa1\x2d\x3d\xcd\xf5\xcd\xc5\xc7\x09\xd5\xfd\x30\xaa\xfb\x7d\x1b\xd5\xfd\xfe\x9b\xa9\xee\x7b\x1c\x48\x1e\x89\xa2\xe1\x2f\xda\x94\xad\x89\x10\x24\x9d\x38\xcf\x33\x30\x9f\xd6\xcf\x98\xca\x89\xa3\x42\x2a\xe7\xf7\x3e\x51\x64\x3a\x3d\x5d\x13\xc5\xa8\x35\xee\xa8\x54\xd2\x4c\x2d\x8f\xaf\x2e\x0d\xcd\xac\xf3\x01\xfc\x27\x73\x8e\x67\x3c\x53\x7d\x8c\x34\xe0\x60\x3a\x03\xc7\x00\x94\x0e\x92\xae\x71\xf6\x4d\xf7\xe8\xa7\xee\x2c\x7b\x4a\xa6\x9d\x5b\x8c\x71\x35\xd7\xbb\xd8\x53\x73\x64\x3c\xd9\x84\xe0\xf1\x6d\x4c\x04\x95\x0d\x3b\x2b\x47\x1a\xbf\x86\x44\xe9\x44\x22\x2b\x02\x36\x8c\x98\x99\xf7\xf3\x9a\x72\x16\xf3\xa7\x6d\x71\x67\x3b\x0a\x77\xb2\x58\x19\x67\x19\xbf\x12\x31\x98\xe8\x83\x78\xb5\x5a\x4d\xf3\x09\x4b\xfb\xc1\xbe\xc5\x24\x24\x2a\x12\xe6\xf1\xd1\x49\xd3\xb8\x3d\x36\x9a\x57\xfd\xe3\x7b\x48\x79\x64\xfe\xd2\x9f\xb7\x9a\xef\x67\xc6\xb2\x24\x8a\x4a\x8d\xfa\xeb\xc9\xc8\x2c\xbf\x76\x7b\x97\xa5\xd2\x36\x27\xb3\x7d\x94\x8d\xcc\x76\x57\xbd\x3d\xad\x88\x62\xaa\xbf\xd5\x31\x25\x0c\x57\x7a\xd4\xac\x34\xe3\xaa\x59\xed\x51\xb3\xda\xa3\xba\x82\xa3\x73\x6a\x37\x8f\x6d\x52\x7b\xf4\x27\xaa\x3d\xfa\x7e\xb5\x9d\x9d\xfd\x5b\x43\xbb\xd8\x1f\x84\x5f\x9c\x9a\xfa\x54\xcb\x37\x0e\x6c\x13\xa9\x74\x5a\x33\x82\xbd\x86\xc8\x72\x8e\x6c\x93\x41\xca\x33\x44\xdc\x0a\x91\x63\x5e\x70\xf5\xd1\x3f\x1d\x46\xc8\xa6\x11\x89\x44\x78\xe1\x9f\x48\xaa\x6c\xb6\x44\xac\x35\x45\xa9\x10\x4d\xe1\xcd\x03\xf0\x12\x11\xa5\xe0\x0a\xe2\xa1\x34\x7f\x42\x31\xd5\x37\x65\x9b\xda\x23\xd2\xdb\xf5\xa1\xfa\x78\xf4\xe5\xba\x76\x09\xc9\xa7\xff\x96\x32\x45\x76\x1d\xa9\x88\xbc\xd1\x43\x31\x43\x1f\x87\x3e\xc6\x02\x3d\xa2\x50\x67\x77\xe6\x21\xfc\xf2\xef\x5f\xe0\xef\x8b\xbf\xcd\x0c\x5d\xf2\x85\x3e\x02\x65\x52\x21\xf1\x8f\xc6\xec\x89\xf9\xc5\x49\x1f\x6b\xeb\xe6\xcd\x49\x0f\x5d\x5a\x24\xd2\x30\x61\xe6\x28\xde\x98\xbf\xfc\x08\x70\x2a\x45\xbd\x56\x4a\x2a\x71\x05\xb9\x9f\xd5\x44\x9e\xd5\xf1\xe3\x10\xa3\x88\x8f\x67\x70\x73\x5d\xc9\xe3\xd5\x01\x5e\x28\x26\x37\xd7\xd3\x5a\x16\xa7\x4c\xfd\x6c\xb0\x3b\xa4\x2b\xcb\xf3\x61\x06\x31\x91\xc6\x0f\x1d\x59\xca\x14\xc4\x44\x90\x2d\x6a\xe8\xcc\x13\xc5\xf3\x15\x94\xad\xc0\xc2\x13\xf3\x44\xe9\x22\xb2\x92\xfa\x33\xf0\x88\x54\x40\x95\x29\x37\xa9\x47\x55\x94\x96\x4c\x70\x01\xaf\x82\xc4\xba\x9f\x32\x20\xc6\x99\x29\x9c\x9c\xe1\x95\xd5\xab\x39\x1d\x37\xfc\x31\xe3\x9d\xe4\xb9\xfc\x32\xa4\x2b\xdb\xdd\xf4\xf6\xa4\xe3\x7c\x0f\x3d\x3f\xe7\x7c\x97\x54\xa2\xb9\x43\xbb\xd2\x6c\xec\x6c\x0f\xad\x1b\x3b\xf4\xbc\x82\x46\x84\x6d\xfe\x55\xa8\x3e\x24\xe4\x8b\xeb\x99\x09\xb6\x8f\x01\x65\x34\xbb\xff\xeb\xa8\x69\xad\x25\x32\x49\x15\x7d\xd1\x37\x7b\x26\x15\xd1\xf7\x88\x86\x28\x57\xc2\x61\x4c\x1d\xef\x35\xa6\xc8\x68\x4f\x71\x76\x86\xfe\x45\x92\x48\x49\x53\x88\x59\x0e\x75\x06\x96\xae\x0a\x69\x39\x2d\x66\x15\xa7\xc0\x2d\x7f\xc1\xca\x9e\xae\x51\x2a\x64\x3f\x43\xd8\x1c\x73\x59\xee\xfb\x7f\x00\x00\x00\xff\xff\xfc\x76\x4b\x81\x13\x22\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
