// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x96\x5f\x6f\x9b\x30\x14\xc5\xdf\xf9\x14\xa7\x1a\x45\x09\x55\xc3\xb4\x87\x4d\x6a\xf3\xa7\x93\xf6\xd0\x87\x4a\x95\xda\x3d\xb7\x75\xe0\x12\xbc\x11\x83\x6c\xa3\x24\x1a\xfd\xee\x13\x90\x04\x96\xd2\x82\xd1\xf2\x10\x25\x57\xbe\xe7\x77\x75\x7c\xb0\x99\x2e\xd2\x28\xb5\x2c\xcf\x75\x2d\xb8\xb8\x11\x09\x17\x2a\x25\x5f\xf3\x44\xe0\xfb\xdd\x5d\x59\x8c\xb9\xd0\x24\x51\x7d\x02\xae\xd8\x32\x26\x0b\xae\x67\x59\x61\x26\xaa\xa5\x9a\xa4\x60\x72\xf7\xc8\xd7\x69\xcc\xc3\xdd\x68\x8c\x3f\x16\x50\xaa\xa2\x90\x58\xb3\xdd\x92\xe0\x27\x59\x1c\x40\x52\x1a\x33\x9f\xa0\x23\x3a\xf4\x61\xc3\x75\x84\x5f\x99\xd2\xb0\xfd\x44\x04\xfb\x2e\xbd\x4b\x09\xcb\x24\x89\x1b\x55\xcf\x42\xf5\x0f\x0b\x68\x99\x11\xae\x10\xb2\x58\xd1\xb5\xf5\x01\x70\x23\xb9\x26\x30\x85\x97\x51\x21\x37\x2e\x05\x5e\x9a\x14\x9c\xfd\x5f\x8e\xbd\xc5\xe2\x0a\xf6\xee\x00\x09\xf9\x16\x87\xda\xbe\x94\x66\x92\x60\x6f\x6b\xda\x16\x8b\xe2\xab\x58\x62\x40\x59\xb4\x50\x16\x07\x4a\xa1\xcb\x95\x22\x3d\xb2\xb7\xe3\xa6\xfc\x6b\xbd\xe7\x7e\xb2\x5e\x93\xd0\x78\xa0\x34\x91\x1a\x69\xa2\x49\x68\xce\x62\x24\x29\x49\x56\x6e\x6f\x2a\xc9\xa7\x80\x84\x4f\x85\x5a\x46\x6a\x52\x76\x2e\x29\x4c\x24\x95\x93\x3b\xb0\xd7\x4c\xfd\xc6\x6c\x86\xcf\xd7\xf0\xbc\xe2\x47\xc4\x14\x22\xbe\x8a\x48\x36\x05\x74\xc4\x04\x9c\xb2\x9f\x85\x55\xae\x46\xb5\xc0\xb8\x54\x28\xd3\x75\x0c\x57\xdd\x7c\xc8\x95\x87\x9f\xf7\x3f\xee\xaf\xb0\x26\xb9\x22\x3c\xdc\x3e\x5e\xdc\xdd\x3e\x42\x66\x31\x29\x6c\x22\x12\xf8\xf4\xe5\xdb\x57\x70\x85\x80\x7c\x1e\x50\x30\xb1\xaa\xae\xe3\xaa\xc9\xde\x5f\xdc\x6c\x98\x14\x5c\xac\xba\xe6\xdd\x6f\xd1\x73\xb1\xce\x7e\x2e\xa6\x7d\xbe\x3e\x95\x38\xeb\x29\x71\xf6\xbe\xc4\xac\xff\x18\x1f\xcd\xd1\x7b\x90\x86\x88\x99\x21\xf9\x89\x21\xb9\xb9\x21\xf9\x89\x21\xad\x12\x1d\x86\xe4\xa7\x86\xbc\x33\x47\xef\x41\x1a\x22\x55\x64\x1e\x8e\xc1\x1a\xa9\xa8\x7c\x00\x97\x54\xe5\x2e\xa8\x4e\xad\x3a\x79\x5c\x20\xcc\x74\x26\x69\x3c\x3c\x5e\xce\xd1\xd2\xc1\xf1\x72\x8e\x96\x0e\x8f\x97\x53\x5b\x3a\x3c\x5e\x4e\x6d\xe9\xf0\x78\xe5\x43\x0d\x39\x91\x18\x64\xc8\x9b\x31\x86\x18\xf2\x66\x90\x4a\xe4\xb5\x71\x7d\x32\xa5\xf8\x4a\xdc\xa7\x1d\xf7\xe6\x3f\x07\xff\xc5\xec\xed\xc1\x5f\xd6\xde\xbf\x5e\x66\xb0\xb7\x17\x26\x97\xcb\x65\x0b\xe3\xb2\x9b\x71\x69\xc2\x70\x5b\x18\x6e\x37\x03\xae\xd1\x35\xe9\xb5\x50\xbc\x1e\x14\xcf\x88\x72\xde\x42\x39\xef\x41\x39\x37\xa2\x38\x2d\x14\xa7\x07\xc5\x31\xa2\xe4\x2d\x94\xbc\x07\x25\x37\xa2\x3c\xb5\x50\x9e\x7a\x50\x9e\x8c\x28\xd3\x69\x0b\xa6\x2a\x76\x70\xa6\x53\x23\xd0\x7c\xde\x02\xaa\x8a\x1d\xa0\xf9\xdc\x08\x34\x69\xe1\x4c\x7a\x60\x26\x86\x2f\x97\x2d\x98\xaa\xd8\xc1\x29\x5f\x41\x8b\x43\xee\x6f\x00\x00\x00\xff\xff\x48\x67\x9e\x3a\x61\x0c\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
