// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xdf\x6f\xdb\x38\x12\xc7\xdf\x03\xe4\x7f\x18\x1b\xaa\x63\xa7\xb6\x75\x45\xdf\x92\x38\xe9\x5d\x9f\x0e\x28\x2e\x40\x0f\x7d\x5a\xb4\x0e\x25\x8d\x2c\x36\x32\xa9\x25\xa9\xc4\xda\x28\xff\xfb\x82\xa2\x24\xcb\x12\xfd\x43\x4d\xb7\x40\x1d\x7b\x34\xe4\xe7\xcb\x19\x92\x43\xf1\xe6\x2e\x89\x92\xf3\xb3\xf3\x33\xf7\xf2\xf2\xfc\x0c\x2e\xe1\x13\xe3\x94\xc9\x04\x7d\x45\x39\x83\x7f\x7f\xf9\x62\xac\x31\x65\x0a\x05\x98\x7f\x01\x95\xc4\x8b\x51\x3f\x71\x77\xda\xfa\x7c\xbd\x46\xa6\xe0\x2b\x26\x5c\x28\x50\x28\x18\x11\x19\xe0\x26\x11\x28\x25\xe5\x4c\x82\x8a\x88\x02\x9f\x30\xf0\x10\x24\x5d\x27\x31\x0d\x29\x06\x73\xd3\xde\xc3\x90\x0b\x04\x70\x36\x70\xa7\x3f\xae\xc0\xc9\xcc\x13\x12\x1a\xbc\x7e\x52\x59\xdd\xf3\xb3\x30\x65\x46\x68\x89\xfa\xbf\xe9\x31\x1b\x4f\xe0\xe5\xfc\x0c\xc0\x28\x03\xdd\xc3\x9a\x64\x1e\x82\xcf\xd3\x38\x00\x81\x49\x4c\x7c\x04\x15\x61\x2d\xf2\x99\xaa\x08\x7e\xa6\x52\x81\xe3\x73\x16\x54\xcd\x54\x96\x20\x78\x9c\xc7\x4d\xb3\xab\xff\x14\xbf\xe1\x0e\x94\x48\x11\xae\x20\x24\xb1\xc4\x6b\x1d\x8e\x03\xd8\x67\x41\x15\x02\x91\xf0\x30\xd6\x7d\x4e\x8a\x3e\x1e\x76\x58\x30\xf8\x07\x68\x55\xd8\x6a\x54\x48\x37\xcd\x58\x16\xb6\x24\x15\x08\xce\xa6\x09\x6d\xe4\xa1\x1f\xec\xce\x06\xbb\xab\x61\x45\xef\x54\x4a\x54\x63\x67\x33\xd9\x81\xbc\x1e\x9a\x51\x09\x57\xc8\x14\x25\x31\xf0\x04\x05\x29\x52\x9f\x08\xf4\x31\x40\xe6\xa3\xee\x31\x45\xd9\x9d\x4c\x23\x70\xd6\x44\x3e\xc2\x62\x01\xff\xba\x06\xd7\xd5\x5f\x22\x22\x21\xa2\xab\x08\x45\xb3\x07\x15\x11\x06\xa3\xdd\x39\x37\xde\xf6\x30\x29\xba\x68\x4f\xbe\x6d\xfb\x7a\xde\xb9\xf0\x3f\xae\xf0\x0a\x9e\x51\x4f\x36\x2d\xfd\xa1\xa1\x63\xb0\xd0\xe1\xd1\xc1\x22\x1d\xf9\x80\x4f\xc8\xca\x3e\x68\x08\xb4\x5e\x2d\x3e\x49\x57\x91\x32\xf3\xf4\x41\x4f\x15\x3f\x42\xff\xf1\x3e\x79\x28\xd7\x94\xfe\x25\xc1\xe3\x2a\x32\xc1\x31\xd3\xc7\x75\x41\xfb\x4a\x28\x26\x1c\x50\x09\x8c\x2b\x20\xb0\xe2\x3c\xa8\xfc\x20\xe4\x02\x3c\xaa\x9e\xa9\xc4\x6d\x60\x27\x73\xd3\xbe\xec\xc5\x64\x80\xb2\x15\x3c\x50\xf6\x44\x62\x1a\x98\x8e\xa7\x7a\x79\xa3\xaf\x30\x00\x96\xae\x3d\x14\x10\xf2\x94\x05\xc5\x9a\x79\x00\x2a\xcb\xe6\x9a\x5a\xe8\x8c\x30\x4e\xc2\x34\x9e\x82\x87\x3e\x49\xa5\x59\x84\x82\x73\x05\x3c\x2c\xbe\x27\x82\x7b\x31\xae\xb5\xd4\x6d\x6c\x4a\x2d\xf0\xdf\x26\x1a\x88\x40\x20\x20\x50\xa6\x71\xd9\x9c\xa8\x79\x3d\x4f\xe1\xd3\x33\x11\x4c\x2b\x3e\x92\xee\x72\x3e\x12\x96\x2d\xf1\xcf\xa5\x47\x15\x61\xc1\x95\x49\x24\x80\xb3\xd4\xcd\x9d\xa5\x4e\xde\xf2\xba\xb6\x8d\xea\x07\x85\xed\xb5\xc3\x1c\x9c\xcc\x64\x56\xe8\x60\x1f\x74\x70\x00\xba\xe8\x33\xd2\x8f\xd6\xa1\xee\x1f\xeb\xc1\xc1\xf6\x19\xad\x0d\x3c\xd8\x0b\x1e\xec\x80\x7b\xe6\x36\xef\xe4\x96\x8b\x6e\x6a\xf3\x1d\x6a\xfe\xb6\xd4\xe6\xdd\xd4\xee\x32\x07\xfb\x98\x6f\xc8\x6c\xde\xcd\x6c\x7b\xa0\xfb\x47\xfa\xeb\x89\xcd\x2d\x89\x6d\x0f\x76\xff\x68\x9b\xdc\x83\xdb\x3e\x91\x92\xae\x98\xb6\x9c\x7e\x80\x58\xe8\x8f\xf7\xa6\xa6\xb4\x4e\x10\xef\x17\x95\xb9\xb9\x8b\x1b\xc8\x7d\x72\xf4\xec\xb0\x53\xe9\x8a\xbe\xda\x95\xae\x30\x1e\x2c\xab\x4d\x75\xa7\xc3\x66\x36\xd8\xec\x34\xd8\xac\x2f\xec\xd2\x06\xbb\x3c\x0d\x76\xd9\x17\xe6\xda\x60\xee\x69\x30\xb7\x2f\xec\x9d\x0d\xf6\xee\x34\xd8\xbb\xbe\xb0\x91\x0d\x36\x3a\x0d\x36\xea\x0b\xcb\x6d\xb0\xfc\x34\x58\xde\x17\xf6\xc3\x06\xfb\x71\x1a\xec\x47\x5f\xd8\xcd\x8d\x8d\x66\xac\xc7\x71\x37\x37\x7d\x79\xb7\xb7\x36\x9e\xb1\x1e\xe7\xdd\xde\xf6\xe5\xcd\x6d\xb8\xf9\x69\xb4\x79\xff\xe3\xb9\x8d\x66\xac\xc7\x71\xc5\x39\xbe\xc7\x49\x3d\x0c\x67\x5e\x36\xe3\x0c\x61\x4d\xa5\x22\x8f\xdd\x13\x3a\xf9\xc3\xe7\x29\x53\x63\x87\x4c\xbe\xb7\x76\xeb\xc6\xa3\xd9\x87\xef\xed\x3d\x9b\x87\xe1\x7f\xb2\x0f\x96\x1d\xbb\xaa\x5f\xfa\x30\x49\xbc\x38\x03\xfd\xfe\xca\x02\x0c\x40\x71\xd0\xa7\xce\xa2\xd7\xd9\x87\xe2\x0c\xce\x80\xb2\x00\x37\xcd\x70\x40\x8b\x0d\x33\x28\xe8\x75\x2c\x9a\x92\xbb\xb1\x3f\x8a\x97\xf4\x2f\xe4\xe1\x51\xbe\x71\xdb\x23\x60\xfb\xf0\xfb\xb1\x6c\xc8\x54\x26\xd4\xa7\x3c\xd5\x67\xe6\x55\x6a\x2a\x29\x17\x01\x8a\x56\x2a\xa4\x12\x09\x97\xe3\x0b\xf7\x62\x0a\x8e\x9c\xec\x26\xa3\x7c\xe8\xc8\x29\x5c\xb8\x17\x93\x4e\x01\x15\x2b\x79\xaf\xfb\x3c\x94\x8f\x6a\x5a\x14\x31\xf1\xb9\x10\xe8\x2b\x88\x48\x26\x15\xf1\x1f\x41\xbf\x8c\x30\xc4\x20\xc6\xb6\xce\xc6\xd0\xf5\x61\xa3\x6a\xb1\x34\xde\xf5\x89\xa3\x92\xf8\x32\xf4\x23\x22\x86\xaf\x53\x70\x5e\x86\x97\xc3\xd7\xc9\x75\xfd\x9c\x1e\x73\x38\xd2\x43\xea\x49\x25\x96\x65\xf6\x5f\x86\x52\x75\x9c\x5e\xf7\xcf\x07\xeb\xf0\xcb\xeb\x88\x22\x61\x3a\x02\x32\xf5\x7e\x6a\xfb\xfe\x10\x24\x02\x57\xcb\xb2\xd9\xd8\x59\x4e\xa1\xf8\x6f\x11\xf3\x2b\x3a\x8c\x06\x25\xb4\xe3\xe1\x2c\xe8\x40\x94\x8d\x9a\x19\xb0\x29\xdb\x1b\xed\x8e\xf3\x70\xf8\xb6\x68\x06\x18\xd3\x35\xd5\x33\xf6\xa4\x71\xe0\x26\x89\x79\x50\xe2\x6d\x3a\x4f\x5d\x58\xa9\x24\x2b\xd4\x6f\xa1\x9d\x37\xe9\xf6\x7e\x47\x43\x18\x3b\x54\x7e\xfb\xfa\x45\x57\xf8\x27\x14\x34\xcc\x26\x30\x9f\xcf\x77\x97\x5b\xd3\xad\xeb\xd7\x5c\x79\x25\xf1\x3e\x91\x07\x96\xde\x37\x89\x01\x8c\x5a\xea\xb8\x00\xfe\x84\xc2\xdc\x70\x95\xd7\x01\x72\x0a\x09\x8a\x88\x24\x52\x73\xa9\xac\x37\xaf\xbb\xf6\x29\x66\xd4\xa8\x17\x8d\x8b\xb2\x8d\xc5\x96\xed\x16\x12\xfb\xc9\x66\x47\x6a\xde\x4f\x6a\x9e\x1f\x92\x9a\xe7\xbf\x2c\x35\x3f\xa1\xda\xf9\x24\x8e\xfb\x5f\x73\x52\xb6\x24\x42\x90\x6c\xec\x3c\x4e\xa1\xf8\xb6\x7c\xc4\x4c\x8e\x1d\x15\x51\x39\xbb\x0d\x88\x22\x93\xd6\x16\x5c\x7b\x2d\x71\x43\xa5\x92\x45\xd3\xa6\x7f\x7b\x6a\x68\x65\x47\x6f\x45\x3f\x17\x87\x84\x52\x67\xa6\x6b\x94\x85\x83\xd9\x14\x9c\x02\xd0\xa8\x52\xc7\xfc\xcc\x45\xdf\x76\x9c\xfa\x61\x73\xa4\x64\x72\x74\x89\x31\xae\x66\x7a\x15\xfb\x6a\x86\x8c\xa7\xab\x08\x7c\xbe\x4e\x88\xa0\xd2\xb2\xb2\x2a\xd2\xf0\x39\x22\x6a\x68\xa9\x61\x16\x8f\x69\x71\xa9\xda\x89\x9c\x61\x7e\x5e\xd7\x2f\x84\xdb\xc0\xed\x4c\x56\xc6\x59\xa9\xaf\x21\x0c\xc6\xba\xca\x2f\x16\x8b\x49\xd5\xc0\x35\x5f\xcc\x0b\x7a\x4a\xe2\x7a\xc3\xdc\xde\x44\x68\x19\xd7\x5b\x63\x71\xd5\xbb\x7d\x49\x6e\x7a\x56\xd7\xbf\x95\xb5\xf8\xbd\xc7\x97\xa5\x71\xdc\x30\xea\x9f\x3b\x9e\xe5\xfe\x7a\x7c\x74\xe5\x56\x7a\x68\x90\xe5\x3a\x2a\x3d\xcb\xd5\xd5\xb5\x67\xad\xa0\x14\x47\xcb\xc5\x76\x4b\xe8\x1f\xe9\x81\x3d\xd2\x8c\x2b\x7b\xb4\x07\xf6\x68\x0f\xba\x11\x1c\xec\x8b\xb6\xdd\xd7\x16\xed\xc1\x6f\x8c\xf6\xe0\xed\xd1\x76\x36\xe6\x02\xfa\x70\xb0\x3f\x8a\xa0\xae\x9a\xba\xaa\x55\x0b\x07\xd6\xa9\x54\x7a\x5b\x2b\x02\xf6\x1c\x21\xab\x34\xb2\x55\x89\x94\x7b\x84\x78\x2d\x21\xdb\x7d\xc1\xd3\xa5\x7f\xd2\x4f\x90\xd9\x46\x24\x12\xe1\x47\xbf\x51\x54\xb3\xdb\x86\xb0\xd7\xf3\xb3\xbf\x03\x00\x00\xff\xff\xa4\x4e\x82\x0b\x2c\x1b\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
