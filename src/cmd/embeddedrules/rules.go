// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xdb\x6f\xdb\xbe\x15\xc7\xdf\x03\xe4\x7f\x38\x36\x54\xc7\x4e\x7d\x59\xd1\xb7\x24\x4e\xba\xed\x69\x40\xb1\x00\x1d\xfa\x34\x34\x0e\x25\x1d\x59\x6c\x64\x52\x23\xa9\xc4\x5a\x94\xff\x7d\xa0\x28\xc9\xba\xd0\x17\x25\xdd\x0f\xf8\xa5\xd6\xe1\xe5\xf3\xe5\x39\xbc\x1c\xf2\xe6\x2e\x0e\xe3\xf3\xb3\xf3\xb3\xc5\xe5\xe5\xf9\x19\x5c\xc2\x37\xc6\x29\x93\x31\x7a\x8a\x72\x06\x7f\xfd\xfe\xdd\x58\x23\xca\x14\x0a\x30\xff\xf9\x54\x12\x37\x42\x5d\xb2\x68\xb4\xf5\xf8\x66\x83\x4c\xc1\x0f\x8c\xb9\x50\xa0\x50\x30\x22\x52\xc0\x6d\x2c\x50\x4a\xca\x99\x04\x15\x12\x05\x1e\x61\xe0\x22\x48\xba\x89\x23\x1a\x50\xf4\xe7\xa6\xbd\x8b\x01\x17\x08\xe0\x6c\xe1\x4e\xff\xb9\x02\x27\x35\x25\x24\x30\x78\x5d\x52\x5a\x17\xe7\x67\x41\xc2\x8c\xd0\x02\xf5\x2f\xd3\x63\x3a\x9e\xc0\xeb\xf9\x19\x80\x51\x06\xba\x87\x0d\x49\x5d\x04\x8f\x27\x91\x0f\x02\xe3\x88\x78\x08\x2a\xc4\x4a\xe4\x0b\x55\x21\xfc\x4e\xa4\x02\xc7\xe3\xcc\x2f\x9b\xa9\x34\x46\x70\x39\x8f\xea\xe6\x85\xfe\x27\xff\x86\x3b\x50\x22\x41\xb8\x82\x80\x44\x12\xaf\xb5\x3b\x0e\x60\x5f\x04\x55\x08\x44\xc2\xe3\x58\xf7\x39\xc9\xfb\x78\x6c\xb0\x60\xf0\x7f\xa0\x95\x6e\xab\x50\x01\xdd\xd6\x7d\x99\xdb\xe2\x44\x20\x38\xdb\x3a\xb4\x16\x87\x7e\xb0\x3b\x1b\xec\xae\x82\xe5\xbd\x53\x29\x51\x8d\x9d\xed\xa4\x01\x79\x3b\x34\xa3\x62\xae\x90\x29\x4a\x22\xe0\x31\x0a\x92\x87\x3e\x16\xe8\xa1\x8f\xcc\x43\xdd\x63\x82\xb2\x3b\x99\x46\xe0\x6c\x88\x7c\x82\xe5\x12\xfe\x72\x0d\x8b\x85\xfe\x11\x12\x09\x21\x5d\x87\x28\xea\x3d\xa8\x90\x30\x18\x35\xe7\xdc\x78\xd7\xc3\x24\xef\xa2\x3d\xf9\x76\xed\xab\x79\xb7\x80\x7f\x72\x85\x57\xf0\x82\x7a\xb2\x69\xe9\x8f\x35\x1d\x83\xa5\x76\x8f\x76\x16\xe9\xc8\x07\x7c\x46\x56\xf4\x41\x03\xa0\xd5\x6a\xf1\x48\xb2\x0e\x95\x99\xa7\x8f\x7a\xaa\x78\x21\x7a\x4f\xf7\xf1\x63\xb1\xa6\xf4\x97\x04\x97\xab\xd0\x38\xc7\x4c\x9f\xc5\x02\x74\x5d\x09\xf9\x84\x03\x2a\x81\x71\x05\x04\xd6\x9c\xfb\x65\x3d\x08\xb8\x00\x97\xaa\x17\x2a\x71\xe7\xd8\xc9\xdc\xb4\x2f\x7a\x31\x11\xa0\x6c\x0d\x8f\x94\x3d\x93\x88\xfa\xa6\xe3\xa9\x5e\xde\xe8\x29\xf4\x81\x25\x1b\x17\x05\x04\x3c\x61\x7e\xbe\x66\x1e\x81\xca\xa2\xb9\xa6\xe6\x3a\x43\x8c\xe2\x20\x89\xa6\xe0\xa2\x47\x12\x69\x16\xa1\xe0\x5c\x01\x0f\xf2\xdf\xb1\xe0\x6e\x84\x1b\x2d\x75\xe7\x9b\x42\x0b\xfc\xa3\x8e\x06\x22\x10\x08\x08\x94\x49\x54\x34\x27\x6a\x5e\xcd\x53\xf8\xf6\x42\x04\xd3\x8a\x8f\x84\xbb\x98\x8f\x84\xa5\x2b\xfc\xcf\xca\xa5\x8a\x30\xff\xca\x04\x12\xc0\x59\xe9\xe6\xce\x4a\x07\x6f\x75\x5d\xd9\x46\x55\x41\x6e\x7b\xeb\x30\x07\x27\x33\x99\x15\x3a\xd8\x07\x1d\x1c\x80\x2e\xfb\x8c\xf4\xab\x75\xa8\xfb\xc7\x7a\x70\xb0\x7d\x46\x6b\x03\x0f\xf6\x82\x07\x0d\x70\xcf\xd8\x66\x9d\xd8\x72\xd1\x0d\x6d\xd6\xa0\x66\x1f\x0b\x6d\xd6\x0d\x6d\x93\x39\xd8\xc7\xfc\x40\x64\xb3\x6e\x64\xdb\x03\xdd\x3f\xd2\xf7\x07\x36\xb3\x04\xb6\x3d\xd8\xfd\xa3\xad\x73\x0f\x6e\xfb\x44\x4a\xba\x66\xda\x72\x7a\x02\xb1\xd4\x7f\x3e\x9b\x33\xa5\x95\x41\x7c\x5e\x96\xe6\xfa\x2e\x6e\x20\xf7\xf1\xd1\xdc\xa1\x71\xd2\xe5\x7d\xb5\x4f\xba\xdc\x78\xf0\x58\xad\xab\x3b\x1d\x36\xb3\xc1\x66\xa7\xc1\x66\x7d\x61\x97\x36\xd8\xe5\x69\xb0\xcb\xbe\xb0\x85\x0d\xb6\x38\x0d\xb6\xe8\x0b\xfb\x64\x83\x7d\x3a\x0d\xf6\xa9\x2f\x6c\x64\x83\x8d\x4e\x83\x8d\xfa\xc2\x32\x1b\x2c\x3b\x0d\x96\xf5\x85\x3d\xd8\x60\x0f\xa7\xc1\x1e\xfa\xc2\x6e\x6e\x6c\x34\x63\x3d\x8e\xbb\xb9\xe9\xcb\xbb\xbd\xb5\xf1\x8c\xf5\x38\xef\xf6\xb6\x2f\x6f\x6e\xc3\xcd\x4f\xa3\xcd\xfb\xa7\xe7\x36\x9a\xb1\x1e\xc7\xe5\x79\x7c\x8f\x4c\x3d\x08\x66\x6e\x3a\xe3\x0c\x61\x43\xa5\x22\x4f\xdd\x0c\x9d\xfc\xdb\xe3\x09\x53\x63\x87\x4c\x7e\xb5\x76\xeb\x5a\xd1\xec\xcb\xaf\xf6\x9e\xcd\x83\xe0\x6f\xe9\x17\xcb\x8e\x5d\x9e\x5f\x3a\x99\x24\x6e\x94\x82\xbe\xbf\x32\x1f\x7d\x50\x1c\x74\xd6\x99\xf7\x3a\xfb\x92\xe7\xe0\x0c\x28\xf3\x71\x5b\x77\x07\xb4\xd8\x30\x83\x9c\x5e\xf9\xa2\x2e\xb9\xeb\xfb\xa3\x78\x49\xff\x8b\x3c\x38\xca\x37\xd5\xf6\x08\xd8\x15\xfe\x3a\x16\x0d\x99\xc8\x98\x7a\x94\x27\x3a\x67\x5e\x27\xe6\x24\xe5\xc2\x47\xd1\x0a\x85\x54\x22\xe6\x72\x7c\xb1\xb8\x98\x82\x23\x27\xcd\x60\x14\x85\x8e\x9c\xc2\xc5\xe2\x62\xd2\x39\x40\xc5\x5a\xde\xeb\x3e\x0f\xc5\xa3\x9c\x16\xb9\x4f\x3c\x2e\x04\x7a\x0a\x42\x92\x4a\x45\xbc\x27\xd0\x97\x11\x86\xe8\x47\xd8\xd6\x59\x1b\xba\x4e\x36\xca\x16\x2b\x53\xbb\xca\x38\x4a\x89\xaf\x43\x2f\x24\x62\xf8\x36\x05\xe7\x75\x78\x39\x7c\x9b\x5c\x57\xe5\xf4\x58\x85\x23\x3d\x24\xae\x54\x62\x55\x44\xff\x75\x28\x55\xa7\xd2\xdb\xfe\xf9\x60\x1d\x7e\xf1\x1c\x91\x07\x4c\x7b\x40\x26\xee\x6f\x6d\xdf\xef\x82\x58\xe0\x7a\x55\x34\x1b\x3b\xab\x29\xe4\xff\x5b\xc4\xbc\x47\x87\xd1\xa0\x84\xae\x78\x38\x0a\xda\x11\x45\xa3\x7a\x04\x6c\xca\xf6\x7a\xbb\x53\x79\x38\xfc\x98\x37\x7d\x8c\xe8\x86\xea\x19\x7b\xd2\x38\x70\x1b\x47\xdc\x2f\xf0\x36\x9d\x07\x17\x16\xe3\x6a\xa6\x11\x9e\x9a\x21\xe3\xc9\x3a\x04\x8f\x6f\x62\x22\xa8\xe4\xac\xbd\xcd\x51\xb6\x22\x42\x90\x74\x3c\x7c\x09\x89\x1a\x5a\x16\x98\xa5\xc6\x34\x7f\xf1\xe9\xac\x35\xc3\xfc\xfb\xa6\xca\x56\x77\x0e\x6a\xb8\x88\x71\x56\xe8\xab\x09\x83\xb1\xde\x82\x96\xcb\xe5\xa4\x6c\xb0\x30\x3f\xcc\xed\x21\x21\x51\x15\xcd\xdd\x35\x49\xcb\xb8\xde\x19\xf3\x77\xa8\x5d\x06\x5f\xaf\x59\xbe\x4d\x95\xd6\xfc\x7b\x4f\x5d\x96\x44\x51\xcd\xa8\x3f\x1b\x35\x8b\xe0\x1f\x1f\x5d\x11\xe7\x43\x83\x2c\x1e\xd8\x8a\x9a\xc5\xd1\xd6\xb5\xa7\x2d\xa7\xe4\xe7\xde\xb2\x3c\x62\xdf\xe7\xeb\x81\xdd\xd7\x8c\x2b\xbb\xbf\x07\x76\x7f\x0f\xba\x3e\x1c\xec\xf3\xb7\xbd\xae\xcd\xdf\x83\x3f\xe8\xef\xc1\xc7\xfd\xed\x6c\xcd\xfb\xd8\x31\x77\x7f\x15\x7e\xb5\xac\x81\x07\xd5\xe2\x81\x4d\x22\x95\xbe\x1d\xe6\x2e\x7b\x09\x91\x95\x2a\xd9\xba\x80\xca\x3d\x52\xdc\x96\x94\x6a\x3d\x3a\xae\xde\x9b\xca\x0d\xf5\x44\x41\x79\xd3\x95\x44\x22\xbc\xf0\x0f\x8a\xaa\x77\x5b\x13\x76\xea\xf9\x9f\x48\xb2\x46\x2d\xaf\xf3\xe0\xd7\xd9\xaf\x02\x18\x3b\x54\xfe\xfc\xf1\x5d\x5f\x44\x9e\x51\xd0\x20\x9d\xc0\x7c\x3e\x6f\x6d\x5a\xb5\x6a\xdd\x7a\xf5\x4d\xab\x20\xde\xc7\xf2\x40\x86\xf0\x53\xa2\x0f\xa3\x96\x3a\x2e\x80\x3f\xa3\x30\x0f\xf1\xc5\xab\xa5\x9c\x42\x8c\x22\x24\xb1\xd4\x5c\x2a\xab\x1c\xeb\xae\x7d\xd9\x1a\xd5\xd2\xda\xda\x7b\xfe\xd6\x62\x4b\x9b\xf9\xae\xfd\x02\xd6\x90\x9a\xf5\x93\x9a\x65\x87\xa4\x66\xd9\xbb\xa5\x1e\xba\xbe\xe5\x42\xbb\x32\x19\x48\xbe\x41\x15\xea\xb1\xe4\xcf\x2a\x1b\x92\xe6\x0f\xb5\x2e\x02\x01\x96\x6c\x50\x50\x2f\x7f\x6a\x6d\xe0\x07\x63\xca\x54\x16\x44\x9c\xa8\x49\x5b\x5a\xb3\x2c\x6d\xe6\x0b\xbb\x77\xa1\xca\xb3\xc5\x57\xd6\xf8\x7a\x28\xbf\xcc\xbb\xd0\xff\x02\x00\x00\xff\xff\x8f\x3d\x9d\x70\xa4\x1a\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": {nil, map[string]*bintree{
		"rules.php": {embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
