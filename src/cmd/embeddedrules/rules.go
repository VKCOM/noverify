// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x97\x5f\x6f\xea\x36\x14\xc0\xdf\xf9\x14\x07\x94\x52\xe0\x02\x59\xb5\xb7\xb6\xb4\x77\x7b\x9b\x74\xb5\x4a\xdb\xe3\xd4\x82\x93\x9c\x10\xdf\x06\x3b\xb3\x9d\x5b\x58\xe1\xbb\x4f\xb6\x93\x12\xc0\x81\xa4\x5b\xa5\x22\x38\xf6\x39\xbf\xf3\x2f\x3e\xce\xfd\x63\x96\x64\x9d\x8e\x3f\x1a\x75\x60\x04\x5f\x19\xa7\x4c\x66\x18\x2a\xca\x19\xfc\xf2\xed\x9b\x11\xa6\x94\x29\x14\x60\xff\x22\x2a\x49\x90\x62\x07\x46\xfe\x5e\x2d\xe4\xab\x15\x32\x05\x7f\x60\xc6\x85\x02\x85\x82\x11\xb1\x01\x5c\x67\x02\xa5\xa4\x9c\x49\x50\x09\x51\x10\x12\x06\x01\x82\xa4\xab\x2c\xa5\x31\xc5\x68\x6a\xd4\x03\x8c\xb9\x40\x00\x6f\x0d\x8f\xfa\xe3\x16\xbc\x8d\x59\x20\xb1\x05\xeb\x85\x42\xe8\x77\xe2\x9c\x59\xff\x0a\xcc\x9f\xd6\xda\x66\x30\x84\xf7\x0e\x80\xf1\x09\xb4\xf6\x8a\x6c\x02\x84\x90\xe7\x69\x04\x02\xb3\x94\x84\x08\x2a\xc1\x0f\xf7\xde\xa8\x4a\xe0\x7b\x2e\x15\x78\x21\x67\x51\xa1\xa5\x36\x19\x42\xc0\x79\x5a\x91\xfa\x1d\xb0\xbf\xe0\x11\x94\xc8\x11\x6e\x21\x26\xa9\xc4\xbb\xce\x19\xe0\x9b\xa0\x0a\x81\x48\x58\x0c\xb4\xb9\xa1\x31\xb0\xa8\x52\xa0\xfb\xff\x72\xca\x34\x95\x90\x98\xae\x2b\xa9\x33\xa2\x2c\x17\x08\xde\x7a\x4f\xab\xa4\xbc\x05\xe5\xd1\x41\x79\x2c\x29\xda\x2e\x95\x12\xd5\xc0\x5b\x0f\xab\xe6\x77\xb5\x1d\x93\x71\x85\x4c\x51\x92\x02\xcf\x50\x10\x53\xde\x4c\x60\x88\x11\xb2\x10\xb5\xb5\x1c\xe5\x49\xb3\xf4\xc1\x5b\x11\xf9\x0a\xb3\x19\xfc\x74\x07\xbe\xaf\xbf\x24\x44\x42\x42\x97\x09\x8a\xaa\x01\x95\x10\x06\xfd\x83\x9e\x1a\xec\x0d\x0c\x8d\x85\xc3\xe6\xda\x2b\x97\x7d\xe5\xc3\xef\x5c\xe1\x2d\xbc\xa1\xee\x26\xed\xf5\xa2\xe2\x43\x77\xa6\x53\xa2\x13\x44\x4e\x3c\x07\xfc\x81\xcc\x9a\xa0\x31\xd0\x8f\xe7\x20\x24\xf9\x32\x51\xb6\x0f\x17\xba\x23\xc2\x04\xc3\xd7\xa7\x6c\x51\x3c\x2d\xfa\x97\x84\x80\xab\xc4\xa6\xc5\x74\x89\xef\x83\xde\x2a\xc1\x74\x15\x50\x09\x8c\x2b\x20\xb0\xe4\x3c\x2a\xb7\x41\xcc\x05\x04\x54\xbd\x51\x89\xfb\x8c\x0e\xa7\x46\xdd\xda\xb0\x89\xa7\x6c\x09\x0b\xca\x7e\x90\x94\x46\xd6\xec\x58\x3f\xb5\x18\x2a\x8c\x80\xe5\xab\x00\x05\xc4\x3c\x67\x91\x79\x22\x16\x40\xa5\xd5\xd6\x48\xe3\x63\x82\x69\x16\xe7\xe9\x18\x02\x0c\x49\x2e\xed\x03\x26\x38\x57\xc0\x63\xf3\x3d\x13\x3c\x48\x71\xa5\xfd\xdc\xa7\xc5\x3a\x02\xbf\x55\xc1\x40\x04\x02\x01\x81\x32\x4f\x0b\x6d\xa2\xa6\x45\x4b\xc2\xd7\x37\x22\x98\xf6\xf6\x42\x89\x6d\xf7\x11\xb6\x99\xe3\xdf\xf3\x80\x2a\xc2\xa2\x5b\x53\x3e\x00\x6f\xae\x95\xbd\xb9\x2e\xd9\xfc\xae\x14\xf5\x3f\xe4\x5a\xb4\x3b\xc6\x75\x9b\xe2\x98\x8b\xd7\xad\xe1\x75\x6b\x79\xb3\x16\xf1\xfd\xec\x0a\xb0\x36\xc2\x33\x21\xb6\x88\xd1\xc1\xec\xd6\x31\xbb\x15\x66\xbb\x32\x6e\x8f\xcb\xc8\xc5\x49\x15\xb7\x55\xde\xf6\xbf\x54\x71\x7b\x52\xc5\x03\x5c\xb7\x06\xf7\xe9\x22\x6e\x4f\x8a\x78\x14\x5e\x6d\x7c\x9f\xad\xe1\xf6\xb4\x86\x47\x21\xd6\xc6\xb8\x47\xd6\x9f\xde\x44\x4a\xba\x64\x5a\xd2\x78\xce\xcf\xf4\xc7\x17\x33\x15\x8e\x06\xfd\x97\x59\x21\xad\x1c\xc6\x16\xf0\x94\x5d\x18\xf1\x07\x33\xca\xd8\x39\x9a\x51\x46\x56\x3f\x09\x2b\x4e\x35\xa5\x4c\x1c\x94\x49\x03\xca\xa4\x15\x65\xe4\xa0\x8c\x1a\x50\x46\xad\x28\xbe\x83\xe2\x37\xa0\xf8\xad\x28\x57\x0e\xca\x55\x03\xca\x55\x2b\x4a\xdf\x41\xe9\x37\xa0\xf4\x5b\x51\xb6\x0e\xca\xb6\x01\x65\xdb\x8a\xf2\xe2\xa0\xbc\x34\xa0\xbc\xb4\xa2\xdc\xdf\x3b\x30\x56\x78\x81\x73\x7f\xdf\x0a\xf4\xf0\xe0\x00\x59\xe1\x05\xd0\xc3\x43\x2b\xd0\xd4\xc1\x99\x36\xc0\x4c\x5b\xde\x85\x1d\x18\x2b\xbc\xc0\x31\x37\xe6\x86\xb7\xe2\x38\x9e\x04\x9b\x09\x67\x08\x2b\x2a\x15\x79\x3d\xb9\x0d\x93\xbf\x42\x9e\x33\x35\xf0\xc8\xf0\xf9\xf0\x48\xad\xac\x4c\x6e\x9e\x0f\x0f\x56\x1e\xc7\xbf\x6e\x6e\x4e\x8e\xd5\x72\xac\xe8\xcb\x1b\x09\xd2\x0d\xe8\x37\x40\x16\x61\x04\x8a\x83\xbe\xe5\x19\x8b\x93\x1b\x73\xdd\x65\x40\x59\x84\xeb\x4a\x02\xe0\x08\x0b\x13\xd0\xe0\x32\xfc\xaa\xab\x47\x79\xbe\x08\x96\xf4\x1f\xe4\xf1\x25\xb2\xdd\xe5\x44\xef\x97\x9e\xcf\xa5\x5e\xe6\x32\xa3\x21\xe5\xb9\xbe\x97\x2e\x73\x3b\xdb\xb8\x88\x50\x1c\xe6\x5d\x2a\x91\x71\x39\xb8\xf6\xaf\xc7\xe0\xc9\xe1\x41\xe6\x8b\x35\x4f\x8e\xe1\xda\xbf\x1e\x1e\x8d\x34\xb1\x94\x4f\xda\x5e\x7d\xf2\xcb\xea\x9b\x34\x84\x5c\x08\x0c\x15\x24\x64\x23\x15\x09\x5f\x41\x5f\xf3\x19\x62\x94\xe2\xb1\x87\x1f\xe1\xea\x79\x5f\xee\x9f\xdb\xbd\xe5\xd0\x2f\x7d\x7b\xef\x85\x09\x11\xbd\xdd\x18\xbc\xf7\xde\xa8\xb7\x1b\xde\x95\xcb\xf4\xc2\xfa\x79\xfd\x3c\x90\x4a\xcc\x8b\x3a\x3b\x37\xed\x6a\x2a\xef\x8c\xba\x78\x7d\x37\x15\xd2\x81\xcb\x3c\xf8\xae\xe5\x75\x91\x67\x02\x97\xf3\x42\x69\xe0\xcd\xc7\x60\xfe\xdf\x7b\x52\x1d\xba\xd1\xde\x05\x8b\x57\x42\x6f\x3c\x97\x77\x1d\x7e\xa1\x52\xc9\xb9\xcb\xa7\xba\x04\x9f\xec\xed\xf5\x3e\x9f\xc0\x08\x53\xba\xa2\xba\x2f\x1b\xf8\x8f\xeb\x2c\xe5\x51\x01\x76\x38\xb8\xeb\xfc\x1b\x00\x00\xff\xff\x83\x66\xca\xe8\x37\x12\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
