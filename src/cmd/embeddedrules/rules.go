// Package embeddedrules Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// embeddedrules/rules.php
package embeddedrules

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _embeddedrulesRulesPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xd1\x6f\xdb\xb6\x13\xc7\xdf\x03\xe4\x7f\x38\x1b\x6a\x62\xa7\x76\xf4\x2b\xfa\x96\xc4\x49\x7f\xdb\xd3\x80\x62\x05\xb6\xc7\xa1\xb5\x29\xe9\x64\xb1\x91\x49\x8d\xa4\x6a\x7b\x71\xfe\xf7\x81\xa4\x24\xcb\x16\x65\x4b\x6d\x57\xa0\x8e\x7d\x22\xef\x73\xfc\xde\x91\x3a\xe9\xe1\x29\x4b\xb2\xcb\x8b\xcb\x0b\xff\xe6\xe6\xf2\x02\x6e\xe0\x03\xe3\x94\xc9\x0c\x43\x45\x39\x83\xff\x7f\xfc\x68\xad\x29\x65\x0a\x05\xd8\x7f\x11\x95\x24\x48\x51\x5f\xf1\x0f\xe6\x86\x7c\xb5\x42\xa6\xe0\x0f\xcc\xb8\x50\xa0\x50\x30\x22\xb6\x80\x9b\x4c\xa0\x94\x94\x33\x09\x2a\x21\x0a\x42\xc2\x20\x40\x90\x74\x95\xa5\x34\xa6\x18\xdd\xda\xf9\x01\xc6\x5c\x20\x80\xb7\x81\x27\xfd\x71\x07\xde\xd6\x5e\x21\xb1\xc5\xeb\x2b\xa5\xd5\xbf\xbc\x88\x73\x66\x03\x2d\x50\x7f\x5a\x8f\xdb\xd1\x18\x5e\x2e\x2f\x00\x6c\x64\xa0\x3d\xac\xc8\x36\x40\x08\x79\x9e\x46\x20\x30\x4b\x49\x88\xa0\x12\xac\x82\x5c\x53\x95\xc0\xd7\x5c\x2a\xf0\x42\xce\xa2\x72\x9a\xda\x66\x08\x01\xe7\x69\xdd\xec\xeb\x3f\xe6\x37\x3c\x81\x12\x39\xc2\x1d\xc4\x24\x95\x78\xaf\xe5\x38\x81\x5d\x0b\xaa\x10\x88\x84\xc5\x48\xfb\x1c\x1b\x1f\x8b\x03\x16\x0c\xfe\x03\x5a\x29\x5b\x85\x8a\xe9\xa6\xae\xa5\xb1\x65\xb9\x40\xf0\x36\x75\x68\x2d\x0f\xfd\x60\x4f\x2e\xd8\x53\x05\x33\xde\xa9\x94\xa8\x46\xde\x66\x7c\x00\x79\x3d\x55\x51\x19\x57\xc8\x14\x25\x29\xf0\x0c\x05\x31\xa9\xcf\x04\x86\x18\x21\x0b\x51\x7b\xcc\x51\x36\x8b\xe9\x0a\xbc\x15\x91\xcf\x30\x9b\xc1\xff\xee\xc1\xf7\xf5\x97\x84\x48\x48\xe8\x32\x41\x51\xf7\xa0\x12\xc2\xe0\xea\xb0\xe6\x46\x7b\x0f\x63\xe3\xe2\xb8\xf8\xf6\xf3\xab\xba\xf3\xe1\x77\xae\xf0\x0e\xd6\xa8\x8b\x4d\x87\xbe\xa8\xc5\x31\x98\x69\x79\xb4\x58\xa4\x11\x3e\xe0\x37\x64\x85\x0f\x1a\x03\xad\x76\x4b\x48\xf2\x65\xa2\x6c\x9d\x2e\x74\xa9\x84\x09\x86\xcf\x9f\xb2\x45\xb1\xa7\xf4\x2f\x09\x01\x57\x89\x15\xc7\x96\x8f\xef\x83\x1e\x2b\xc1\x14\x1c\x50\x09\x8c\x2b\x20\xb0\xe4\x3c\x2a\xc7\x41\xcc\x05\x04\x54\xad\xa9\xc4\xbd\xb0\xe3\x5b\x3b\xbf\xf0\x62\x33\x40\xd9\x12\x16\x94\x7d\x23\x29\x8d\xac\xe3\x89\xde\xde\x18\x2a\x8c\x80\xe5\xab\x00\x05\xc4\x3c\x67\x91\xd9\x33\x0b\xa0\xb2\x98\xae\xa9\x26\xce\x04\xd3\x2c\xce\xd3\x09\x04\x18\x92\x5c\xda\x4d\x28\x38\x57\xc0\x63\xf3\x3d\x13\x3c\x48\x71\xa5\x43\xdd\x6b\x53\xc4\x02\xbf\xd5\xd1\x40\x04\x02\x01\x81\x32\x4f\x8b\xe9\x44\xdd\x56\x75\x0a\x1f\xd6\x44\x30\x1d\xf1\x99\x74\x17\xf5\x48\xd8\x76\x8e\x7f\xcf\x03\xaa\x08\x8b\xee\x6c\x22\x01\xbc\xb9\x9e\xee\xcd\x75\xf2\xe6\xf7\x95\xed\xaa\xba\x60\x6c\xaf\x0d\xe6\xa0\x33\x93\x39\xa1\x83\x36\xe8\xe0\x04\x74\xd6\x67\xa5\xef\x9d\x4b\x6d\x5f\xeb\xc9\xc5\xf6\x59\xad\x0b\x3c\x68\x05\x0f\x0e\xc0\x3d\x73\xbb\x6b\xe4\x96\x8b\x66\x6a\x77\x07\xd4\xdd\x8f\xa5\x76\xd7\x4c\xed\x21\x73\xd0\xc6\xfc\x81\xcc\xee\x9a\x99\x3d\x5e\x68\xfb\x4a\xbf\x3f\xb1\x3b\x47\x62\x8f\x17\xdb\xbe\xda\x3a\xf7\xe4\xb1\x4f\xa4\xa4\x4b\xa6\x2d\xdd\x1b\x88\x99\xfe\x78\x6b\xef\x29\x47\x1d\xc4\xdb\x59\x69\xae\x9f\xe2\x16\xf2\x29\x3b\xdb\x3b\x1c\xdc\xe9\x8c\xaf\xe3\x3b\x9d\x31\x9e\xbc\xad\xd6\xa3\xeb\x0e\x9b\xba\x60\xd3\x6e\xb0\x69\x5f\xd8\x8d\x0b\x76\xd3\x0d\x76\xd3\x17\xe6\xbb\x60\x7e\x37\x98\xdf\x17\xf6\xc6\x05\x7b\xd3\x0d\xf6\xa6\x2f\xec\xca\x05\xbb\xea\x06\xbb\xea\x0b\xdb\xb9\x60\xbb\x6e\xb0\x5d\x5f\xd8\x17\x17\xec\x4b\x37\xd8\x97\xbe\xb0\x87\x07\x17\xcd\x5a\xcf\xe3\x1e\x1e\xfa\xf2\x1e\x1f\x5d\x3c\x6b\x3d\xcf\x7b\x7c\xec\xcb\xbb\x75\xe1\x6e\xbb\xd1\x6e\xfb\xb7\xe7\x2e\x9a\xb5\x9e\xc7\x99\x3e\xbe\x47\xa7\x1e\xc7\xd3\x60\x3b\xe5\x0c\x61\x45\xa5\x22\xcf\xcd\x0e\x9d\xfc\x15\xf2\x9c\xa9\x91\x47\xc6\x9f\x8f\x4e\xeb\xda\xa5\xe9\xbb\xcf\xc7\x67\x36\x8f\xe3\x5f\xb6\xef\x1c\x27\x76\x79\xff\xd2\xcd\x24\x09\xd2\x2d\xe8\xe7\x57\x16\x61\x04\x8a\x83\xee\x3a\x8d\xd7\xe9\x3b\xd3\x83\x33\xa0\x2c\xc2\x4d\x5d\x0e\x38\x62\xc3\x14\x0c\xbd\xd2\xa2\x1e\x72\x53\xfb\xb3\x78\x49\xff\x41\x1e\x9f\xe5\xdb\x61\x2d\x01\xec\x2f\x7e\x3e\x97\x0d\x99\xcb\x8c\x86\x94\xe7\xba\x67\x5e\xe6\xf6\x4e\xca\x45\x84\xe2\x28\x15\x52\x89\x8c\xcb\xd1\xb5\x7f\x3d\x01\x4f\x8e\x0f\x93\x51\x5c\xf4\xe4\x04\xae\xfd\xeb\x71\xe3\x06\x2a\x96\xf2\x93\xf6\x79\x2a\x1f\x65\x59\x18\x4d\x42\x2e\x04\x86\x0a\x12\xb2\x95\x8a\x84\xcf\xa0\x1f\x46\x18\x62\x94\xe2\x71\x9c\xb5\xa5\xeb\x66\xa3\x9c\x31\xb7\xa3\xab\x8e\xa3\x0c\xf1\x65\x18\x26\x44\x0c\x5f\x27\xe0\xbd\x0c\x6f\x86\xaf\xe3\xfb\xea\x3a\x3d\x37\xe0\x8c\x87\x3c\x90\x4a\xcc\x8b\xec\xbf\x0c\xa5\x6a\x0c\x7a\x6d\xaf\x07\xe7\xf2\x8b\xd7\x11\x26\x61\x5a\x01\x99\x07\x5f\xb5\xbd\x5d\x82\x4c\xe0\x72\x5e\x4c\x1b\x79\xf3\x09\x98\xff\x8e\x60\xbe\x27\x0e\x1b\x83\x12\x7a\xe0\xe9\x2c\x68\x21\x8a\x49\xf5\x0c\xb8\x22\x6b\x55\xbb\x31\x78\x38\xfc\x31\x35\x23\x4c\xe9\x8a\xea\x8a\xed\xb4\x0e\xdc\x64\x29\x8f\x0a\xbc\x2b\xce\x93\x1b\x8b\x71\x35\xd5\x88\x50\x4d\x91\xf1\x7c\x99\x40\xc8\x57\x19\x11\x54\x72\x76\x7c\xcc\x51\x36\x27\x42\x90\xed\x68\xb8\x4e\x88\x1a\x3a\x36\x98\x63\xc4\xc4\xbc\xf1\x69\xec\x35\xcb\xfc\x75\x55\x75\xab\x7b\x81\x0e\x24\x62\x9c\x15\xf1\xd5\x02\x83\x91\x3e\x82\x66\xb3\xd9\x78\x3f\xc1\xbc\x7b\x2a\xc4\x2a\x4e\xfd\xa6\x7d\x5b\xda\x7d\xfb\xc5\x3e\x6d\xe4\x24\xad\xb2\xbf\x7f\xac\xd2\x61\xdf\xef\x8d\xe6\xbd\xd5\xbe\xe3\xaf\x8f\x2c\xdf\x65\x95\x56\xf3\xbb\x65\x2c\xcb\xd3\xb4\x66\xd4\x3f\x9b\x23\x37\xc6\xb4\x2d\x4c\x45\xfd\xf4\x17\x68\xf0\x73\x04\x62\x5c\xb9\x45\x1a\xb8\x45\x1a\x34\x17\x3e\x68\x13\xc9\x3d\xd6\x25\x52\x63\xe4\xc6\xbe\x85\xea\x24\xd2\x7b\x11\x55\x3b\x08\x78\x5c\xd5\x29\xac\x72\xa9\xf4\x83\x98\x09\x7c\x9d\x20\x2b\x45\x64\xcb\x42\x13\xd9\xa2\x54\x70\xa4\x54\x55\xfa\x5e\xa0\x8f\x81\xf2\xec\xea\x18\x90\x99\x3a\x97\x48\x44\x98\xfc\xc4\xa0\xea\x6e\x6b\x81\xbd\x5e\x5e\xfc\x1b\x00\x00\xff\xff\xb3\xdf\xb0\xeb\x38\x17\x00\x00")

func embeddedrulesRulesPhpBytes() ([]byte, error) {
	return bindataRead(
		_embeddedrulesRulesPhp,
		"embeddedrules/rules.php",
	)
}

func embeddedrulesRulesPhp() (*asset, error) {
	bytes, err := embeddedrulesRulesPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "embeddedrules/rules.php", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"embeddedrules/rules.php": embeddedrulesRulesPhp,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"embeddedrules": &bintree{nil, map[string]*bintree{
		"rules.php": &bintree{embeddedrulesRulesPhp, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
